{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap c6b59d8a33695e5fee63","webpack:///./src/autoNumeric.js","webpack:///external {\"root\":\"jQuery\",\"commonjs\":\"jquery\",\"commonjs2\":\"jquery\",\"amd\":\"jquery\"}"],"names":["autoFormat","autoUnFormat","getDefaultConfig","getLanguages","validate","areSettingsValid","allowedTagList","defaultSettings","digitGroupSeparator","noSeparatorOnFocus","digitalGroupSpacing","decimalCharacter","decimalCharacterAlternative","currencySymbol","currencySymbolPlacement","negativePositiveSignPlacement","showPositiveSign","suffixText","overrideMinMaxLimits","maximumValue","minimumValue","decimalPlacesOverride","decimalPlacesShownOnFocus","scaleDivisor","scaleDecimalPlaces","scaleSymbol","saveValueToSessionStorage","onInvalidPaste","roundingMethod","allowDecimalPadding","selectAllOnFocusIfZero","negativeBracketsTypeOnBlur","emptyInputBehavior","leadingZero","formatOnPageLoad","selectNumberOnly","defaultValueOverride","unformatOnSubmit","outputFormat","showWarnings","failOnUnknownOption","keyCode","Backspace","Tab","Enter","Shift","Ctrl","Alt","PauseBreak","CapsLock","Esc","Space","PageUp","PageDown","End","Home","LeftArrow","UpArrow","RightArrow","DownArrow","Insert","Delete","num0","num1","num2","num3","num4","num5","num6","num7","num8","num9","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","Windows","RightClick","numpad0","numpad1","numpad2","numpad3","numpad4","numpad5","numpad6","numpad7","numpad8","numpad9","MultiplyNumpad","PlusNumpad","MinusNumpad","DotNumpad","SlashNumpad","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","NumLock","ScrollLock","MyComputer","MyCalculator","Semicolon","Equal","Comma","Hyphen","Dot","Slash","Backquote","LeftBracket","Backslash","RightBracket","Quote","Command","AndroidDefault","keyName","Unidentified","AltGr","Fn","FnLock","Hyper","Meta","Super","Symbol","SymbolLock","Clear","Copy","CrSel","Cut","EraseEof","ExSel","Paste","Redo","Undo","Accept","Again","Attn","Cancel","ContextMenu","Execute","Find","Finish","Help","Pause","Play","Props","Select","ZoomIn","ZoomOut","BrightnessDown","BrightnessUp","Eject","LogOff","Power","PowerOff","PrintScreen","Hibernate","Standby","WakeUp","Compose","Dead","Print","Minus","Plus","NumpadDot","NumpadDotAlt","NumpadMultiply","NumpadPlus","NumpadMinus","NumpadSlash","NumpadDotObsoleteBrowsers","NumpadMultiplyObsoleteBrowsers","NumpadPlusObsoleteBrowsers","NumpadMinusObsoleteBrowsers","NumpadSlashObsoleteBrowsers","defaultMinimumValue","defaultMaximumValue","defaultRoundingMethod","defaultLeadingZero","defaultSelectNumberOnly","languageOption","French","NorthAmerican","British","Swiss","Japanese","Turkish","Spanish","Chinese","factory","define","module","exports","require","window","jQuery","jQueryOriginalVal","$","fn","val","isNull","value","isUndefined","isUndefinedOrNullOrEmpty","isString","str","String","isBoolean","isTrueOrFalseString","lowercaseValue","toLowerCase","isObject","reference","Array","isArray","isEmptyObj","obj","prop","hasOwnProperty","isNumber","isNaN","parseFloat","isFinite","isInt","parseInt","preparePastedText","text","holder","stripAllNonNumberCharacters","settingsClone","replace","contains","needle","indexOf","isInArray","array","arr","Object","prototype","toString","call","Error","decimalPlaces","split","decimalPart","length","keyCodeNumber","event","which","character","key","fromCharCode","result","checkIfInRange","parsedMinValue","parsedMaxValue","parsedValue","parseStr","testMinMax","isNegative","numericString","checkEverywhere","isNegativeStrict","charAt","isZeroOrHasNoValue","test","setRawNegativeSign","replaceCharAt","string","index","newCharacter","substr","clampToRangeLimits","settings","Math","max","min","countNumberCharactersOnTheCaretLeftSide","formattedNumberString","caretPosition","numberDotOrNegativeSign","RegExp","numberDotAndNegativeSignCount","findCaretPositionInFormattedNumber","rawNumberString","caretPositionInRawValue","formattedNumberStringSize","rawNumberStringSize","formattedNumberStringIndex","rawNumberStringIndex","countCharInText","charCounter","convertCharacterCountToIndexPosition","characterCount","getElementSelection","that","position","selectionStart","focus","select","document","selection","createRange","moveStart","end","start","selectionEnd","setElementSelection","range","createTextRange","collapse","moveEnd","throwError","message","warning","showWarning","console","warn","runCallbacksFoundInTheSettingsObject","$this","each","autoNumeric","maximumVMinAndVMaxDecimalLength","leftOrAll","skipFirstAutoStrip","trailingNegative","skipLastAutoStrip","allowedAutoStrip","match","numRegAutoStrip","join","nSign","integerPart","modifiedIntegerPart","negativeSignCharacter","mIntPos","slice","mIntNeg","hasFocus","stripReg","toggleNegativeBracket","firstBracket","lastBracket","convertToNumericString","lastIndexOf","temp","arabicToLatinNumbers","toLocale","locale","Number","modifyNegativeSignAndDecimalCharacterForRawValue","modifyNegativeSignAndDecimalCharacterForFormattedValue","checkEmpty","inputValue","signOnEmpty","addGroupSeparators","strip","empty","isValueNegative","isZero","digitalGroup","substring","positiveSignCharacter","rawValue","truncateZeros","roundedInputValue","temporaryDecimalPlacesOverride","regex","roundValue","round","ceil","floor","ivRounded","dPos","inputValueHasADot","vdPos","cDec","zeros","rLength","tRound","odd","ivArray","truncateDecimal","isPaste","modifiedDecimalPart","nL","search","xc","yc","xNeg","checkIfInRangeWithOverrideOption","minParse","maxParse","valParse","getCurrentElement","element","getAutoNumericHolder","update","data","AutoNumericHolder","get","keepAnOriginalSettingsCopy","oDec","oPad","oBracket","oSep","oSign","oSuffix","readCookie","name","nameEQ","ca","cookie","storageTest","mod","sessionStorage","setItem","removeItem","cleanLeadingTrailingZeros","trimPaddedZerosFromDecimalPlaces","trimmedDecimalPart","saveValueToPersistentStorage","action","storedName","decodeURIComponent","id","date","expires","Date","setTime","getTime","toUTCString","getItem","$that","formatted","processed","eventKeyCode","setReal","pos","_setSelection","left","right","_getLeftAndRightPartAroundTheSelection","stripZeros","newValue","aNegRegAutoStrip","parts","_normalizeParts","minTest","maxTest","testValue","_setCaretPosition","trigger","currencySymbolLen","hasNeg","valueLen","signPosition","_getSignPosition","valuePartsBeforePaste","oldParts","modifiedLeftPart","_setValueParts","ctrlKey","metaKey","type","shiftKey","_checkPaste","preventDefault","negLen","suffixTextLen","_expandSelectionOnSign","caretFix","_getUnformattedLeftAndRightPartAroundTheSelection","throwInput","_processCharacterDeletionIfTrailingNegativeSign","eventOrChar","eventCharacter","eventNumber","leftLength","subParts","leftAr","shift","push","signParts","escapeChr","escapedParts","miniParts","leftReg","newLeft","input","androidSelectionStart","_getStringOrArray","getArrayBehavior","formIndex","allFormElements","aiIndex","scIndex","rSubmitterTypes","rSubmittable","rCheckableType","rNonAutoNumericTypes","count","field","localName","disabled","checked","formFields","serializeArray","scElement","testInput","serialize","formParts","inputName","modifiedInputValue","onFocusInAndMouseEnter","is","target","roundedValue","valueOnFocus","lastVal","onEmpty","onKeydown","_updateAutoNumericHolderEventKeycode","initialValueOnKeydown","readOnly","triggerEvent","_updateAutoNumericHolderProperties","_skipAlways","_processCharacterDeletion","_formatValue","onKeypress","isCharacterInsertionAllowed","_processCharacterInsertion","onInput","charCodeAt","androidCharEntered","decimalCharacterPosition","hasDecimalCharacter","onKeyup","skip","isOnAndroid","onFocusOutAndMouseLeave","origValue","groupedValue","change","onPaste","rawPastedText","clipboardData","getData","initialFormattedValue","selectionSize","isAllInputTextSelected","isPasteNegative","untranslatedPastedText","pastedText","caretPositionOnInitialTextAfterPasting","initialUnformattedNumber","isInitialValueNegative","isPasteNegativeAndInitialValueIsPositive","leftPartContainedADot","leftPart","rightPart","leftFormattedPart","rightFormattedPart","lastGoodKnownResult","pastedTextIndex","lastGoodKnownResultIndex","lastGoodKnownResultSize","leftFormattedPart2","rightFormattedPart2","indexWherePastedTextHasBeenInserted","indexSelectionEndInRawValue","selectedText","valueHasBeenSet","valueHasBeenClamped","error","clampedValue","caretPositionInFormattedNumber","onSubmit","closest","on","$settings","getInputIfSupportedTagAndType","$input","currentElementTag","formatDefaultValueOnPageLoad","setValue","currentValue","unLocalizedCurrentValue","toNumericValue","attr","Infinity","toStrip","tagList","correctNegativePositiveSignPlacementOption","calculateVMinAndVMaxIntegerSizes","maximumValueIntegerPart","minimumValueIntegerPart","correctDecimalPlacesOverrideOption","setsAlternativeDecimalSeparatorCharacter","cachesUsualRegularExpressions","allNumbersReg","noAllNumbersReg","aNegReg","negativeSignRegPart","allowed","transformOptionsValuesToDefaultTypes","convertOldOptionsToNewOnes","options","oldOptionsConverter","aSep","nSep","dGroup","aDec","altDec","aSign","pSign","pNeg","aSuffix","oLimits","vMax","vMin","mDec","eDec","scaleDecimal","aStor","mRound","aPad","nBracket","wEmpty","lZero","aForm","sNumber","anDefault","unSetOnSubmit","outputType","debug","runOnce","option","getInitialSettings","extend","tagData","NaN","methods","init","eventHandlers","onJqFocus","setTimeout","eventConfigs","handler","forEach","addEventListener","eventConfig","initialized","misc","removeAllEvents","el","removeEventListener","off","destroy","clearValue","removeData","wipe","set","hasBeenRounded","tempDecimal","onOff","attemptedValue","unSet","reSet","eq","getLocalized","getNumber","getFormatted","getString","getArray","getSettings","method","args","apply","defaults","lang","valueString","autoStrip","autoUnformat","userOptions","shouldExtendDefaultOptions","testPositiveInteger","testNumericalCharacters","testFloatOrIntegerAndPossibleNegativeSign","testPositiveFloatOrInteger","vMinAndVMaxMaximumDecimalPlaces","autoValidate","isValid","arabicNumbers","returnANumber","parseDecimalCharacter","parseThousandSeparator","resultAsNumber","eventName","detail","CustomEvent","bubbles","cancelable","createEvent","initCustomEvent","dispatchEvent","params","evt","Event","me","$me","arguments","originalVal","numericValue","trim","format","unFormat"],"mappings":"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","file":"autoNumeric.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"jquery\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"jquery\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"autonumeric\"] = factory(require(\"jquery\"));\n\telse\n\t\troot[\"autonumeric\"] = factory(root[\"jQuery\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap c6b59d8a33695e5fee63","/**\r\n *               autoNumeric.js\r\n *\r\n * @version      2.0.12\r\n * @date         2017-04-07 UTC 07:00\r\n *\r\n * @author       Bob Knothe\r\n * @contributors Alexandre Bonneau, Sokolov Yura and other Github users,\r\n *               cf. AUTHORS.md.\r\n * @copyright    2009 Robert J. Knothe http://www.decorplanit.com/plugin/\r\n * @since        2009-08-09\r\n *\r\n * @summary      autoNumeric is a library that provides live as-you-type\r\n *               formatting for international numbers and currencies.\r\n *\r\n *               Note : Some functions are borrowed from big.js\r\n * @link         https://github.com/MikeMcl/big.js/\r\n *\r\n * Please report any bugs to https://github.com/autoNumeric/autoNumeric\r\n *\r\n * @license      Released under the MIT License\r\n * @link         http://www.opensource.org/licenses/mit-license.php\r\n *\r\n * Permission is hereby granted, free of charge, to any person\r\n * obtaining a copy of this software and associated documentation\r\n * files (the \"Software\"), to deal in the Software without\r\n * restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sub license, and/or sell\r\n * copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following\r\n * conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\r\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\r\n * OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\n\r\n/* global module, require, define */\r\n\r\n// Functions names for ES6 exports\r\nlet autoFormat;\r\nlet autoUnFormat;\r\nlet getDefaultConfig;\r\nlet getLanguages;\r\nlet validate;\r\nlet areSettingsValid;\r\n\r\n// AutoNumeric default settings\r\n/**\r\n * List of allowed tag on which autoNumeric can be used.\r\n */\r\nconst allowedTagList = [\r\n    'b',\r\n    'caption',\r\n    'cite',\r\n    'code',\r\n    'const',\r\n    'dd',\r\n    'del',\r\n    'div',\r\n    'dfn',\r\n    'dt',\r\n    'em',\r\n    'h1',\r\n    'h2',\r\n    'h3',\r\n    'h4',\r\n    'h5',\r\n    'h6',\r\n    'ins',\r\n    'kdb',\r\n    'label',\r\n    'li',\r\n    'option',\r\n    'output',\r\n    'p',\r\n    'q',\r\n    's',\r\n    'sample',\r\n    'span',\r\n    'strong',\r\n    'td',\r\n    'th',\r\n    'u',\r\n];\r\n\r\n/**\r\n * Defaults options are public - these can be overridden by the following method:\r\n * - HTML5 data attributes (ie. `<input type=\"text\" data-currency-symbol=\" €\">`)\r\n * - Options passed by the 'init' or 'update' methods (ie. `aNInput.autoNumeric('update', { currencySymbol: ' €' });`)\r\n * - Use jQuery's `$.extend` method for global changes - also a great way to pass ASP.NET current culture settings\r\n */\r\nconst defaultSettings = {\r\n    /* Allowed thousand grouping separator characters :\r\n     * ','      // Comma\r\n     * '.'      // Dot\r\n     * ' '      // Normal space\r\n     * '\\u2009' // Thin-space\r\n     * '\\u202f' // Narrow no-break space\r\n     * '\\u00a0' // No-break space\r\n     * ''       // No separator\r\n     * \"'\"      // Apostrophe\r\n     * '٬'      // Arabic thousands separator\r\n     * '˙'      // Dot above\r\n     * Deprecated older option name : aSep\r\n     */\r\n    digitGroupSeparator: ',',\r\n\r\n    /* Remove the thousand separator on focus, currency symbol and suffix on focus\r\n     * example if the input value \"$ 1,999.88 suffix\"\r\n     * on \"focusin\" it becomes \"1999.88\" and back to \"$ 1,999.88 suffix\" on focus out.\r\n     * Deprecated older option name : nSep\r\n     */\r\n    noSeparatorOnFocus: false,\r\n\r\n    /* Digital grouping for the thousand separator used in Format\r\n     * digitalGroupSpacing: \"2\", results in 99,99,99,999 India's lakhs\r\n     * digitalGroupSpacing: \"2s\", results in 99,999,99,99,999 India's lakhs scaled\r\n     * digitalGroupSpacing: \"3\", results in 999,999,999 default\r\n     * digitalGroupSpacing: \"4\", results in 9999,9999,9999 used in some Asian countries\r\n     * Deprecated older option name : dGroup\r\n     */\r\n    digitalGroupSpacing: '3',\r\n\r\n    /* Allowed decimal separator characters :\r\n     * ',' : Comma\r\n     * '.' : Dot\r\n     * '·' : Middle-dot\r\n     * '٫' : Arabic decimal separator\r\n     * '⎖' : Decimal separator key symbol\r\n     * Deprecated older option name : aDec\r\n     */\r\n    decimalCharacter: '.',\r\n\r\n    /* Allow to declare an alternative decimal separator which is automatically replaced by `decimalCharacter` when typed.\r\n     * This is used by countries that use a comma \",\" as the decimal character and have keyboards\\numeric pads that have\r\n     * a period 'full stop' as the decimal characters (France or Spain for instance).\r\n     * Deprecated older option name : altDec\r\n     */\r\n    decimalCharacterAlternative: null,\r\n\r\n    /* currencySymbol = allowed currency symbol\r\n     * Must be in quotes currencySymbol: \"$\"\r\n     * space to the right of the currency symbol currencySymbol: '$ '\r\n     * space to the left of the currency symbol currencySymbol: ' $'\r\n     * Deprecated older option name : aSign\r\n     */\r\n    currencySymbol: '',\r\n\r\n    /* currencySymbolPlacement = placement of currency sign as a p=prefix or s=suffix\r\n     * for prefix currencySymbolPlacement: \"p\" (default)\r\n     * for suffix currencySymbolPlacement: \"s\"\r\n     * Deprecated older option name : pSign\r\n     */\r\n    //TODO Rename the options to more explicit names ('p' => 'prefix', etc.)\r\n    currencySymbolPlacement: 'p',\r\n\r\n    /* Placement of negative/positive sign relative to the currencySymbol option l=left, r=right, p=prefix & s=suffix\r\n     * -1,234.56  => default no options required\r\n     * -$1,234.56 => {currencySymbol: \"$\"} or {currencySymbol: \"$\", negativePositiveSignPlacement: \"l\"}\r\n     * $-1,234.56 => {currencySymbol: \"$\", negativePositiveSignPlacement: \"r\"} // Default if negativePositiveSignPlacement is 'null' and currencySymbol is not empty\r\n     * -1,234.56$ => {currencySymbol: \"$\", currencySymbolPlacement: \"s\", negativePositiveSignPlacement: \"p\"} // Default if negativePositiveSignPlacement is 'null' and currencySymbol is not empty\r\n     * 1,234.56-  => {negativePositiveSignPlacement: \"s\"}\r\n     * $1,234.56- => {currencySymbol: \"$\", negativePositiveSignPlacement: \"s\"}\r\n     * 1,234.56-$ => {currencySymbol: \"$\", currencySymbolPlacement: \"s\"}\r\n     * 1,234.56$- => {currencySymbol: \"$\", currencySymbolPlacement: \"s\", negativePositiveSignPlacement: \"r\"}\r\n     * Deprecated older option name : pNeg\r\n     */\r\n    //TODO Rename the options to more explicit names ('p' => 'prefix', etc.)\r\n    negativePositiveSignPlacement: null,\r\n\r\n\r\n    /* Allow the positive sign symbol `+` to be displayed for positive numbers.\r\n     * By default, this positive sign is not shown.\r\n     * The sign placement is controlled by the 'negativePositiveSignPlacement' option, mimicking the negative sign placement rules.\r\n     */\r\n    showPositiveSign: false,\r\n\r\n    /* Additional suffix\r\n     * Must be in quotes suffixText: 'gross', a space is allowed suffixText: ' dollars'\r\n     * Numeric characters and negative sign not allowed'\r\n     * Deprecated older option name : aSuffix\r\n     */\r\n    suffixText: '',\r\n\r\n    /* Override min max limits\r\n     * overrideMinMaxLimits: \"ceiling\" adheres to maximumValue and ignores minimumValue settings\r\n     * overrideMinMaxLimits: \"floor\" adheres to minimumValue and ignores maximumValue settings\r\n     * overrideMinMaxLimits: \"ignore\" ignores both minimumValue & maximumValue\r\n     * Deprecated older option name : oLimits\r\n     */\r\n    overrideMinMaxLimits: null,\r\n\r\n    /* Maximum possible value\r\n     * value must be enclosed in quotes and use the period for the decimal point\r\n     * value must be larger than minimumValue\r\n     * Deprecated older option name : vMax\r\n     */\r\n    maximumValue: '9999999999999.99', // 9.999.999.999.999,99 ~= 10000 billions\r\n\r\n    /* Minimum possible value\r\n     * value must be enclosed in quotes and use the period for the decimal point\r\n     * value must be smaller than maximumValue\r\n     * Deprecated older option name : vMin\r\n     */\r\n    minimumValue: '-9999999999999.99', // -9.999.999.999.999,99 ~= 10000 billions\r\n\r\n    /* Maximum number of decimal places = used to override decimal places set by the minimumValue & maximumValue values\r\n     * Deprecated older option name : mDec\r\n     */\r\n    decimalPlacesOverride: null,\r\n\r\n    /* Expanded decimal places visible when input has focus - example:\r\n     * {decimalPlacesShownOnFocus: \"5\"} and the default 2 decimal places with focus \"1,000.12345\" without focus \"1,000.12\" the results depends on the rounding method used\r\n     * the \"get\" method returns the extended decimal places\r\n     * Deprecated older option name : eDec\r\n     */\r\n    decimalPlacesShownOnFocus: null,\r\n\r\n    /* The next three options (scaleDivisor, scaleDecimalPlaces & scaleSymbol) handle scaling of the input when the input does not have focus\r\n     * Please note that the non-scaled value is held in data and it is advised that you use the \"saveValueToSessionStorage\" option to ensure retaining the value\r\n     * [\"divisor\", \"decimal places\", \"symbol\"]\r\n     * Example: with the following options set {scaleDivisor: '1000', scaleDecimalPlaces: '1', scaleSymbol: ' K'}\r\n     * Example: focusin value \"1,111.11\" focusout value \"1.1 K\"\r\n     */\r\n\r\n    /* The `scaleDivisor` decides the on focus value and places the result in the input on focusout\r\n     * Example {scaleDivisor: '1000'} or <input data-scale-divisor=\"1000\">\r\n     * The divisor value - does not need to be whole number but please understand that Javascript has limited accuracy in math\r\n     * The \"get\" method returns the full value, including the 'hidden' decimals.\r\n     */\r\n    scaleDivisor: null,\r\n\r\n    /*\r\n     * The `scaleDecimalPlaces` option is the number of decimal place when not in focus - for this to work, `scaledDivisor` must not be `null`.\r\n     * This is optional ; if omitted the decimal places will be the same when the input has the focus.\r\n     * Deprecated older option name : scaleDecimal\r\n     */\r\n    scaleDecimalPlaces: null,\r\n\r\n    /*\r\n     * The `scaleSymbol` option is a symbol placed as a suffix when not in focus.\r\n     * This is optional too.\r\n     */\r\n    scaleSymbol: null,\r\n\r\n    /* Set to true to allow the decimalPlacesShownOnFocus value to be saved with sessionStorage\r\n     * if ie 6 or 7 the value will be saved as a session cookie\r\n     * Deprecated older option name : aStor\r\n     */\r\n    saveValueToSessionStorage: false,\r\n\r\n    /*\r\n     * Manage how autoNumeric react when the user tries to paste an invalid number.\r\n     * - 'error'    : (This is the default behavior) The input value is not changed and an error is output in the console.\r\n     * - 'ignore'   : idem than 'error', but fail silently without outputting any error/warning in the console.\r\n     * - 'clamp'    : if the pasted value is either too small or too big regarding the minimumValue and maximumValue range, then the result is clamped to those limits.\r\n     * - 'truncate' : autoNumeric will insert as many pasted numbers it can at the initial caret/selection, until everything is pasted, or the range limit is hit.\r\n     *                The non-pasted numbers are dropped and therefore not used at all.\r\n     * - 'replace'  : autoNumeric will first insert as many pasted numbers it can at the initial caret/selection, then if the range limit is hit, it will try\r\n     *                to replace one by one the remaining initial numbers (on the right side of the caret) with the rest of the pasted numbers.\r\n     *\r\n     * Note 1 : A paste content starting with a negative sign '-' will be accepted anywhere in the input, and will set the resulting value as a negative number\r\n     * Note 2 : A paste content starting with a number will be accepted, even if the rest is gibberish (ie. '123foobar456').\r\n     *          Only the first number will be used (here '123').\r\n     * Note 3 : The paste event works with the `decimalPlacesShownOnFocus` option too.\r\n     */\r\n    //TODO Shouldn't we use `truncate` as the default value?\r\n    onInvalidPaste: 'error',\r\n\r\n    /* method used for rounding\r\n     * roundingMethod: \"S\", Round-Half-Up Symmetric (default)\r\n     * roundingMethod: \"A\", Round-Half-Up Asymmetric\r\n     * roundingMethod: \"s\", Round-Half-Down Symmetric (lower case s)\r\n     * roundingMethod: \"a\", Round-Half-Down Asymmetric (lower case a)\r\n     * roundingMethod: \"B\", Round-Half-Even \"Bankers Rounding\"\r\n     * roundingMethod: \"U\", Round Up \"Round-Away-From-Zero\"\r\n     * roundingMethod: \"D\", Round Down \"Round-Toward-Zero\" - same as truncate\r\n     * roundingMethod: \"C\", Round to Ceiling \"Toward Positive Infinity\"\r\n     * roundingMethod: \"F\", Round to Floor \"Toward Negative Infinity\"\r\n     * roundingMethod: \"N05\" Rounds to the nearest .05 => same as \"CHF\" used in 1.9X and still valid\r\n     * roundingMethod: \"U05\" Rounds up to next .05\r\n     * roundingMethod: \"D05\" Rounds down to next .05\r\n     * Deprecated older option name : mRound\r\n     */\r\n    //TODO Rename the options to more explicit names ('S' => 'RoundHalfUpSymmetric', etc.)\r\n    //TODO Add an `an.roundingMethod` object that enum those options clearly\r\n    roundingMethod: 'S',\r\n\r\n    /* Allow padding the decimal places with zeros\r\n     * allowDecimalPadding: true - always Pad decimals with zeros\r\n     * allowDecimalPadding: false - does not pad with zeros.\r\n     * Note: setting allowDecimalPadding to 'false' will override the 'decimalPlacesOverride' setting.\r\n     *\r\n     * thanks to Jonas Johansson for the suggestion\r\n     * Deprecated older option name : aPad\r\n     */\r\n    allowDecimalPadding: true,\r\n\r\n    /*\r\n     * If true, all text within the input will automatically be\r\n     * selected when input gets focus and the value is equal to zero.\r\n     */\r\n    selectAllOnFocusIfZero: false,\r\n\r\n    /* Adds brackets on negative values (ie. transforms '-$ 999.99' to '(999.99)')\r\n     * Those brackets are visible only when the field does NOT have the focus.\r\n     * The left and right symbols should be enclosed in quotes and separated by a comma\r\n     * This option can be of the following values :\r\n     * null, // This is the default value, which deactivate this feature\r\n     * '(,)',\r\n     * '[,]',\r\n     * '<,>' or\r\n     * '{,}'\r\n     * Deprecated older option name : nBracket\r\n     */\r\n    //TODO Rename the options to more explicit names ('(,)' => 'parentheses', etc.)\r\n    negativeBracketsTypeOnBlur: null,\r\n\r\n    /* Displayed on empty string \"\"\r\n     * emptyInputBehavior: \"focus\" - (default) currency sign displayed and the input receives focus\r\n     * emptyInputBehavior: \"press\" - currency sign displays on any key being pressed\r\n     * emptyInputBehavior: \"always\" - always displays the currency sign only\r\n     * emptyInputBehavior: \"zero\" - if the input has no value on focus out displays a zero \"rounded\" with or without a currency sign\r\n     * Deprecated older option name : wEmpty\r\n     */\r\n    emptyInputBehavior: 'focus',\r\n\r\n    /* Controls leading zero behavior\r\n     * leadingZero: \"allow\", - allows leading zeros to be entered. Zeros will be truncated when entering additional digits. On focusout zeros will be deleted.\r\n     * leadingZero: \"deny\", - allows only one leading zero on values less than one\r\n     * leadingZero: \"keep\", - allows leading zeros to be entered. on focusout zeros will be retained.\r\n     * Deprecated older option name : lZero\r\n     */\r\n    leadingZero: 'deny',\r\n\r\n    /* Determine if the default value will be formatted on initialization.\r\n     * true = automatically formats the default value on initialization\r\n     * false = will not format the default value on initialization\r\n     * Deprecated older option name : aForm\r\n     */\r\n    formatOnPageLoad: true,\r\n\r\n    /* Determine if the select all keyboard command will select the complete input text, or only the input numeric value\r\n     * Note : If the currency symbol is between the numeric value and the negative sign, only the numeric value will selected\r\n     * Deprecated older option name : sNumber\r\n     */\r\n    selectNumberOnly: false,\r\n\r\n    /* Helper option for ASP.NET postback\r\n     * should be the value of the unformatted default value\r\n     * examples:\r\n     * no default value=\"\" {defaultValueOverride: \"\"}\r\n     * value=1234.56 {defaultValueOverride: '1234.56'}\r\n     * Deprecated older option name : anDefault\r\n     */\r\n    defaultValueOverride: null,\r\n\r\n    /* Removes formatting on submit event\r\n     * this output format: positive nnnn.nn, negative -nnnn.nn\r\n     * review the 'unSet' method for other formats\r\n     * Deprecated older option name : unSetOnSubmit\r\n     */\r\n    unformatOnSubmit: false,\r\n\r\n    /* Allows the output to be in the locale format via the \"get\", \"getString\" & \"getArray\" methods\r\n     * null or 'string' => 'nnnn.nn' or '-nnnn.nn' as text type. This is the default behavior.\r\n     * 'number'         => nnnn.nn or -nnnn.nn as a Number (Warning: this works only for integers inferior to Number.MAX_SAFE_INTEGER)\r\n     * ',' or '-,'      => 'nnnn,nn' or '-nnnn,nn'\r\n     * '.-'             => 'nnnn.nn' or 'nnnn.nn-'\r\n     * ',-'             => 'nnnn,nn' or 'nnnn,nn-'\r\n     * Deprecated older option name : outputType\r\n     */\r\n    outputFormat: null,\r\n\r\n    /* Defines if warnings should be shown\r\n     * Error handling function\r\n     * true => all warning are shown\r\n     * false => no warnings are shown, only the thrown errors\r\n     * Deprecated older option name : debug\r\n     */\r\n    showWarnings: true,\r\n\r\n    /*\r\n     * This option is the 'strict mode' (aka 'debug' mode), which allows autoNumeric to strictly analyse the options passed, and fails if an unknown options is used in the settings object.\r\n     * You should set that to 'TRUE' if you want to make sure you are only using 'pure' autoNumeric settings objects in your code.\r\n     * If you see uncaught errors in the console and your code starts to fail, this means somehow those options gets corrupted by another program.\r\n     */\r\n    failOnUnknownOption: false,\r\n};\r\n\r\n/**\r\n * Wrapper variable that hold named keyboard keys with their respective keyCode as seen in DOM events.\r\n * //TODO Replace every call to this object with a call to `keyName`\r\n * @deprecated\r\n */\r\nconst keyCode = {\r\n    Backspace:      8,\r\n    Tab:            9,\r\n    Enter:          13,\r\n    Shift:          16,\r\n    Ctrl:           17,\r\n    Alt:            18,\r\n    PauseBreak:     19,\r\n    CapsLock:       20,\r\n    Esc:            27,\r\n    Space:          32,\r\n    PageUp:         33,\r\n    PageDown:       34,\r\n    End:            35,\r\n    Home:           36,\r\n    LeftArrow:      37,\r\n    UpArrow:        38,\r\n    RightArrow:     39,\r\n    DownArrow:      40,\r\n    Insert:         45,\r\n    Delete:         46,\r\n    num0:           48,\r\n    num1:           49,\r\n    num2:           50,\r\n    num3:           51,\r\n    num4:           52,\r\n    num5:           53,\r\n    num6:           54,\r\n    num7:           55,\r\n    num8:           56,\r\n    num9:           57,\r\n    a:              65,\r\n    b:              66,\r\n    c:              67,\r\n    d:              68,\r\n    e:              69,\r\n    f:              70,\r\n    g:              71,\r\n    h:              72,\r\n    i:              73,\r\n    j:              74,\r\n    k:              75,\r\n    l:              76,\r\n    m:              77,\r\n    n:              78,\r\n    o:              79,\r\n    p:              80,\r\n    q:              81,\r\n    r:              82,\r\n    s:              83,\r\n    t:              84,\r\n    u:              85,\r\n    v:              86,\r\n    w:              87,\r\n    x:              88,\r\n    y:              89,\r\n    z:              90,\r\n    Windows:        91,\r\n    RightClick:     93,\r\n    numpad0:        96,\r\n    numpad1:        97,\r\n    numpad2:        98,\r\n    numpad3:        99,\r\n    numpad4:        100,\r\n    numpad5:        101,\r\n    numpad6:        102,\r\n    numpad7:        103,\r\n    numpad8:        104,\r\n    numpad9:        105,\r\n    MultiplyNumpad: 106,\r\n    PlusNumpad:     107,\r\n    MinusNumpad:    109,\r\n    DotNumpad:      110,\r\n    SlashNumpad:    111,\r\n    F1:             112,\r\n    F2:             113,\r\n    F3:             114,\r\n    F4:             115,\r\n    F5:             116,\r\n    F6:             117,\r\n    F7:             118,\r\n    F8:             119,\r\n    F9:             120,\r\n    F10:            121,\r\n    F11:            122,\r\n    F12:            123,\r\n    NumLock:        144,\r\n    ScrollLock:     145,\r\n    MyComputer:     182,\r\n    MyCalculator:   183,\r\n    Semicolon:      186,\r\n    Equal:          187,\r\n    Comma:          188,\r\n    Hyphen:         189,\r\n    Dot:            190,\r\n    Slash:          191,\r\n    Backquote:      192,\r\n    LeftBracket:    219,\r\n    Backslash:      220,\r\n    RightBracket:   221,\r\n    Quote:          222,\r\n    Command:        224,\r\n    AndroidDefault: 229, // Android Chrome returns the same keycode number 229 for all keys pressed\r\n};\r\n\r\n/**\r\n * Wrapper variable that hold named keyboard keys with their respective key name (as set in KeyboardEvent.key).\r\n * Those names are listed here :\r\n * @link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\r\n */\r\nconst keyName = {\r\n    // Special values\r\n    Unidentified:   'Unidentified',\r\n\r\n    // Modifier keys\r\n    Alt:            'Alt',\r\n    AltGr:          'AltGraph',\r\n    CapsLock:       'CapsLock', // Under Chrome, e.key is empty for CapsLock\r\n    Ctrl:           'Control',\r\n    Fn:             'Fn',\r\n    FnLock:         'FnLock',\r\n    Hyper:          'Hyper', // 'OS' under Firefox\r\n    Meta:           'Meta', // The Windows, Command or ⌘ key // 'OS' under Firefox and IE9\r\n    Windows:        'Meta', // This is a non-official key name\r\n    Command:        'Meta', // This is a non-official key name\r\n    NumLock:        'NumLock',\r\n    ScrollLock:     'ScrollLock',\r\n    Shift:          'Shift',\r\n    Super:          'Super', // 'OS' under Firefox\r\n    Symbol:         'Symbol',\r\n    SymbolLock:     'SymbolLock',\r\n\r\n    // Whitespace keys\r\n    Enter:          'Enter',\r\n    Tab:            'Tab',\r\n    Space:          ' ', // 'Spacebar' for Firefox <37, and IE9\r\n\r\n    // Navigation keys\r\n    DownArrow:      'ArrowDown', // 'Down' for Firefox <=36, and IE9\r\n    LeftArrow:      'ArrowLeft', // 'Left' for Firefox <=36, and IE9\r\n    RightArrow:     'ArrowRight', // 'Right' for Firefox <=36, and IE9\r\n    UpArrow:        'ArrowUp', // 'Up' for Firefox <=36, and IE9\r\n    End:            'End',\r\n    Home:           'Home',\r\n    PageDown:       'PageDown',\r\n    PageUp:         'PageUp',\r\n\r\n    // Editing keys\r\n    Backspace:      'Backspace',\r\n    Clear:          'Clear',\r\n    Copy:           'Copy',\r\n    CrSel:          'CrSel', // 'Crsel' for Firefox <=36, and IE9\r\n    Cut:            'Cut',\r\n    Delete:         'Delete', // 'Del' for Firefox <=36, and IE9\r\n    EraseEof:       'EraseEof',\r\n    ExSel:          'ExSel', // 'Exsel' for Firefox <=36, and IE9\r\n    Insert:         'Insert',\r\n    Paste:          'Paste',\r\n    Redo:           'Redo',\r\n    Undo:           'Undo',\r\n\r\n    // UI keys\r\n    Accept:         'Accept',\r\n    Again:          'Again',\r\n    Attn:           'Attn', // 'Unidentified' for Firefox, Chrome, and IE9 ('KanaMode' when using the Japanese keyboard layout)\r\n    Cancel:         'Cancel',\r\n    ContextMenu:    'ContextMenu', // 'Apps' for Firefox <=36, and IE9\r\n    Esc:            'Escape', // 'Esc' for Firefox <=36, and IE9\r\n    Execute:        'Execute',\r\n    Find:           'Find',\r\n    Finish:         'Finish', // 'Unidentified' for Firefox, Chrome, and IE9 ('Katakana' when using the Japanese keyboard layout)\r\n    Help:           'Help',\r\n    Pause:          'Pause',\r\n    Play:           'Play',\r\n    Props:          'Props',\r\n    Select:         'Select',\r\n    ZoomIn:         'ZoomIn',\r\n    ZoomOut:        'ZoomOut',\r\n\r\n    // Device keys\r\n    BrightnessDown: 'BrightnessDown',\r\n    BrightnessUp:   'BrightnessUp',\r\n    Eject:          'Eject',\r\n    LogOff:         'LogOff',\r\n    Power:          'Power',\r\n    PowerOff:       'PowerOff',\r\n    PrintScreen:    'PrintScreen',\r\n    Hibernate:      'Hibernate', // 'Unidentified' for Firefox <=37\r\n    Standby:        'Standby', // 'Unidentified' for Firefox <=36, and IE9\r\n    WakeUp:         'WakeUp',\r\n\r\n    // IME and composition keys\r\n    Compose:        'Compose',\r\n    Dead:           'Dead',\r\n\r\n    // Function keys\r\n    F1:             'F1',\r\n    F2:             'F2',\r\n    F3:             'F3',\r\n    F4:             'F4',\r\n    F5:             'F5',\r\n    F6:             'F6',\r\n    F7:             'F7',\r\n    F8:             'F8',\r\n    F9:             'F9',\r\n    F10:            'F10',\r\n    F11:            'F11',\r\n    F12:            'F12',\r\n\r\n    // Document keys\r\n    Print:          'Print',\r\n\r\n    // 'Normal' keys\r\n    num0:           '0',\r\n    num1:           '1',\r\n    num2:           '2',\r\n    num3:           '3',\r\n    num4:           '4',\r\n    num5:           '5',\r\n    num6:           '6',\r\n    num7:           '7',\r\n    num8:           '8',\r\n    num9:           '9',\r\n    numpad0:        '0',\r\n    numpad1:        '1',\r\n    numpad2:        '2',\r\n    numpad3:        '3',\r\n    numpad4:        '4',\r\n    numpad5:        '5',\r\n    numpad6:        '6',\r\n    numpad7:        '7',\r\n    numpad8:        '8',\r\n    numpad9:        '9',\r\n    a:              'a',\r\n    b:              'b',\r\n    c:              'c',\r\n    d:              'd',\r\n    e:              'e',\r\n    f:              'f',\r\n    g:              'g',\r\n    h:              'h',\r\n    i:              'i',\r\n    j:              'j',\r\n    k:              'k',\r\n    l:              'l',\r\n    m:              'm',\r\n    n:              'n',\r\n    o:              'o',\r\n    p:              'p',\r\n    q:              'q',\r\n    r:              'r',\r\n    s:              's',\r\n    t:              't',\r\n    u:              'u',\r\n    v:              'v',\r\n    w:              'w',\r\n    x:              'x',\r\n    y:              'y',\r\n    z:              'z',\r\n    MultiplyNumpad: '*',\r\n    PlusNumpad:     '+',\r\n    MinusNumpad:    '-',\r\n    DotNumpad:      '.',\r\n    SlashNumpad:    '/',\r\n    Semicolon:      ';',\r\n    Equal:          '=',\r\n    Comma:          ',',\r\n    Hyphen:         '-',\r\n    Minus:          '-',\r\n    Plus:           '+',\r\n    Dot:            '.',\r\n    Slash:          '/',\r\n    Backquote:      '`',\r\n    LeftBracket:    '[',\r\n    RightBracket:   ']',\r\n    Backslash:      '\\\\',\r\n    Quote:          \"'\",\r\n    NumpadDot:      '.',\r\n    NumpadDotAlt:   ',', // Modern browsers automatically adapt the character sent by this key to the decimal character of the current language\r\n    NumpadMultiply: '*',\r\n    NumpadPlus:     '+',\r\n    NumpadMinus:    '-',\r\n    NumpadSlash:    '/',\r\n    NumpadDotObsoleteBrowsers:      'Decimal',\r\n    NumpadMultiplyObsoleteBrowsers: 'Multiply',\r\n    NumpadPlusObsoleteBrowsers:     'Add',\r\n    NumpadMinusObsoleteBrowsers:    'Subtract',\r\n    NumpadSlashObsoleteBrowsers:    'Divide',\r\n};\r\n\r\nconst defaultMinimumValue     = '-999999999999.99';\r\nconst defaultMaximumValue     = '999999999999.99';\r\nconst defaultRoundingMethod   = 'S';\r\nconst defaultLeadingZero      = 'deny';\r\nconst defaultSelectNumberOnly = true;\r\n\r\n/**\r\n * Predefined options for the most common languages\r\n */\r\nconst languageOption = {\r\n    French: { // Français\r\n        digitGroupSeparator        : '.', // or '\\u202f'\r\n        decimalCharacter           : ',',\r\n        decimalCharacterAlternative: '.',\r\n        currencySymbol             : '\\u202f€',\r\n        currencySymbolPlacement    : 's',\r\n        selectNumberOnly           : defaultSelectNumberOnly,\r\n        roundingMethod             : defaultRoundingMethod,\r\n        leadingZero                : defaultLeadingZero,\r\n        minimumValue               : defaultMinimumValue,\r\n        maximumValue               : defaultMaximumValue,\r\n    },\r\n    NorthAmerican: {\r\n        digitGroupSeparator    : ',',\r\n        decimalCharacter       : '.',\r\n        currencySymbol         : '$',\r\n        currencySymbolPlacement: 'p',\r\n        selectNumberOnly       : defaultSelectNumberOnly,\r\n        roundingMethod         : defaultRoundingMethod,\r\n        leadingZero            : defaultLeadingZero,\r\n        minimumValue           : defaultMinimumValue,\r\n        maximumValue           : defaultMaximumValue,\r\n    },\r\n    British: {\r\n        digitGroupSeparator    : ',',\r\n        decimalCharacter       : '.',\r\n        currencySymbol         : '£',\r\n        currencySymbolPlacement: 'p',\r\n        selectNumberOnly       : defaultSelectNumberOnly,\r\n        roundingMethod         : defaultRoundingMethod,\r\n        leadingZero            : defaultLeadingZero,\r\n        minimumValue           : defaultMinimumValue,\r\n        maximumValue           : defaultMaximumValue,\r\n    },\r\n    Swiss: { // Suisse\r\n        digitGroupSeparator    : `'`,\r\n        decimalCharacter       : '.',\r\n        currencySymbol         : '\\u202fCHF',\r\n        currencySymbolPlacement: 's',\r\n        selectNumberOnly       : defaultSelectNumberOnly,\r\n        roundingMethod         : defaultRoundingMethod,\r\n        leadingZero            : defaultLeadingZero,\r\n        minimumValue           : defaultMinimumValue,\r\n        maximumValue           : defaultMaximumValue,\r\n    },\r\n    Japanese: { // 日本語\r\n        digitGroupSeparator    : ',',\r\n        decimalCharacter       : '.',\r\n        currencySymbol         : '¥',\r\n        currencySymbolPlacement: 'p',\r\n        selectNumberOnly       : defaultSelectNumberOnly,\r\n        roundingMethod         : defaultRoundingMethod,\r\n        leadingZero            : defaultLeadingZero,\r\n        minimumValue           : defaultMinimumValue,\r\n        maximumValue           : defaultMaximumValue,\r\n    },\r\n    Turkish: {\r\n        digitGroupSeparator: '.',\r\n        decimalCharacter: ',',\r\n        decimalCharacterAlternative: '.',\r\n        currencySymbol: ' ₺',\r\n        currencySymbolPlacement: 's',\r\n        selectNumberOnly: defaultSelectNumberOnly,\r\n        roundingMethod: defaultRoundingMethod,\r\n        leadingZero: defaultLeadingZero,\r\n        minimumValue: defaultMinimumValue,\r\n        maximumValue: defaultMaximumValue,\r\n        negativePositiveSignPlacement: 'p',\r\n    },\r\n};\r\nlanguageOption.Spanish = languageOption.French; // Español (idem French)\r\nlanguageOption.Chinese = languageOption.Japanese; // 中国語 (Chinese)\r\n\r\n/**\r\n * UMD structure\r\n */\r\n(function(factory) {\r\n    //TODO This surely can be improved by letting webpack take care of generating this UMD part\r\nif (typeof define === 'function' && define.amd) {\r\n        // AMD. Register as an anonymous module.\r\n    define(['jquery'], factory);\r\n} else if (typeof module === 'object' && module.exports) {\r\n        // Node/CommonJS\r\n    module.exports = factory(require('jquery'));\r\n} else {\r\n        // Browser globals\r\n    factory(window.jQuery);\r\n}\r\n}($ => {\r\n    const jQueryOriginalVal = $.fn.val;\r\n\r\n    // Helper functions\r\n\r\n    /**\r\n     * Return TRUE if the `value` is null\r\n     *\r\n     * @static\r\n     * @param {*} value The value to test\r\n     * @returns {boolean} Return TRUE if the `value` is null, FALSE otherwise\r\n     */\r\n    function isNull(value) {\r\n        return value === null;\r\n    }\r\n\r\n    /**\r\n     * Return TRUE if the `value` is undefined\r\n     *\r\n     * @static\r\n     * @param {*} value The value to test\r\n     * @returns {boolean} Return TRUE if the `value` is undefined, FALSE otherwise\r\n     */\r\n    function isUndefined(value) {\r\n        return value === void(0);\r\n    }\r\n\r\n    /**\r\n     * Return TRUE if the `value` is undefined, null or empty\r\n     *\r\n     * @param {*} value\r\n     * @returns {boolean}\r\n     */\r\n    function isUndefinedOrNullOrEmpty(value) {\r\n        return value === null || value === void(0) || '' === value;\r\n    }\r\n\r\n    /**\r\n     * Return TRUE if the given parameter is a String\r\n     *\r\n     * @param {*} str\r\n     * @returns {boolean}\r\n     */\r\n    function isString(str) {\r\n        return (typeof str === 'string' || str instanceof String);\r\n    }\r\n\r\n    /**\r\n     * Return TRUE if the parameter is a boolean\r\n     *\r\n     * @static\r\n     * @param {*} value\r\n     * @returns {boolean}\r\n     */\r\n    function isBoolean(value) {\r\n        return typeof(value) === 'boolean';\r\n    }\r\n\r\n    /**\r\n     * Return TRUE if the parameter is a string 'true' or 'false'\r\n     *\r\n     * This function accepts any cases for those strings.\r\n     * @param {string} value\r\n     * @returns {boolean}\r\n     */\r\n    function isTrueOrFalseString(value) {\r\n        const lowercaseValue = String(value).toLowerCase();\r\n        return lowercaseValue === 'true' || lowercaseValue === 'false';\r\n    }\r\n\r\n    /**\r\n     * Return TRUE if the parameter is an object\r\n     *\r\n     * @param {*} reference\r\n     * @returns {boolean}\r\n     */\r\n    function isObject(reference) {\r\n        return typeof reference === 'object' && reference !== null && !Array.isArray(reference);\r\n    }\r\n\r\n    /**\r\n     * Return TRUE if the given object is empty\r\n     * cf. http://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object and http://jsperf.com/empty-object-test\r\n     *\r\n     * @param {object} obj\r\n     * @returns {boolean}\r\n     */\r\n    function isEmptyObj(obj) {\r\n        for (const prop in obj) {\r\n            if (obj.hasOwnProperty(prop)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Return TRUE if the parameter is a number (or a number written as a string).\r\n     *\r\n     * @param {*} n\r\n     * @returns {boolean}\r\n     */\r\n    function isNumber(n) {\r\n        return !isArray(n) && !isNaN(parseFloat(n)) && isFinite(n);\r\n    }\r\n\r\n    /**\r\n     * Return TRUE if the parameter is an integer (and not a float).\r\n     *\r\n     * @param {*} n\r\n     * @returns {boolean}\r\n     */\r\n    function isInt(n) {\r\n        return typeof n === 'number' && parseFloat(n) === parseInt(n, 10) && !isNaN(n);\r\n    }\r\n\r\n    /**\r\n     * Return the pasted text that will be used.\r\n     *\r\n     * @param {string} text\r\n     * @param {AutoNumericHolder} holder\r\n     * @returns {string|void|XML|*}\r\n     */\r\n    function preparePastedText(text, holder) {\r\n        return stripAllNonNumberCharacters(text, holder.settingsClone, true).replace(holder.settingsClone.decimalCharacter, '.');\r\n    }\r\n\r\n    /**\r\n     * Return TRUE is the string `str` contains the string `needle`\r\n     * Note: this function does not coerce the parameters types\r\n     *\r\n     * @param {string} str\r\n     * @param {string} needle\r\n     * @returns {boolean}\r\n     */\r\n    function contains(str, needle) {\r\n        if (!isString(str) || !isString(needle) || str === '' || needle === '') {\r\n            return false;\r\n        }\r\n\r\n        return str.indexOf(needle) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Return TRUE if the `needle` is in the array\r\n     *\r\n     * @param {*} needle\r\n     * @param {Array} array\r\n     * @returns {boolean}\r\n     */\r\n    function isInArray(needle, array) {\r\n        if (!isArray(array) || array === [] || isUndefined(needle)) {\r\n            return false;\r\n        }\r\n\r\n        return array.indexOf(needle) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Return TRUE if the parameter is an Array\r\n     *\r\n     * @param {*} arr\r\n     * @throws Error\r\n     * @returns {*|boolean}\r\n     */\r\n    function isArray(arr) {\r\n        if (Object.prototype.toString.call([]) === '[object Array]') { // Make sure an array has a class attribute of [object Array]\r\n            // Test passed, now check if is an Array\r\n            return Array.isArray(arr) || (typeof arr === 'object' && Object.prototype.toString.call(arr) === '[object Array]');\r\n        }\r\n        else {\r\n            throw new Error('toString message changed for Object Array'); // Verify that the string returned by `toString` does not change in the future (cf. http://stackoverflow.com/a/8365215)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return TRUE if the parameter is a string that represents a float number, and that number has a decimal part\r\n     *\r\n     * @param {string} str\r\n     * @returns {boolean}\r\n     */\r\n    // function hasDecimals(str) {\r\n    //     const [, decimalPart] = str.split('.');\r\n    //     return !isUndefined(decimalPart);\r\n    // }\r\n\r\n    /**\r\n     * Return the number of decimal places if the parameter is a string that represents a float number, and that number has a decimal part.\r\n     *\r\n     * @param {string} str\r\n     * @returns {int}\r\n     */\r\n    function decimalPlaces(str) {\r\n        const [, decimalPart] = str.split('.');\r\n        if (!isUndefined(decimalPart)) {\r\n            return decimalPart.length;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Return the code for the key used to generate the given event.\r\n     *\r\n     * @param {Event} event\r\n     * @returns {string|Number}\r\n     */\r\n    function keyCodeNumber(event) {\r\n        // `event.keyCode` and `event.which` are deprecated, `KeyboardEvent.key` (https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) must be used now\r\n        return (typeof event.which === 'undefined')?event.keyCode:event.which;\r\n    }\r\n\r\n    /**\r\n     * Return the character from the event key code.\r\n     * @example character(50) => '2'\r\n     *\r\n     * @param {Event} event\r\n     * @returns {string}\r\n     */\r\n    function character(event) {\r\n        if (typeof event.key === 'undefined' || event.key === 'Unidentified') {\r\n            return String.fromCharCode(keyCodeNumber(event));\r\n        } else {\r\n            // Special case for obsolete browsers like IE that return the old names\r\n            let result;\r\n            switch (event.key) {\r\n                case 'Decimal':\r\n                    result = keyName.NumpadDot;\r\n                    break;\r\n                case 'Multiply':\r\n                    result = keyName.NumpadMultiply;\r\n                    break;\r\n                case 'Add':\r\n                    result = keyName.NumpadPlus;\r\n                    break;\r\n                case 'Subtract':\r\n                    result = keyName.NumpadMinus;\r\n                    break;\r\n                case 'Divide':\r\n                    result = keyName.NumpadSlash;\r\n                    break;\r\n                case 'Del':\r\n                    // Special workaround for the obsolete browser IE11 which output a 'Delete' key when using the numpad 'dot' one! This fixes issue #401 //FIXME à terminer\r\n                    result = keyName.Dot; // as of version 2.0.8 the character() function is only called on keypress event. The 'Del' does not throw the keypress event.\r\n                    break;\r\n                default:\r\n                    result = event.key;\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return TRUE if the given value (a number as a string) is within the range set in the settings `minimumValue` and `maximumValue`, FALSE otherwise.\r\n     *\r\n     * @param {string} value\r\n     * @param {object} parsedMinValue Parsed via the `parseStr()` function\r\n     * @param {object} parsedMaxValue Parsed via the `parseStr()` function\r\n     * @returns {boolean}\r\n     */\r\n    function checkIfInRange(value, parsedMinValue, parsedMaxValue) {\r\n        const parsedValue = parseStr(value);\r\n        return testMinMax(parsedMinValue, parsedValue) > -1 && testMinMax(parsedMaxValue, parsedValue) < 1;\r\n    }\r\n\r\n    /**\r\n     * Return TRUE if the given string contains a negative sign :\r\n     * - everywhere in the string (by default), or\r\n     * - on the first character only if the `checkEverywhere` parameter is set to `false`.\r\n     *\r\n     * @param {string} numericString A number represented by a string\r\n     * @param {boolean} checkEverywhere If TRUE, then the negative sign is search everywhere in the numeric string (this is needed for instance if the string is '1234.56-')\r\n     * @returns {boolean}\r\n     */\r\n    function isNegative(numericString, checkEverywhere = true) {\r\n        //TODO Use the `negativeSignCharacter` from the settings here\r\n        if (checkEverywhere) {\r\n            return contains(numericString, '-');\r\n        }\r\n\r\n        return isNegativeStrict(numericString);\r\n    }\r\n\r\n    /**\r\n     * Return TRUE if the given string contains a negative sign on the first character (on the far left).\r\n     *\r\n     * @example isNegativeStrict('1234.56')     => false\r\n     * @example isNegativeStrict('1234.56-')    => false\r\n     * @example isNegativeStrict('-1234.56')    => true\r\n     * @example isNegativeStrict('-1,234.56 €') => true\r\n     *\r\n     * @param {string} numericString\r\n     * @returns {boolean}\r\n     */\r\n    function isNegativeStrict(numericString) {\r\n        //TODO Using the `negativeSignCharacter` from the settings here\r\n        return numericString.charAt(0) === '-';\r\n    }\r\n\r\n    /**\r\n     * Return TRUE if the formatted or unformatted numeric string represent the value 0 (ie. '0,00 €'), or is empty (' €').\r\n     * This works since we test if there are any numbers from 1 to 9 in the string. If there is none, then the number is zero (or the string is empty).\r\n     *\r\n     * @param {string} numericString\r\n     * @returns {boolean}\r\n     */\r\n    function isZeroOrHasNoValue(numericString) {\r\n        return !(/[1-9]/g).test(numericString);\r\n    }\r\n\r\n    /**\r\n     * Return the negative version of the value (represented as a string) given as a parameter.\r\n     *\r\n     * @param {string} value\r\n     * @returns {*}\r\n     */\r\n    function setRawNegativeSign(value) {\r\n        if (!isNegativeStrict(value)) {\r\n            return `-${value}`;\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Replace the character at the position `index` in the string `string` by the character(s) `newCharacter`.\r\n     *\r\n     * @param {string} string\r\n     * @param {int} index\r\n     * @param {string} newCharacter\r\n     * @returns {string}\r\n     */\r\n    function replaceCharAt(string, index, newCharacter) {\r\n        return `${string.substr(0, index)}${newCharacter}${string.substr(index + newCharacter.length)}`;\r\n    }\r\n\r\n    /**\r\n     * Return the value clamped to the nearest minimum/maximum value, as defined in the settings.\r\n     *\r\n     * @param {string|number} value\r\n     * @param {object} settings\r\n     * @returns {number}\r\n     */\r\n    function clampToRangeLimits(value, settings) {\r\n        //XXX This function always assume `settings.minimumValue` is lower than `settings.maximumValue`\r\n        return Math.max(settings.minimumValue, Math.min(settings.maximumValue, value));\r\n    }\r\n\r\n    /**\r\n     * Return the number of number or dot characters on the left side of the caret, in a formatted number.\r\n     *\r\n     * @param {string} formattedNumberString\r\n     * @param {int} caretPosition This must be a positive integer\r\n     * @param {string} decimalCharacter\r\n     * @returns {number}\r\n     */\r\n    function countNumberCharactersOnTheCaretLeftSide(formattedNumberString, caretPosition, decimalCharacter) {\r\n        // Here we count the dot and report it as a number character too, since it will 'stay' in the Javascript number when unformatted\r\n        const numberDotOrNegativeSign = new RegExp(`[0-9${decimalCharacter}-]`); // No need to escape the decimal character here, since it's in `[]`\r\n\r\n        let numberDotAndNegativeSignCount = 0;\r\n        for (let i = 0; i < caretPosition; i++) {\r\n            // Test if the character is a number, a dot or an hyphen. If it is, count it, otherwise ignore it\r\n            if (numberDotOrNegativeSign.test(formattedNumberString[i])) {\r\n                numberDotAndNegativeSignCount++;\r\n            }\r\n        }\r\n\r\n        return numberDotAndNegativeSignCount;\r\n    }\r\n\r\n    /**\r\n     * Walk the `formattedNumberString` from left to right, one char by one, counting the `formattedNumberStringIndex`.\r\n     * If the char is in the `rawNumberString` (starting at index 0), then `rawNumberStringIndex++`, and continue until\r\n     * there is no more characters in `rawNumberString`) or that `rawNumberStringIndex === caretPositionInRawValue`.\r\n     * When you stop, the `formattedNumberStringIndex` is the position where the caret should be set.\r\n     *\r\n     * @example\r\n     * 1234567|89.01   : position 7 (rawNumberString)\r\n     * 123.456.7|89,01 : position 9 (formattedNumberString)\r\n     *\r\n     * @param {string} rawNumberString\r\n     * @param {int} caretPositionInRawValue\r\n     * @param {string} formattedNumberString\r\n     * @param {string} decimalCharacter\r\n     * @returns {*}\r\n     */\r\n    function findCaretPositionInFormattedNumber(rawNumberString, caretPositionInRawValue, formattedNumberString, decimalCharacter) {\r\n        const formattedNumberStringSize = formattedNumberString.length;\r\n        const rawNumberStringSize = rawNumberString.length;\r\n\r\n        let formattedNumberStringIndex;\r\n        let rawNumberStringIndex = 0;\r\n        for (formattedNumberStringIndex = 0;\r\n             formattedNumberStringIndex < formattedNumberStringSize &&\r\n             rawNumberStringIndex < rawNumberStringSize &&\r\n             rawNumberStringIndex < caretPositionInRawValue;\r\n             formattedNumberStringIndex++) {\r\n            if (rawNumberString[rawNumberStringIndex] === formattedNumberString[formattedNumberStringIndex] ||\r\n                (rawNumberString[rawNumberStringIndex] === '.' && formattedNumberString[formattedNumberStringIndex] === decimalCharacter)) {\r\n                rawNumberStringIndex++;\r\n            }\r\n        }\r\n\r\n        return formattedNumberStringIndex;\r\n    }\r\n\r\n    /**\r\n     * Count the number of occurrence of the given character, in the given text.\r\n     *\r\n     * @param {string} character\r\n     * @param {string} text\r\n     * @returns {number}\r\n     */\r\n    function countCharInText(character, text) {\r\n        let charCounter = 0;\r\n        for (let i = 0; i < text.length; i++) {\r\n            if (text[i] === character) {\r\n                charCounter++;\r\n            }\r\n        }\r\n\r\n        return charCounter;\r\n    }\r\n\r\n    /**\r\n     * Return the index that can be used to set the caret position.\r\n     * This takes into account that the position is starting at '0', not 1.\r\n     *\r\n     * @param {int} characterCount\r\n     * @returns {number}\r\n     */\r\n    function convertCharacterCountToIndexPosition(characterCount) {\r\n        return Math.max(characterCount, characterCount - 1);\r\n    }\r\n\r\n    /**\r\n     * Cross browser routine for getting selected range/cursor position\r\n     *\r\n     * @param {HTMLElement|EventTarget} that\r\n     * @returns {{}}\r\n     */\r\n    function getElementSelection(that) {\r\n        const position = {};\r\n        if (isUndefined(that.selectionStart)) {\r\n            that.focus();\r\n            const select = document.selection.createRange();\r\n            position.length = select.text.length;\r\n            select.moveStart('character', -that.value.length);\r\n            position.end = select.text.length;\r\n            position.start = position.end - position.length;\r\n        } else {\r\n            position.start = that.selectionStart;\r\n            position.end = that.selectionEnd;\r\n            position.length = position.end - position.start;\r\n        }\r\n\r\n        return position;\r\n    }\r\n\r\n    /**\r\n     * Cross browser routine for setting selected range/cursor position\r\n     *\r\n     * @param {HTMLElement|EventTarget} that\r\n     * @param {int} start\r\n     * @param {int|null} end\r\n     */\r\n    function setElementSelection(that, start, end = null) {\r\n        if (isUndefinedOrNullOrEmpty(end)) {\r\n            end = start;\r\n        }\r\n\r\n        if (isUndefined(that.selectionStart)) {\r\n            that.focus();\r\n            const range = that.createTextRange();\r\n            range.collapse(true);\r\n            range.moveEnd('character', end);\r\n            range.moveStart('character', start);\r\n            range.select();\r\n        } else {\r\n            that.selectionStart = start;\r\n            that.selectionEnd = end;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function that throw error messages\r\n     *\r\n     * @param {string} message\r\n     */\r\n    function throwError(message) {\r\n        throw new Error(message);\r\n    }\r\n\r\n    /**\r\n     * Function that display a warning messages, according to the debug level.\r\n     *\r\n     * @param {string} message\r\n     * @param {boolean} showWarning If FALSE, then the warning message is not displayed\r\n     */\r\n    function warning(message, showWarning = true) {\r\n        if (showWarning) {\r\n            /* eslint no-console: 0 */\r\n            console.warn(`Warning: ${message}`);\r\n        }\r\n    }\r\n\r\n    // autoNumeric-specific functions\r\n\r\n    /**\r\n     * Run any callbacks found in the settings object.\r\n     * Any parameter could be a callback:\r\n     * - a function, which invoked with jQuery element, parameters and this parameter name and returns parameter value\r\n     * - a name of function, attached to $(selector).autoNumeric.functionName(){} - which was called previously\r\n     * @param {object} $this jQuery-selected DOM element\r\n     * @param {object} settings\r\n     */\r\n    function runCallbacksFoundInTheSettingsObject($this, settings) {\r\n        // Loops through the settings object (option array) to find the following\r\n        $.each(settings, (k, val) => {\r\n            if (typeof val === 'function') {\r\n                settings[k] = val($this, settings, k);\r\n            } else if (typeof $this.autoNumeric[val] === 'function') {\r\n                // Calls the attached function from the html5 data example: data-a-sign=\"functionName\"\r\n                settings[k] = $this.autoNumeric[val]($this, settings, k);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Determine the maximum decimal length from the minimumValue and maximumValue settings\r\n     *\r\n     * @param {string} minimumValue\r\n     * @param {string} maximumValue\r\n     * @returns {number}\r\n     */\r\n    function maximumVMinAndVMaxDecimalLength(minimumValue, maximumValue) {\r\n        return Math.max(decimalPlaces(minimumValue), decimalPlaces(maximumValue));\r\n    }\r\n\r\n    /**\r\n     * Strip all unwanted non-number characters.\r\n     * This keeps the numbers, the negative sign as well as the custom decimal character.\r\n     *\r\n     * @param {string} s\r\n     * @param {object} settings\r\n     * @param {boolean} leftOrAll\r\n     * @returns {string|*}\r\n     */\r\n    function stripAllNonNumberCharacters(s, settings, leftOrAll) {\r\n        //TODO This function is called 10 times (sic!) on each key input, couldn't we lower that number? cf. issue #325\r\n        //TODO Refactor this with `convertToNumericString()` if possible?\r\n        if (settings.currencySymbol !== '') {\r\n            // Remove currency sign\r\n            s = s.replace(settings.currencySymbol, '');\r\n        }\r\n        if (settings.suffixText) {\r\n            // Remove suffix\r\n            while (contains(s, settings.suffixText)) {\r\n                s = s.replace(settings.suffixText, '');\r\n            }\r\n        }\r\n\r\n        // First replace anything before digits\r\n        s = s.replace(settings.skipFirstAutoStrip, '$1$2');\r\n\r\n        if ((settings.negativePositiveSignPlacement === 's' ||\r\n            (settings.currencySymbolPlacement === 's' && settings.negativePositiveSignPlacement !== 'p')) &&\r\n            isNegative(s) &&\r\n            s !== '') {\r\n            settings.trailingNegative = true;\r\n        }\r\n\r\n        // Then replace anything after digits\r\n        s = s.replace(settings.skipLastAutoStrip, '$1');\r\n\r\n        // Then remove any uninteresting characters\r\n        s = s.replace(settings.allowedAutoStrip, '');\r\n        if (settings.decimalCharacterAlternative) {\r\n            s = s.replace(settings.decimalCharacterAlternative, settings.decimalCharacter);\r\n        }\r\n\r\n        // Get only number string\r\n        const m = s.match(settings.numRegAutoStrip);\r\n        s = m ? [m[1], m[2], m[3]].join('') : '';\r\n\r\n        if (settings.leadingZero === 'allow' || settings.leadingZero === 'keep') {\r\n            let nSign = '';\r\n            const [integerPart, decimalPart] = s.split(settings.decimalCharacter);\r\n            let modifiedIntegerPart = integerPart;\r\n            if (contains(modifiedIntegerPart, settings.negativeSignCharacter)) {\r\n                nSign = settings.negativeSignCharacter;\r\n                modifiedIntegerPart = modifiedIntegerPart.replace(settings.negativeSignCharacter, '');\r\n            }\r\n\r\n            // Strip leading zero on positive value if need\r\n            if (nSign === '' && modifiedIntegerPart.length > settings.mIntPos && modifiedIntegerPart.charAt(0) === '0') {\r\n                modifiedIntegerPart = modifiedIntegerPart.slice(1);\r\n            }\r\n\r\n            // Strip leading zero on negative value if need\r\n            if (nSign !== '' && modifiedIntegerPart.length > settings.mIntNeg && modifiedIntegerPart.charAt(0) === '0') {\r\n                modifiedIntegerPart = modifiedIntegerPart.slice(1);\r\n            }\r\n\r\n            s = `${nSign}${modifiedIntegerPart}${isUndefined(decimalPart)?'':settings.decimalCharacter + decimalPart}`;\r\n        }\r\n\r\n        if ((leftOrAll && settings.leadingZero === 'deny') ||\r\n            (!settings.hasFocus && settings.leadingZero === 'allow')) {\r\n            s = s.replace(settings.stripReg, '$1$2');\r\n        }\r\n\r\n        return s;\r\n    }\r\n\r\n    /**\r\n     * Sets or removes brackets on negative values, depending on the focus state.\r\n     * The focus state is 'stored' in the settings object under the `settings.hasFocus` attribute.\r\n     * //TODO Use another object to keep track of internal data that are not settings\r\n     *\r\n     * @param {string} s\r\n     * @param {object} settings\r\n     * @returns {*}\r\n     */\r\n    function toggleNegativeBracket(s, settings) {\r\n        if ((settings.currencySymbolPlacement === 'p' && settings.negativePositiveSignPlacement === 'l') ||\r\n            (settings.currencySymbolPlacement === 's' && settings.negativePositiveSignPlacement === 'p')) {\r\n            //TODO Split the first and last bracket only once during the settings initialization\r\n            const [firstBracket, lastBracket] = settings.negativeBracketsTypeOnBlur.split(',');\r\n            if (!settings.hasFocus) {\r\n                // Add brackets\r\n                s = s.replace(settings.negativeSignCharacter, '');\r\n                s = firstBracket + s + lastBracket;\r\n            } else if (settings.hasFocus && s.charAt(0) === firstBracket) {\r\n                // Remove brackets\r\n                //TODO Quid if the negative sign is not on the left, shouldn't we replace the '-' sign at the right place?\r\n                s = s.replace(firstBracket, settings.negativeSignCharacter);\r\n                s = s.replace(lastBracket, '');\r\n            }\r\n        }\r\n\r\n        return s;\r\n    }\r\n\r\n    /**\r\n     * Return a number as a numeric string that can be typecast to a Number that Javascript will understand.\r\n     *\r\n     * This function return the given string by stripping the currency sign (currencySymbol), the grouping separators (digitalGroupSpacing) and by replacing the decimal character (decimalCharacter) by a dot.\r\n     * Lastly, it also put the negative sign back to its normal position if needed.\r\n     *\r\n     * @param {string} s\r\n     * @param {object} settings\r\n     * @returns {string|void|XML|*}\r\n     */\r\n    function convertToNumericString(s, settings) {\r\n        // Remove the currency symbol\r\n        s = s.replace(settings.currencySymbol, '');\r\n\r\n        // Remove the grouping separators (thousands separators usually)\r\n        s = s.replace(settings.digitGroupSeparator, '');\r\n\r\n        // Replace the decimal character by a dot\r\n        if (settings.decimalCharacter !== '.') {\r\n            s = s.replace(settings.decimalCharacter, '.');\r\n        }\r\n\r\n        // Move the trailing negative sign to the right position, if any\r\n        if (isNegative(s) && s.lastIndexOf('-') === s.length - 1) {\r\n            s = s.replace('-', '');\r\n            s = '-' + s;\r\n        }\r\n\r\n        // Convert any arabic numbers to latin ones\r\n        const temp = arabicToLatinNumbers(s, true, false, false);\r\n        if (!isNaN(temp)) {\r\n            s = temp.toString();\r\n        }\r\n\r\n        return s;\r\n    }\r\n\r\n    /**\r\n     * Converts the ISO numeric string to the locale decimal and minus sign placement.\r\n     * See the \"outputFormat\" option definition for more details.\r\n     *\r\n     * @param {string|null} value\r\n     * @param {string} locale\r\n     * @returns {*}\r\n     */\r\n    function toLocale(value, locale) {\r\n        if (isNull(locale) || locale === 'string') {\r\n            return value;\r\n        }\r\n\r\n        let result;\r\n        switch (locale) {\r\n            case 'number':\r\n                result = Number(value);\r\n                break;\r\n            case '.-':\r\n                result = isNegative(value) ? value.replace('-', '') + '-' : value;\r\n                break;\r\n            case ',':\r\n            case '-,':\r\n                result = value.replace('.', ',');\r\n                break;\r\n            case ',-':\r\n                result = value.replace('.', ',');\r\n                result = isNegative(result) ? result.replace('-', '') + '-' : result;\r\n                break;\r\n            // The default case\r\n            case '.':\r\n            case '-.':\r\n                result = value;\r\n                break;\r\n            default :\r\n                throwError(`The given outputFormat [${locale}] option is not recognized.`);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Modify the negative sign and the decimal character of the given string value to an hyphen (-) and a dot (.) in order to make that value 'typecastable' to a real number.\r\n     *\r\n     * @param {string} s\r\n     * @param {object} settings\r\n     * @returns {string}\r\n     */\r\n    function modifyNegativeSignAndDecimalCharacterForRawValue(s, settings) {\r\n        if (settings.decimalCharacter !== '.') {\r\n            s = s.replace(settings.decimalCharacter, '.');\r\n        }\r\n        if (settings.negativeSignCharacter !== '-' && settings.negativeSignCharacter !== '') {\r\n            s = s.replace(settings.negativeSignCharacter, '-');\r\n        }\r\n        if (!s.match(/\\d/)) {\r\n            // The default value returned by `get` is not formatted with decimals\r\n            s += '0';\r\n        }\r\n\r\n        return s;\r\n    }\r\n\r\n    /**\r\n     * Modify the negative sign and the decimal character to use those defined in the settings.\r\n     *\r\n     * @param {string} s\r\n     * @param {object} settings\r\n     * @returns {string}\r\n     */\r\n    function modifyNegativeSignAndDecimalCharacterForFormattedValue(s, settings) {\r\n        if (settings.negativeSignCharacter !== '-' && settings.negativeSignCharacter !== '') {\r\n            s = s.replace('-', settings.negativeSignCharacter);\r\n        }\r\n        if (settings.decimalCharacter !== '.') {\r\n            s = s.replace('.', settings.decimalCharacter);\r\n        }\r\n\r\n        return s;\r\n    }\r\n\r\n    /**\r\n     * Private function to check for empty value\r\n     * //TODO Modify this function so that it return either TRUE or FALSE if the value is empty. Then create another function to return the input value if it's not empty.\r\n     *\r\n     * @param {string} inputValue\r\n     * @param {object} settings\r\n     * @param {boolean} signOnEmpty\r\n     * @returns {*}\r\n     */\r\n    function checkEmpty(inputValue, settings, signOnEmpty) {\r\n        if (inputValue === '' || inputValue === settings.negativeSignCharacter) {\r\n            if (settings.emptyInputBehavior === 'always' || signOnEmpty) {\r\n                return (settings.negativePositiveSignPlacement === 'l') ? inputValue + settings.currencySymbol + settings.suffixText : settings.currencySymbol + inputValue + settings.suffixText;\r\n            }\r\n\r\n            return inputValue;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Modify the input value by adding the group separators, as defined in the settings.\r\n     *\r\n     * @param {string} inputValue\r\n     * @param {object} settings\r\n     * @returns {*}\r\n     */\r\n    function addGroupSeparators(inputValue, settings) {\r\n        if (settings.strip) {\r\n            inputValue = stripAllNonNumberCharacters(inputValue, settings, false);\r\n        }\r\n\r\n        //TODO This function `addGroupSeparators()` add group separators. Adding the negative sign as well is out of its scope. Move that to another function.\r\n        if (settings.trailingNegative && !isNegative(inputValue)) {\r\n            inputValue = '-' + inputValue;\r\n        }\r\n\r\n        const empty = checkEmpty(inputValue, settings, true);\r\n        const isValueNegative = isNegative(inputValue);\r\n        const isZero = isZeroOrHasNoValue(inputValue);\r\n        if (isValueNegative) {\r\n            inputValue = inputValue.replace('-', '');\r\n        }\r\n\r\n        if (!isNull(empty)) {\r\n            return empty;\r\n        }\r\n\r\n        settings.digitalGroupSpacing = settings.digitalGroupSpacing.toString();\r\n        let digitalGroup;\r\n        switch (settings.digitalGroupSpacing) {\r\n            case '2':\r\n                digitalGroup = /(\\d)((\\d)(\\d{2}?)+)$/;\r\n                break;\r\n            case '2s':\r\n                digitalGroup = /(\\d)((?:\\d{2}){0,2}\\d{3}(?:(?:\\d{2}){2}\\d{3})*?)$/;\r\n                break;\r\n            case '4':\r\n                digitalGroup = /(\\d)((\\d{4}?)+)$/;\r\n                break;\r\n            default :\r\n                digitalGroup = /(\\d)((\\d{3}?)+)$/;\r\n        }\r\n\r\n        // Splits the string at the decimal string\r\n        let [integerPart, decimalPart] = inputValue.split(settings.decimalCharacter);\r\n        if (settings.decimalCharacterAlternative && isUndefined(decimalPart)) {\r\n            [integerPart, decimalPart] = inputValue.split(settings.decimalCharacterAlternative);\r\n        }\r\n\r\n        if (settings.digitGroupSeparator !== '') {\r\n            // Re-inserts the thousand separator via a regular expression\r\n            while (digitalGroup.test(integerPart)) {\r\n                integerPart = integerPart.replace(digitalGroup, `$1${settings.digitGroupSeparator}$2`);\r\n            }\r\n        }\r\n\r\n        if (settings.decimalPlacesOverride !== 0 && !isUndefined(decimalPart)) {\r\n            if (decimalPart.length > settings.decimalPlacesOverride) {\r\n                decimalPart = decimalPart.substring(0, settings.decimalPlacesOverride);\r\n            }\r\n\r\n            // Joins the whole number with the decimal value\r\n            inputValue = integerPart + settings.decimalCharacter + decimalPart;\r\n        } else {\r\n            // Otherwise if it's an integer\r\n            inputValue = integerPart;\r\n        }\r\n\r\n        settings.trailingNegative = false;\r\n\r\n        if (settings.currencySymbolPlacement === 'p') {\r\n            if (isValueNegative) {\r\n                switch (settings.negativePositiveSignPlacement) {\r\n                    case 'l':\r\n                        inputValue = `${settings.negativeSignCharacter}${settings.currencySymbol}${inputValue}`;\r\n                        break;\r\n                    case 'r':\r\n                        inputValue = `${settings.currencySymbol}${settings.negativeSignCharacter}${inputValue}`;\r\n                        break;\r\n                    case 's':\r\n                        inputValue = `${settings.currencySymbol}${inputValue}${settings.negativeSignCharacter}`;\r\n                        settings.trailingNegative = true;\r\n                        break;\r\n                    default :\r\n                    //\r\n                }\r\n            } else if (settings.showPositiveSign && !isZero) {\r\n                switch (settings.negativePositiveSignPlacement) {\r\n                    case 'l':\r\n                        inputValue = `${settings.positiveSignCharacter}${settings.currencySymbol}${inputValue}`;\r\n                        break;\r\n                    case 'r':\r\n                        inputValue = `${settings.currencySymbol}${settings.positiveSignCharacter}${inputValue}`;\r\n                        break;\r\n                    case 's':\r\n                        inputValue = `${settings.currencySymbol}${inputValue}${settings.positiveSignCharacter}`;\r\n                        break;\r\n                    default :\r\n                    //\r\n                }\r\n            } else {\r\n                inputValue = settings.currencySymbol + inputValue;\r\n            }\r\n        }\r\n\r\n        if (settings.currencySymbolPlacement === 's') {\r\n            if (isValueNegative) {\r\n                switch (settings.negativePositiveSignPlacement) {\r\n                    case 'r':\r\n                        inputValue = `${inputValue}${settings.currencySymbol}${settings.negativeSignCharacter}`;\r\n                        settings.trailingNegative = true;\r\n                        break;\r\n                    case 'l':\r\n                        inputValue = `${inputValue}${settings.negativeSignCharacter}${settings.currencySymbol}`;\r\n                        settings.trailingNegative = true;\r\n                        break;\r\n                    case 'p':\r\n                        inputValue = `${settings.negativeSignCharacter}${inputValue}${settings.currencySymbol}`;\r\n                        break;\r\n                    default :\r\n                    //\r\n                }\r\n            } else if (settings.showPositiveSign && !isZero) {\r\n                switch (settings.negativePositiveSignPlacement) {\r\n                    case 'r':\r\n                        inputValue = `${inputValue}${settings.currencySymbol}${settings.positiveSignCharacter}`;\r\n                        break;\r\n                    case 'l':\r\n                        inputValue = `${inputValue}${settings.positiveSignCharacter}${settings.currencySymbol}`;\r\n                        break;\r\n                    case 'p':\r\n                        inputValue = `${settings.positiveSignCharacter}${inputValue}${settings.currencySymbol}`;\r\n                        break;\r\n                    default :\r\n                    //\r\n                }\r\n            } else {\r\n                inputValue = inputValue + settings.currencySymbol;\r\n            }\r\n        }\r\n\r\n        // Removes the negative sign and places brackets\r\n        if (settings.negativeBracketsTypeOnBlur !== null && (settings.rawValue < 0 || isNegativeStrict(inputValue))) {\r\n            inputValue = toggleNegativeBracket(inputValue, settings);\r\n        }\r\n\r\n        return inputValue + settings.suffixText;\r\n    }\r\n\r\n    /**\r\n     * Truncate not needed zeros\r\n     *\r\n     * @param {string} roundedInputValue\r\n     * @param {int} temporaryDecimalPlacesOverride\r\n     * @returns {void|XML|string|*}\r\n     */\r\n    function truncateZeros(roundedInputValue, temporaryDecimalPlacesOverride) {\r\n        let regex;\r\n        switch (temporaryDecimalPlacesOverride) {\r\n            case 0:\r\n                // Prevents padding - removes trailing zeros until the first significant digit is encountered\r\n                regex = /(\\.(?:\\d*[1-9])?)0*$/;\r\n                break;\r\n            case 1:\r\n                // Allows padding when decimalPlacesOverride equals one - leaves one zero trailing the decimal character\r\n                regex = /(\\.\\d(?:\\d*[1-9])?)0*$/;\r\n                break;\r\n            default :\r\n                // Removes access zeros to the decimalPlacesOverride length when allowDecimalPadding is set to true\r\n                regex = new RegExp(`(\\\\.\\\\d{${temporaryDecimalPlacesOverride}}(?:\\\\d*[1-9])?)0*`);\r\n        }\r\n\r\n        // If there are no decimal places, we don't need a decimal point at the end\r\n        roundedInputValue = roundedInputValue.replace(regex, '$1');\r\n        if (temporaryDecimalPlacesOverride === 0) {\r\n            roundedInputValue = roundedInputValue.replace(/\\.$/, '');\r\n        }\r\n\r\n        return roundedInputValue;\r\n    }\r\n\r\n    /**\r\n     * Round the input value using the rounding method defined in the settings.\r\n     * This function accepts multiple rounding methods. See the documentation for more details about those.\r\n     *\r\n     * Note : This is handled as text since JavaScript math function can return inaccurate values.\r\n     *\r\n     * @param {string} inputValue\r\n     * @param {object} settings\r\n     * @returns {*}\r\n     */\r\n    function roundValue(inputValue, settings) {\r\n        inputValue = (inputValue === '') ? '0' : inputValue.toString();\r\n        if (settings.roundingMethod === 'N05' || settings.roundingMethod === 'CHF' || settings.roundingMethod === 'U05' || settings.roundingMethod === 'D05') {\r\n            switch (settings.roundingMethod) {\r\n                case 'N05':\r\n                    inputValue = (Math.round(inputValue * 20) / 20).toString();\r\n                    break;\r\n                case 'U05':\r\n                    inputValue = (Math.ceil(inputValue * 20) / 20).toString();\r\n                    break;\r\n                default :\r\n                    inputValue = (Math.floor(inputValue * 20) / 20).toString();\r\n            }\r\n\r\n            let result;\r\n            if (!contains(inputValue, '.')) {\r\n                result = inputValue + '.00';\r\n            } else if (inputValue.length - inputValue.indexOf('.') < 3) {\r\n                result = inputValue + '0';\r\n            } else {\r\n                result = inputValue;\r\n            }\r\n            return result;\r\n        }\r\n\r\n        let ivRounded = '';\r\n        let i = 0;\r\n        let nSign = '';\r\n        let temporaryDecimalPlacesOverride;\r\n\r\n        // sets the truncate zero method\r\n        if (settings.allowDecimalPadding) {\r\n            temporaryDecimalPlacesOverride = settings.decimalPlacesOverride;\r\n        } else {\r\n            temporaryDecimalPlacesOverride = 0;\r\n        }\r\n\r\n        // Checks if the inputValue (input Value) is a negative value\r\n        if (isNegativeStrict(inputValue)) {\r\n            nSign = '-';\r\n\r\n            // Removes the negative sign that will be added back later if required\r\n            inputValue = inputValue.replace('-', '');\r\n        }\r\n\r\n        // Append a zero if the first character is not a digit (then it is likely to be a dot)\r\n        if (!inputValue.match(/^\\d/)) {\r\n            inputValue = '0' + inputValue;\r\n        }\r\n\r\n        // Determines if the value is equal to zero. If it is, remove the negative sign\r\n        if (Number(inputValue) === 0) {\r\n            nSign = '';\r\n        }\r\n\r\n        // Trims leading zero's as needed\r\n        if ((Number(inputValue) > 0 && settings.leadingZero !== 'keep') || (inputValue.length > 0 && settings.leadingZero === 'allow')) {\r\n            inputValue = inputValue.replace(/^0*(\\d)/, '$1');\r\n        }\r\n\r\n        const dPos = inputValue.lastIndexOf('.');\r\n        const inputValueHasADot = dPos === -1;\r\n\r\n        // Virtual decimal position\r\n        const vdPos = inputValueHasADot ? inputValue.length - 1 : dPos;\r\n\r\n        // Checks decimal places to determine if rounding is required :\r\n        // Check if no rounding is required\r\n        let cDec = (inputValue.length - 1) - vdPos;\r\n\r\n        if (cDec <= settings.decimalPlacesOverride) {\r\n            // Check if we need to pad with zeros\r\n            ivRounded = inputValue;\r\n            if (cDec < temporaryDecimalPlacesOverride) {\r\n                if (inputValueHasADot) {\r\n                    ivRounded += settings.decimalCharacter;\r\n                }\r\n\r\n                let zeros = '000000';\r\n                while (cDec < temporaryDecimalPlacesOverride) {\r\n                    zeros = zeros.substring(0, temporaryDecimalPlacesOverride - cDec);\r\n                    ivRounded += zeros;\r\n                    cDec += zeros.length;\r\n                }\r\n            } else if (cDec > temporaryDecimalPlacesOverride) {\r\n                ivRounded = truncateZeros(ivRounded, temporaryDecimalPlacesOverride);\r\n            } else if (cDec === 0 && temporaryDecimalPlacesOverride === 0) {\r\n                ivRounded = ivRounded.replace(/\\.$/, '');\r\n            }\r\n\r\n            return (Number(ivRounded) === 0) ? ivRounded : nSign + ivRounded;\r\n        }\r\n\r\n        // Rounded length of the string after rounding\r\n        let rLength;\r\n        if (inputValueHasADot) {\r\n            rLength = settings.decimalPlacesOverride - 1;\r\n        } else {\r\n            rLength = settings.decimalPlacesOverride + dPos;\r\n        }\r\n\r\n        const tRound = Number(inputValue.charAt(rLength + 1));\r\n        const odd = (inputValue.charAt(rLength) === '.') ? (inputValue.charAt(rLength - 1) % 2) : (inputValue.charAt(rLength) % 2);\r\n        let ivArray = inputValue.substring(0, rLength + 1).split('');\r\n\r\n        if ((tRound > 4 && settings.roundingMethod === 'S')                  || // Round half up symmetric\r\n            (tRound > 4 && settings.roundingMethod === 'A' && nSign === '')  || // Round half up asymmetric positive values\r\n            (tRound > 5 && settings.roundingMethod === 'A' && nSign === '-') || // Round half up asymmetric negative values\r\n            (tRound > 5 && settings.roundingMethod === 's')                  || // Round half down symmetric\r\n            (tRound > 5 && settings.roundingMethod === 'a' && nSign === '')  || // Round half down asymmetric positive values\r\n            (tRound > 4 && settings.roundingMethod === 'a' && nSign === '-') || // Round half down asymmetric negative values\r\n            (tRound > 5 && settings.roundingMethod === 'B')                  || // Round half even \"Banker's Rounding\"\r\n            (tRound === 5 && settings.roundingMethod === 'B' && odd === 1)   || // Round half even \"Banker's Rounding\"\r\n            (tRound > 0 && settings.roundingMethod === 'C' && nSign === '')  || // Round to ceiling toward positive infinite\r\n            (tRound > 0 && settings.roundingMethod === 'F' && nSign === '-') || // Round to floor toward negative infinite\r\n            (tRound > 0 && settings.roundingMethod === 'U')) {                  // Round up away from zero\r\n            // Round up the last digit if required, and continue until no more 9's are found\r\n            for (i = (ivArray.length - 1); i >= 0; i -= 1) {\r\n                if (ivArray[i] !== '.') {\r\n                    ivArray[i] = +ivArray[i] + 1;\r\n                    if (ivArray[i] < 10) {\r\n                        break;\r\n                    }\r\n\r\n                    if (i > 0) {\r\n                        ivArray[i] = '0';\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Reconstruct the string, converting any 10's to 0's\r\n        ivArray = ivArray.slice(0, rLength + 1);\r\n\r\n        // Return the rounded value\r\n        ivRounded = truncateZeros(ivArray.join(''), temporaryDecimalPlacesOverride);\r\n\r\n        return (Number(ivRounded) === 0) ? ivRounded : nSign + ivRounded;\r\n    }\r\n\r\n    /**\r\n     * Truncates the decimal part of a number.\r\n     *\r\n     * @param {string} s\r\n     * @param {object} settings\r\n     * @param {boolean} isPaste\r\n     * @returns {*}\r\n     */\r\n    function truncateDecimal(s, settings, isPaste) {\r\n        s = (isPaste) ? roundValue(s, settings) : s;\r\n\r\n        if (settings.decimalCharacter && settings.decimalPlacesOverride) {\r\n            const [integerPart, decimalPart] = s.split(settings.decimalCharacter);\r\n\r\n            // truncate decimal part to satisfying length since we would round it anyway\r\n            if (decimalPart && decimalPart.length > settings.decimalPlacesOverride) {\r\n                if (settings.decimalPlacesOverride > 0) {\r\n                    const modifiedDecimalPart = decimalPart.substring(0, settings.decimalPlacesOverride);\r\n                    s = `${integerPart}${settings.decimalCharacter}${modifiedDecimalPart}`;\r\n                } else {\r\n                    s = integerPart;\r\n                }\r\n            }\r\n        }\r\n\r\n        return s;\r\n    }\r\n\r\n    /**\r\n     * Function to parse minimumValue, maximumValue & the input value to prepare for testing to determine if the value falls within the min / max range.\r\n     * Return an object example: minimumValue: \"999999999999999.99\" returns the following \"{s: -1, e: 12, c: Array[15]}\".\r\n     *\r\n     * This function is adapted from Big.js https://github.com/MikeMcl/big.js/. Many thanks to Mike.\r\n     *\r\n     * @param {number|string} n A numeric value.\r\n     * @returns {{}}\r\n     */\r\n    function parseStr(n) {\r\n        const x = {}; // A Big number instance.\r\n        let e;\r\n        let i;\r\n        let nL;\r\n        let j;\r\n\r\n        // Minus zero?\r\n        if (n === 0 && 1 / n < 0) {\r\n            n = '-0';\r\n        }\r\n\r\n        // Determine sign. 1 positive, -1 negative\r\n        n = n.toString();\r\n        if (isNegativeStrict(n)) {\r\n            n = n.slice(1);\r\n            x.s = -1;\r\n        } else {\r\n            x.s = 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        e = n.indexOf('.');\r\n        if (e > -1) {\r\n            n = n.replace('.', '');\r\n        }\r\n\r\n        // length of string if no decimal character\r\n        if (e < 0) {\r\n            // Integer\r\n            e = n.length;\r\n        }\r\n\r\n        // Determine leading zeros\r\n        i = (n.search(/[1-9]/i) === -1) ? n.length : n.search(/[1-9]/i);\r\n        nL = n.length;\r\n        if (i === nL) {\r\n            // Zero\r\n            x.e = 0;\r\n            x.c = [0];\r\n        } else {\r\n            // Determine trailing zeros\r\n            for (j = nL - 1; n.charAt(j) === '0'; j -= 1) {\r\n                nL -= 1;\r\n            }\r\n            nL -= 1;\r\n\r\n            // Decimal location\r\n            x.e = e - i - 1;\r\n            x.c = [];\r\n\r\n            // Convert string to array of digits without leading/trailing zeros\r\n            for (e = 0; i <= nL; i += 1) {\r\n                x.c[e] = +n.charAt(i);\r\n                e += 1;\r\n            }\r\n        }\r\n\r\n        return x;\r\n    }\r\n\r\n    /**\r\n     * Function to test if the input value falls with the Min / Max settings.\r\n     * This uses the parsed strings for the above parseStr function.\r\n     *\r\n     * This function is adapted from Big.js https://github.com/MikeMcl/big.js/. Many thanks to Mike.\r\n     *\r\n     * @param {object} y Big number instance\r\n     * @param {object} x Big number instance\r\n     * @returns {*}\r\n     */\r\n    function testMinMax(y, x) {\r\n        const xc = x.c;\r\n        const yc = y.c;\r\n        let i = x.s;\r\n        let j = y.s;\r\n        let k = x.e;\r\n        let l = y.e;\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n            let result;\r\n            if (!xc[0]) {\r\n                result = !yc[0]?0:-j;\r\n            } else {\r\n                result = i;\r\n            }\r\n            return result;\r\n        }\r\n\r\n        // Signs differ?\r\n        if (i !== j) {\r\n            return i;\r\n        }\r\n        const xNeg = i < 0;\r\n\r\n        // Compare exponents\r\n        if (k !== l) {\r\n            return (k > l ^ xNeg)?1:-1;\r\n        }\r\n        i = -1;\r\n        k = xc.length;\r\n        l = yc.length;\r\n        j = (k < l) ? k : l;\r\n\r\n        // Compare digit by digit\r\n        for (i += 1; i < j; i += 1) {\r\n            if (xc[i] !== yc[i]) {\r\n                return (xc[i] > yc[i] ^ xNeg)?1:-1;\r\n            }\r\n        }\r\n\r\n        // Compare lengths\r\n        let result;\r\n        if (k === l) {\r\n            result = 0;\r\n        } else {\r\n            result = (k > l ^ xNeg)?1:-1;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Check that the number satisfy the format conditions\r\n     * and lays between settings.minimumValue and settings.maximumValue\r\n     * and the string length does not exceed the digits in settings.minimumValue and settings.maximumValue\r\n     *\r\n     * @param {string} s\r\n     * @param {object} settings\r\n     * @returns {*}\r\n     */\r\n    function checkIfInRangeWithOverrideOption(s, settings) {\r\n        s = s.toString();\r\n        s = s.replace(',', '.');\r\n        const minParse = parseStr(settings.minimumValue);\r\n        const maxParse = parseStr(settings.maximumValue);\r\n        const valParse = parseStr(s);\r\n\r\n        let result;\r\n        switch (settings.overrideMinMaxLimits) {\r\n            case 'floor':\r\n                result = [testMinMax(minParse, valParse) > -1, true];\r\n                break;\r\n            case 'ceiling':\r\n                result = [true, testMinMax(maxParse, valParse) < 1];\r\n                break;\r\n            case 'ignore':\r\n                result = [true, true];\r\n                break;\r\n            default:\r\n                result = [testMinMax(minParse, valParse) > -1, testMinMax(maxParse, valParse) < 1];\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Thanks to Anthony & Evan C\r\n     *\r\n     * @param {Element|string} element\r\n     * @returns {*|jQuery|HTMLElement}\r\n     */\r\n    function getCurrentElement(element) {\r\n        /*\r\n         * If the parameter is a string (and therefore is a CSS selector), then we need to modify this string in order\r\n         * for jQuery to be able to parse the selector correctly.\r\n         * cf. http://learn.jquery.com/using-jquery-core/faq/how-do-i-select-an-element-by-an-id-that-has-characters-used-in-css-notation/\r\n         */\r\n        if (isString(element)) {\r\n            //TODO This block is apparently never entered. We should remove it after making sure that's 100% the case\r\n            element = `#${element.replace(/(:|\\.|\\[|]|,|=)/g, '\\\\$1')}`;\r\n        }\r\n\r\n        return $(element);\r\n    }\r\n\r\n    /**\r\n     * Function that attach the autoNumeric field properties to the DOM element via an AutoNumericHolder object.\r\n     *\r\n     * @param {object} $this jQuery-selected DOM element\r\n     * @param {object} settings\r\n     * @param {boolean} update\r\n     * @returns {*}\r\n     */\r\n    function getAutoNumericHolder($this, settings, update = false) {\r\n        let data = $this.data('autoNumeric');\r\n        if (!data) {\r\n            data = {};\r\n            $this.data('autoNumeric', data);\r\n        }\r\n\r\n        let holder = data.holder;\r\n        if (update || (isUndefined(holder) && settings)) {\r\n            holder = new AutoNumericHolder($this.get(0), settings);\r\n            data.holder = holder;\r\n        }\r\n\r\n        return holder;\r\n    }\r\n\r\n    /**\r\n     * Original settings saved for use when decimalPlacesShownOnFocus & noSeparatorOnFocus options are being used.\r\n     * Those original settings are used exclusively in the `focusin` and `focusout` event handlers.\r\n     *\r\n     * @param {object} settings\r\n     */\r\n    function keepAnOriginalSettingsCopy(settings) {\r\n        //TODO Rename the old option names to the new ones\r\n        settings.oDec     = settings.decimalPlacesOverride;\r\n        settings.oPad     = settings.allowDecimalPadding;\r\n        settings.oBracket = settings.negativeBracketsTypeOnBlur;\r\n        settings.oSep     = settings.digitGroupSeparator;\r\n        settings.oSign    = settings.currencySymbol;\r\n        settings.oSuffix  = settings.suffixText;\r\n    }\r\n\r\n    /**\r\n     * Original settings saved for use when `decimalPlacesShownOnFocus` & `noSeparatorOnFocus` options are being used.\r\n     * This is taken from Quirksmode.\r\n     *\r\n     * @param {string} name\r\n     * @returns {*}\r\n     */\r\n    function readCookie(name) {\r\n        const nameEQ = name + '=';\r\n        const ca = document.cookie.split(';');\r\n        let c = '';\r\n        for (let i = 0; i < ca.length; i += 1) {\r\n            c = ca[i];\r\n            while (c.charAt(0) === ' ') {\r\n                c = c.substring(1, c.length);\r\n            }\r\n            if (c.indexOf(nameEQ) === 0) {\r\n                return c.substring(nameEQ.length, c.length);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Test if sessionStorage is supported.\r\n     * This is taken from Modernizr.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    function storageTest() {\r\n        const mod = 'modernizr';\r\n        try {\r\n            sessionStorage.setItem(mod, mod);\r\n            sessionStorage.removeItem(mod);\r\n            return true;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * properly formats the string to a numeric when leadingZero does not 'keep'.\r\n     *\r\n     * @param {string} value\r\n     * @param {object} settings\r\n     * @returns {string}\r\n     */\r\n    function cleanLeadingTrailingZeros(value, settings) {\r\n        // Return the empty string is the value is already empty. This prevent converting that value to '0'.\r\n        if (value === '') {\r\n            return '';\r\n        }\r\n\r\n        // Return '0' if the value is zero\r\n        if (Number(value) === 0 && settings.leadingZero !== 'keep') {\r\n            return '0';\r\n        }\r\n\r\n        if (settings.leadingZero !== 'keep') {\r\n            // Trim leading zero's - leaves one zero to the left of the decimal point\r\n            value = value.replace(/^(-)?0+(?=\\d)/g,'$1');\r\n\r\n            //TODO remove this from that function and use `trimPaddedZerosFromDecimalPlaces()` instead. Also create a new `trailingZero` option.\r\n            if (contains(value, '.')) {\r\n                // Trims trailing zeros after the decimal point\r\n                value = value.replace(/(\\.[0-9]*?)0+$/, '$1');\r\n            }\r\n        }\r\n        // Strips trailing decimal point\r\n        value = value.replace(/\\.$/, '');\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Remove the trailing zeros in the decimal part of a number.\r\n     *\r\n     * @param {string} numericString\r\n     * @returns {*}\r\n     */\r\n    function trimPaddedZerosFromDecimalPlaces(numericString) {\r\n        const [integerPart, decimalPart] = numericString.split('.');\r\n        if (isUndefinedOrNullOrEmpty(decimalPart)) {\r\n            return integerPart;\r\n        }\r\n\r\n        const trimmedDecimalPart = decimalPart.replace(/0+$/g, '');\r\n\r\n        let result;\r\n        if (trimmedDecimalPart === '') {\r\n            result = integerPart;\r\n        } else {\r\n            result = `${integerPart}.${trimmedDecimalPart}`;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates or removes sessionStorage or cookie depending on what the browser is supporting.\r\n     *\r\n     * @param {Element|EventTarget} element\r\n     * @param {object} settings\r\n     * @param {string} action\r\n     * @returns {*}\r\n     */\r\n    function saveValueToPersistentStorage(element, settings, action) {\r\n        if (settings.saveValueToSessionStorage) {\r\n            const storedName = (element.name !== '' && !isUndefined(element.name)) ?`AUTO_${decodeURIComponent(element.name)}` :`AUTO_${element.id}`;\r\n            let date;\r\n            let expires;\r\n\r\n            // Sets cookie for browser that do not support sessionStorage IE 6 & IE 7\r\n            if (storageTest() === false) {\r\n                switch (action) {\r\n                    case 'set':\r\n                        document.cookie = `${storedName}=${settings.rawValue}; expires= ; path=/`;\r\n                        break;\r\n                    case 'wipe':\r\n                        date = new Date();\r\n                        date.setTime(date.getTime() + (-1 * 24 * 60 * 60 * 1000));\r\n                        expires = '; expires=' + date.toUTCString(); // Note : `toGMTString()` has been deprecated (cf. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toGMTString)\r\n                        document.cookie = `${storedName}='' ;${expires}; path=/`;\r\n                        break;\r\n                    case 'get':\r\n                        return readCookie(storedName);\r\n                }\r\n            } else {\r\n                switch (action) {\r\n                    case 'set':\r\n                        sessionStorage.setItem(storedName, settings.rawValue);\r\n                        break;\r\n                    case 'wipe':\r\n                        sessionStorage.removeItem(storedName);\r\n                        break;\r\n                    case 'get':\r\n                        return sessionStorage.getItem(storedName);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Holder object for field properties\r\n     */\r\n    class AutoNumericHolder {\r\n        /**\r\n         * Class constructor\r\n         *\r\n         * @param {HTMLElement} that - A reference to the current DOM element\r\n         * @param {object} settings\r\n         */\r\n        constructor(that, settings) {\r\n            this.settings = settings;\r\n            this.that = that;\r\n            this.$that = $(that);\r\n            this.formatted = false;\r\n            this.settingsClone = settings;\r\n            this.value = that.value;\r\n        }\r\n\r\n        /**\r\n         * Update the value and the selection values inside the AutoNumericHolder object.\r\n         * This keeps tracks of the input value, as well as the current selection.\r\n         * This also resets the 'processed' and 'formatted' state.\r\n         *\r\n         * Note : Those two can change between the keydown, keypress and keyup events, that's why\r\n         *        this function is called on each event handler.\r\n         *\r\n         * @private\r\n         */\r\n        _updateAutoNumericHolderProperties() {\r\n            this.value = this.that.value;\r\n            this.selection = getElementSelection(this.that);\r\n            this.processed = false;\r\n            this.formatted = false;\r\n        }\r\n\r\n        /**\r\n         * Update the keycode of the key that triggered the given event.\r\n         * Note : e.which is sometimes different than e.keyCode during the keypress event, when entering a printable character key (ie. 't'). `e.which` equals 0 for non-printable characters.\r\n         *\r\n         * //TODO Switch to the non-deprecated e.key attribute, instead of inconsistant e.which and e.keyCode.\r\n         * e.key describe the key name used to trigger the event.\r\n         * e.keyCode being deprecated : https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode\r\n         * How e.key works : https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key\r\n         * The key list is described here\r\n         * @link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\r\n         *\r\n         * @param {Event} e\r\n         * @private\r\n         */\r\n        _updateAutoNumericHolderEventKeycode(e) {\r\n            // Note: the keypress event overwrites meaningful value of e.keyCode, hence we do not update that value on 'keypress'\r\n            this.eventKeyCode = keyCodeNumber(e);\r\n        }\r\n\r\n        /**\r\n         * Set the text selection inside the input with the given start and end position.\r\n         *\r\n         * @param {int} start\r\n         * @param {int} end\r\n         * @param {undefined|boolean} setReal\r\n         * @private\r\n         */\r\n        _setSelection(start, end, setReal) {\r\n            //TODO Modify setReal to be more explicit (and a boolean)\r\n            start = Math.max(start, 0);\r\n            end = Math.min(end, this.that.value.length); //TODO Replace `this.that.value.length` with `this.value.length`\r\n            this.selection = {\r\n                start,\r\n                end,\r\n                length: end - start,\r\n            };\r\n\r\n            if (isUndefined(setReal) || setReal) {\r\n                setElementSelection(this.that, start, end);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Set the caret position inside the input at the given position.\r\n         *\r\n         * @param {int} pos\r\n         * @param {undefined|boolean} setReal\r\n         * @private\r\n         */\r\n        _setCaretPosition(pos, setReal) {\r\n            //TODO Modify setReal to be more explicit (and a boolean)\r\n            this._setSelection(pos, pos, setReal);\r\n        }\r\n\r\n        /**\r\n         * Return an array containing the string parts located on the left and right side of the caret or selection.\r\n         * Those parts are left 'untouched', ie. formatted by autoNumeric.\r\n         *\r\n         * @returns {[string, string]} The parts on the left and right of the caret or selection\r\n         * @private\r\n         */\r\n        _getLeftAndRightPartAroundTheSelection() {\r\n            const value = this.value;\r\n            const left = value.substring(0, this.selection.start);\r\n            const right = value.substring(this.selection.end, value.length);\r\n\r\n            return [left, right];\r\n        }\r\n\r\n        /**\r\n         * Return an array containing the string parts located on the left and right side of the caret or selection.\r\n         * Those parts are unformatted (stripped) of any non-numbers characters.\r\n         *\r\n         * @returns {[string, string]} The parts on the left and right of the caret or selection, unformatted.\r\n         * @private\r\n         */\r\n        _getUnformattedLeftAndRightPartAroundTheSelection() {\r\n            const settingsClone = this.settingsClone;\r\n            let [left, right] = this._getLeftAndRightPartAroundTheSelection();\r\n            if (left === '' && right === '') {\r\n                settingsClone.trailingNegative = false;\r\n            }\r\n            // if changing the sign and left is equal to the number zero - prevents stripping the leading zeros\r\n            let stripZeros = true;\r\n            if (this.eventKeyCode === keyCode.Hyphen && Number(left) === 0) {\r\n                stripZeros = false;\r\n            }\r\n            left = stripAllNonNumberCharacters(left, this.settingsClone, stripZeros);\r\n            right = stripAllNonNumberCharacters(right, this.settingsClone, false);\r\n\r\n            if (settingsClone.trailingNegative && !isNegative(left)) {\r\n                left = '-' + left;\r\n                right = (right === '-') ? '' : right;\r\n                settingsClone.trailingNegative = false;\r\n            }\r\n\r\n            return [left, right];\r\n        }\r\n\r\n        /**\r\n         * Strip parts from excess characters and leading zeros.\r\n         *\r\n         * @param {string} left\r\n         * @param {string} right\r\n         * @returns {[*,*]}\r\n         * @private\r\n         */\r\n        _normalizeParts(left, right) {\r\n            const settingsClone = this.settingsClone;\r\n\r\n            // if changing the sign and left is equal to the number zero - prevents stripping the leading zeros\r\n            let stripZeros = true;\r\n            if (this.eventKeyCode === keyCode.Hyphen && Number(left) === 0) {\r\n                stripZeros = false;\r\n            }\r\n            left = stripAllNonNumberCharacters(left, settingsClone, stripZeros);\r\n\r\n            // If right is not empty and first character is not decimalCharacter\r\n            right = stripAllNonNumberCharacters(right, settingsClone, false);\r\n\r\n            // Prevents multiple leading zeros from being entered\r\n            if (settingsClone.leadingZero === 'deny' &&\r\n                (this.eventKeyCode === keyCode.num0 || this.eventKeyCode === keyCode.numpad0) &&\r\n                Number(left) === 0 &&\r\n                !contains(left, settingsClone.decimalCharacter)  && right !== '') {\r\n                left = left.substring(0, left.length - 1);\r\n            }\r\n\r\n            if (settingsClone.trailingNegative && !isNegative(left)) {\r\n                left = '-' + left;\r\n                settingsClone.trailingNegative = false;\r\n            }\r\n\r\n            // Insert zero if has leading dot\r\n            this.newValue = left + right;\r\n            if (settingsClone.decimalCharacter) {\r\n                const m = this.newValue.match(new RegExp(`^${settingsClone.aNegRegAutoStrip}\\\\${settingsClone.decimalCharacter}`));\r\n                if (m) {\r\n                    left = left.replace(m[1], m[1] + '0');\r\n                    this.newValue = left + right;\r\n                }\r\n            }\r\n\r\n            return [left, right];\r\n        }\r\n\r\n        /**\r\n         * Set part of number to value while keeping the cursor position. //TODO What about the cursor selection?\r\n         *\r\n         * @param {string} left\r\n         * @param {string} right\r\n         * @param {boolean} isPaste\r\n         * @returns {boolean}\r\n         * @private\r\n         */\r\n        _setValueParts(left, right, isPaste = false) {\r\n            const settingsClone = this.settingsClone;\r\n            const parts = this._normalizeParts(left, right);\r\n            const [minTest, maxTest] = checkIfInRangeWithOverrideOption(this.newValue, settingsClone);\r\n            let position = parts[0].length;\r\n            this.newValue = parts.join('');\r\n\r\n            if (minTest && maxTest) {\r\n                this.newValue = truncateDecimal(this.newValue, settingsClone, isPaste);\r\n                //TODO Check if we need to replace the hard-coded ',' with settings.decimalCharacter\r\n                const testValue = (contains(this.newValue, ',')) ? this.newValue.replace(',', '.') : this.newValue;\r\n                if (testValue === '' || testValue === settingsClone.negativeSignCharacter) {\r\n                    settingsClone.rawValue = (settingsClone.emptyInputBehavior === 'zero') ? '0' : '';\r\n                } else {\r\n                    settingsClone.rawValue = cleanLeadingTrailingZeros(testValue, settingsClone);\r\n                }\r\n\r\n                if (position > this.newValue.length) {\r\n                    position = this.newValue.length;\r\n                }\r\n\r\n                // Make sure when the user enter a '0' on the far left with a leading zero option set to 'deny', that the caret does not moves since the input is dropped (fix issue #283)\r\n                if (position === 1 && parts[0] === '0' && settingsClone.leadingZero === 'deny') {\r\n                    // If the user enter `0`, then the caret is put on the right side of it (Fix issue #299)\r\n                    if (parts[1] === '' || parts[0] === '0' && parts[1] !== '') {\r\n                        position = 1;\r\n                    } else {\r\n                        position = 0;\r\n                    }\r\n                }\r\n\r\n                this.value = this.newValue;\r\n                this._setCaretPosition(position, false);\r\n\r\n                return true;\r\n            }\r\n\r\n            if (!minTest) {\r\n                this.$that.trigger('autoNumeric:minExceeded');\r\n            } else if (!maxTest) {\r\n                this.$that.trigger('autoNumeric:maxExceeded');\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Helper function for `_expandSelectionOnSign()`.\r\n         *\r\n         * @returns {*} Sign position of a formatted value\r\n         * @private\r\n         */\r\n        _getSignPosition() {\r\n            const settingsClone = this.settingsClone;\r\n            const currencySymbol = settingsClone.currencySymbol;\r\n            const that = this.that;\r\n\r\n            if (currencySymbol) {\r\n                const currencySymbolLen = currencySymbol.length;\r\n                if (settingsClone.currencySymbolPlacement === 'p') {\r\n                    const hasNeg = settingsClone.negativeSignCharacter && that.value && that.value.charAt(0) === settingsClone.negativeSignCharacter;\r\n                    return hasNeg ? [1, currencySymbolLen + 1] : [0, currencySymbolLen];\r\n                }\r\n                const valueLen = that.value.length;\r\n                return [valueLen - currencySymbolLen, valueLen];\r\n            }\r\n\r\n            return [1000, -1];\r\n        }\r\n\r\n        /**\r\n         * Expands selection to cover whole sign\r\n         * Prevents partial deletion/copying/overwriting of a sign\r\n         *\r\n         * @param {undefined|boolean} setReal\r\n         * @private\r\n         */\r\n        _expandSelectionOnSign(setReal) {\r\n            //TODO Modify setReal to be more explicit (and a boolean only)\r\n            //TODO Use array destructuring here to set signPosition to more explicit variables\r\n            const signPosition = this._getSignPosition();\r\n            const selection = this.selection;\r\n\r\n            // If selection catches something except sign and catches only space from sign\r\n            if (selection.start < signPosition[1] && selection.end > signPosition[0]) {\r\n                // Then select without empty space\r\n                if ((selection.start < signPosition[0] || selection.end > signPosition[1]) && this.value.substring(Math.max(selection.start, signPosition[0]), Math.min(selection.end, signPosition[1])).match(/^\\s*$/)) {\r\n                    if (selection.start < signPosition[0]) {\r\n                        this._setSelection(selection.start, signPosition[0], setReal);\r\n                    } else {\r\n                        this._setSelection(signPosition[1], selection.end, setReal);\r\n                    }\r\n                } else {\r\n                    // Else select with whole sign\r\n                    this._setSelection(Math.min(selection.start, signPosition[0]), Math.max(selection.end, signPosition[1]), setReal);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Try to strip pasted value to digits\r\n         */\r\n        _checkPaste() {\r\n            if (!isUndefined(this.valuePartsBeforePaste)) {\r\n                const oldParts = this.valuePartsBeforePaste;\r\n                const [left, right] = this._getLeftAndRightPartAroundTheSelection();\r\n\r\n                // Try to strip the pasted value first\r\n                delete this.valuePartsBeforePaste;\r\n\r\n                const modifiedLeftPart = left.substr(0, oldParts[0].length) + stripAllNonNumberCharacters(left.substr(oldParts[0].length), this.settingsClone, true);\r\n                if (!this._setValueParts(modifiedLeftPart, right, true)) {\r\n                    this.value = oldParts.join('');\r\n                    this._setCaretPosition(oldParts[0].length, false);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Process pasting, cursor moving and skipping of not interesting keys.\r\n         * If this function returns TRUE, then further processing is not performed.\r\n         *\r\n         * @param {Event} e\r\n         * @returns {boolean}\r\n         * @private\r\n         */\r\n        _skipAlways(e) {\r\n            // Catch the ctrl up on ctrl-v\r\n            if (((e.ctrlKey || e.metaKey) && e.type === 'keyup' && !isUndefined(this.valuePartsBeforePaste)) || (e.shiftKey && this.eventKeyCode === keyCode.Insert)) {\r\n                //TODO Move this test inside the `onKeyup` handler\r\n                this._checkPaste();\r\n                return false;\r\n            }\r\n\r\n            // Skip all function keys (F1-F12), Windows keys, tab and other special keys\r\n            if ((this.eventKeyCode >= keyCode.F1 && this.eventKeyCode <= keyCode.F12) ||\r\n                (this.eventKeyCode >= keyCode.Windows && this.eventKeyCode <= keyCode.RightClick) ||\r\n                (this.eventKeyCode >= keyCode.Tab && this.eventKeyCode < keyCode.Space) ||\r\n                // `e.which` is sometimes different than `this.eventKeyCode` during the keypress event when entering a printable character key (ie. 't'). Also, `e.which` equals 0 for non-printable characters.\r\n                (this.eventKeyCode < keyCode.Backspace &&\r\n                (e.which === 0 || e.which === this.eventKeyCode)) ||\r\n                this.eventKeyCode === keyCode.NumLock ||\r\n                this.eventKeyCode === keyCode.ScrollLock ||\r\n                this.eventKeyCode === keyCode.Insert ||\r\n                this.eventKeyCode === keyCode.Command) {\r\n                return true;\r\n            }\r\n\r\n            // If a \"Select all\" keyboard shortcut is detected (ctrl + a)\r\n            if ((e.ctrlKey || e.metaKey) && this.eventKeyCode === keyCode.a) {\r\n                if (this.settings.selectNumberOnly) {\r\n                    // `preventDefault()` is used here to prevent the browser to first select all the input text (including the currency sign), otherwise we would see that whole selection first in a flash, then the selection with only the number part without the currency sign.\r\n                    e.preventDefault();\r\n                    const valueLen = this.that.value.length;\r\n                    const currencySymbolLen = this.settings.currencySymbol.length;\r\n                    const negLen = (!isNegative(this.that.value))?0:1;\r\n                    const suffixTextLen = this.settings.suffixText.length;\r\n                    const currencySymbolPlacement = this.settings.currencySymbolPlacement;\r\n                    const negativePositiveSignPlacement = this.settings.negativePositiveSignPlacement;\r\n\r\n                    let start;\r\n                    if (currencySymbolPlacement === 's') {\r\n                        start = 0;\r\n                    } else {\r\n                        start = (negativePositiveSignPlacement === 'l' && negLen === 1 && currencySymbolLen > 0)?currencySymbolLen + 1:currencySymbolLen;\r\n                    }\r\n\r\n                    let end;\r\n                    if (currencySymbolPlacement === 'p') {\r\n                        end = valueLen - suffixTextLen;\r\n                    } else {\r\n                        switch (negativePositiveSignPlacement) {\r\n                            case 'l':\r\n                                end = valueLen - (suffixTextLen + currencySymbolLen);\r\n                                break;\r\n                            case 'r':\r\n                                end = (currencySymbolLen > 0)?valueLen - (currencySymbolLen + negLen + suffixTextLen):valueLen - (currencySymbolLen + suffixTextLen);\r\n                                break;\r\n                            default :\r\n                                end = valueLen - (currencySymbolLen + suffixTextLen);\r\n                        }\r\n                    }\r\n\r\n                    setElementSelection(this.that, start, end);\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            // If a \"Copy\", \"Paste\" or \"Cut\" keyboard shortcut is detected (respectively 'ctrl + c', 'ctrl + v' or 'ctrl + x')\r\n            if ((e.ctrlKey || e.metaKey) && (this.eventKeyCode === keyCode.c || this.eventKeyCode === keyCode.v || this.eventKeyCode === keyCode.x)) {\r\n                if (e.type === 'keydown') {\r\n                    this._expandSelectionOnSign();\r\n                }\r\n\r\n                // Try to prevent wrong paste\r\n                if (this.eventKeyCode === keyCode.v || this.eventKeyCode === keyCode.Insert) {\r\n                    if (e.type === 'keydown' || e.type === 'keypress') {\r\n                        if (isUndefined(this.valuePartsBeforePaste)) {\r\n                            this.valuePartsBeforePaste = this._getLeftAndRightPartAroundTheSelection();\r\n                        }\r\n                    } else {\r\n                        this._checkPaste();\r\n                    }\r\n                }\r\n\r\n                return e.type === 'keydown' || e.type === 'keypress' || this.eventKeyCode === keyCode.c;\r\n            }\r\n\r\n            if (e.ctrlKey || e.metaKey) {\r\n                return true;\r\n            }\r\n\r\n            // Jump over thousand separator\r\n            //TODO Move this test inside the `onKeydown` handler\r\n            if (this.eventKeyCode === keyCode.LeftArrow || this.eventKeyCode === keyCode.RightArrow) {\r\n                if (e.type === 'keydown' && !e.shiftKey) {\r\n                    if (this.eventKeyCode === keyCode.LeftArrow &&\r\n                        (this.that.value.charAt(this.selection.start - 2) === this.settingsClone.digitGroupSeparator ||\r\n                        this.that.value.charAt(this.selection.start - 2) === this.settingsClone.decimalCharacter)) {\r\n                        this._setCaretPosition(this.selection.start - 1);\r\n                    } else if (this.eventKeyCode === keyCode.RightArrow &&\r\n                        (this.that.value.charAt(this.selection.start + 1) === this.settingsClone.digitGroupSeparator ||\r\n                        this.that.value.charAt(this.selection.start + 1) === this.settingsClone.decimalCharacter)) {\r\n                        this._setCaretPosition(this.selection.start + 1);\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n\r\n            return this.eventKeyCode >= keyCode.PageDown && this.eventKeyCode <= keyCode.DownArrow;\r\n        }\r\n\r\n        /**\r\n         * Process deletion of characters when the minus sign is to the right of the numeric characters.\r\n         *\r\n         * @param {string} left The part on the left of the caret or selection\r\n         * @param {string} right The part on the right of the caret or selection\r\n         * @returns {[string, string]}\r\n         * @private\r\n         */\r\n        _processCharacterDeletionIfTrailingNegativeSign([left, right]) {\r\n            const settingsClone = this.settingsClone;\r\n            if (settingsClone.currencySymbolPlacement === 'p' && settingsClone.negativePositiveSignPlacement === 's') {\r\n                if (this.eventKeyCode === keyCode.Backspace) {\r\n                    settingsClone.caretFix = (this.selection.start >= this.value.indexOf(settingsClone.suffixText) && settingsClone.suffixText !== '');\r\n                    if (this.value.charAt(this.selection.start - 1) === '-') {\r\n                        left = left.substring(1);\r\n                    } else if (this.selection.start <= this.value.length - settingsClone.suffixText.length) {\r\n                        left = left.substring(0, left.length - 1);\r\n                    }\r\n                } else {\r\n                    settingsClone.caretFix = (this.selection.start >= this.value.indexOf(settingsClone.suffixText) && settingsClone.suffixText !== '');\r\n                    if (this.selection.start >= this.value.indexOf(settingsClone.currencySymbol) + settingsClone.currencySymbol.length) {\r\n                        right = right.substring(1, right.length);\r\n                    }\r\n                    if (isNegative(left) && this.value.charAt(this.selection.start) === '-') {\r\n                        left = left.substring(1);\r\n                    }\r\n                }\r\n            }\r\n\r\n            //TODO Merge the two following 'if' blocks into one `if (settingsClone.currencySymbolPlacement === 's') {` and a switch on settingsClone.negativePositiveSignPlacement\r\n            if (settingsClone.currencySymbolPlacement === 's' && settingsClone.negativePositiveSignPlacement === 'l') {\r\n                settingsClone.caretFix = (this.selection.start >= this.value.indexOf(settingsClone.negativeSignCharacter) + settingsClone.negativeSignCharacter.length);\r\n                if (this.eventKeyCode === keyCode.Backspace) {\r\n                    if (this.selection.start === (this.value.indexOf(settingsClone.negativeSignCharacter) + settingsClone.negativeSignCharacter.length) && contains(this.value, settingsClone.negativeSignCharacter)) {\r\n                        left = left.substring(1);\r\n                    } else if (left !== '-' && ((this.selection.start <= this.value.indexOf(settingsClone.negativeSignCharacter)) || !contains(this.value, settingsClone.negativeSignCharacter))) {\r\n                        left = left.substring(0, left.length - 1);\r\n                    }\r\n                } else {\r\n                    if (left[0] === '-') {\r\n                        right = right.substring(1);\r\n                    }\r\n                    if (this.selection.start === this.value.indexOf(settingsClone.negativeSignCharacter) && contains(this.value, settingsClone.negativeSignCharacter)) {\r\n                        left = left.substring(1);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (settingsClone.currencySymbolPlacement === 's' && settingsClone.negativePositiveSignPlacement === 'r') {\r\n                settingsClone.caretFix = (this.selection.start >= this.value.indexOf(settingsClone.negativeSignCharacter) + settingsClone.negativeSignCharacter.length);\r\n                if (this.eventKeyCode === keyCode.Backspace) {\r\n                    if (this.selection.start === (this.value.indexOf(settingsClone.negativeSignCharacter) + settingsClone.negativeSignCharacter.length)) {\r\n                        left = left.substring(1);\r\n                    } else if (left !== '-' && this.selection.start <= (this.value.indexOf(settingsClone.negativeSignCharacter) - settingsClone.currencySymbol.length)) {\r\n                        left = left.substring(0, left.length - 1);\r\n                    } else if (left !== '' && !contains(this.value, settingsClone.negativeSignCharacter)) {\r\n                        left = left.substring(0, left.length - 1);\r\n                    }\r\n                } else {\r\n                    settingsClone.caretFix = (this.selection.start >= this.value.indexOf(settingsClone.currencySymbol) && settingsClone.currencySymbol !== '');\r\n                    if (this.selection.start === this.value.indexOf(settingsClone.negativeSignCharacter)) {\r\n                        left = left.substring(1);\r\n                    }\r\n                    right = right.substring(1);\r\n                }\r\n            }\r\n\r\n            return [left, right];\r\n        }\r\n\r\n        /**\r\n         * Process the deletion of characters.\r\n         */\r\n        _processCharacterDeletion() {\r\n            const settingsClone = this.settingsClone;\r\n\r\n            let left;\r\n            let right;\r\n\r\n            if (!this.selection.length) {\r\n                [left, right] = this._getUnformattedLeftAndRightPartAroundTheSelection();\r\n                if (left === '' && right === '') {\r\n                    settingsClone.throwInput = false;\r\n                }\r\n\r\n                if (((settingsClone.currencySymbolPlacement === 'p' && settingsClone.negativePositiveSignPlacement === 's') ||\r\n                    (settingsClone.currencySymbolPlacement === 's' && (settingsClone.negativePositiveSignPlacement === 'l' || settingsClone.negativePositiveSignPlacement === 'r'))) &&\r\n                    isNegative(this.value)) { //TODO Change `this.value` to `this.that.value`?\r\n                    [left, right] = this._processCharacterDeletionIfTrailingNegativeSign([left, right]);\r\n                } else {\r\n                    if (this.eventKeyCode === keyCode.Backspace) {\r\n                        left = left.substring(0, left.length - 1);\r\n                    } else {\r\n                        right = right.substring(1, right.length);\r\n                    }\r\n                }\r\n            } else {\r\n                this._expandSelectionOnSign(false);\r\n                [left, right] = this._getUnformattedLeftAndRightPartAroundTheSelection();\r\n            }\r\n\r\n            this._setValueParts(left, right);\r\n        }\r\n\r\n        /**\r\n         * This function decides if the key pressed should be dropped or accepted, and modify the value 'on-the-fly' accordingly.\r\n         * Returns TRUE if the keycode is allowed.\r\n         * This functions also modify the value on-the-fly. //FIXME This should use another function in order to separate the test and the modification\r\n         *\r\n         * @param {Event|string} eventOrChar The event object, or the character entered (from an android device)\r\n         * @returns {boolean}\r\n         */\r\n        _processCharacterInsertion(eventOrChar) {\r\n            const settingsClone = this.settingsClone;\r\n            let [left, right] = this._getUnformattedLeftAndRightPartAroundTheSelection();\r\n\r\n            let eventCharacter;\r\n            if (isString(eventOrChar)) {\r\n                // Android browsers\r\n                eventCharacter = eventOrChar;\r\n            } else {\r\n                // Normal browsers\r\n                settingsClone.throwInput = true;\r\n\r\n                // Retrieve the real character that has been entered (ie. 'a' instead of the key code)\r\n                eventCharacter = character(eventOrChar);\r\n            }\r\n\r\n            // Start rules when the decimal character key is pressed always use numeric pad dot to insert decimal separator\r\n            // Do not allow decimal character if no decimal part allowed\r\n            if (eventCharacter === settingsClone.decimalCharacter ||\r\n                (settingsClone.decimalCharacterAlternative && eventCharacter === settingsClone.decimalCharacterAlternative) ||\r\n                ((eventCharacter === '.' || eventCharacter === ',') && this.eventKeyCode === keyCode.DotNumpad)) {\r\n                if (!settingsClone.decimalPlacesOverride || !settingsClone.decimalCharacter) {\r\n                    return true;\r\n                }\r\n\r\n                // Do not allow decimal character before negativeSignCharacter character\r\n                if (settingsClone.negativeSignCharacter && contains(right, settingsClone.negativeSignCharacter)) {\r\n                    return true;\r\n                }\r\n\r\n                // Do not allow decimal character if other decimal character present\r\n                if (contains(left, settingsClone.decimalCharacter)) {\r\n                    return true;\r\n                }\r\n\r\n                if (right.indexOf(settingsClone.decimalCharacter) > 0) {\r\n                    return true;\r\n                }\r\n\r\n                if (right.indexOf(settingsClone.decimalCharacter) === 0) {\r\n                    right = right.substr(1);\r\n                }\r\n\r\n                this._setValueParts(left + settingsClone.decimalCharacter, right);\r\n\r\n                return true;\r\n            }\r\n\r\n            // Prevent minus if not allowed\r\n            if ((eventCharacter === '-' || eventCharacter === '+') && settingsClone.negativeSignCharacter === '-') {\r\n                if (!settingsClone) {\r\n                    return true;\r\n                }\r\n\r\n                // Caret is always after minus\r\n                if ((settingsClone.currencySymbolPlacement === 'p' && settingsClone.negativePositiveSignPlacement === 's') || (settingsClone.currencySymbolPlacement === 's' && settingsClone.negativePositiveSignPlacement !== 'p')) {\r\n                    if (left === '' && contains(right, settingsClone.negativeSignCharacter)) {\r\n                        left = settingsClone.negativeSignCharacter;\r\n                        right = right.substring(1, right.length);\r\n                    }\r\n\r\n                    // Change number sign, remove part if should\r\n                    if (isNegativeStrict(left) || contains(left, settingsClone.negativeSignCharacter)) {\r\n                        left = left.substring(1, left.length);\r\n                    } else {\r\n                        left = (eventCharacter === '-') ? settingsClone.negativeSignCharacter + left : left;\r\n                    }\r\n                } else {\r\n                    if (left === '' && contains(right, settingsClone.negativeSignCharacter)) {\r\n                        left = settingsClone.negativeSignCharacter;\r\n                        right = right.substring(1, right.length);\r\n                    }\r\n\r\n                    // Change number sign, remove part if should\r\n                    if (left.charAt(0) === settingsClone.negativeSignCharacter) {\r\n                        left = left.substring(1, left.length);\r\n                    } else {\r\n                        left = (eventCharacter === '-') ? settingsClone.negativeSignCharacter + left : left;\r\n                    }\r\n                }\r\n\r\n                this._setValueParts(left, right);\r\n\r\n                return true;\r\n            }\r\n\r\n            // If the user tries to insert digit before minus sign\r\n            const eventNumber = Number(eventCharacter);\r\n            if (eventNumber >= 0 && eventNumber <= 9) {\r\n                if (settingsClone.negativeSignCharacter && left === '' && contains(right, settingsClone.negativeSignCharacter)) {\r\n                    left = settingsClone.negativeSignCharacter;\r\n                    right = right.substring(1, right.length);\r\n                }\r\n\r\n                if (settingsClone.maximumValue <= 0 && settingsClone.minimumValue < settingsClone.maximumValue && !contains(this.value, settingsClone.negativeSignCharacter) && eventCharacter !== '0') {\r\n                    left = settingsClone.negativeSignCharacter + left;\r\n                }\r\n\r\n                this._setValueParts(left + eventCharacter, right);\r\n\r\n                return true;\r\n            }\r\n\r\n            // Prevent any other character\r\n            settingsClone.throwInput = false;\r\n\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Formatting of just processed value while keeping the cursor position\r\n         *\r\n         * @param {Event} e\r\n         * @private\r\n         */\r\n        _formatValue(e) {\r\n            const settingsClone = this.settingsClone;\r\n            const leftLength = this.value;\r\n            let [left] = this._getUnformattedLeftAndRightPartAroundTheSelection();\r\n\r\n            // No grouping separator and no currency sign\r\n            if ((settingsClone.digitGroupSeparator  === '' || (settingsClone.digitGroupSeparator !== ''  && !contains(leftLength, settingsClone.digitGroupSeparator))) &&\r\n                (settingsClone.currencySymbol === '' || (settingsClone.currencySymbol !== '' && !contains(leftLength, settingsClone.currencySymbol)))) {\r\n                let [subParts] = leftLength.split(settingsClone.decimalCharacter);\r\n                let nSign = '';\r\n                if (isNegative(subParts)) {\r\n                    nSign = '-';\r\n                    subParts = subParts.replace('-', '');\r\n                    left = left.replace('-', '');\r\n                }\r\n\r\n                // Strip leading zero on positive value if needed\r\n                if (nSign === '' && subParts.length > settingsClone.mIntPos && left.charAt(0) === '0') {\r\n                    left = left.slice(1);\r\n                }\r\n\r\n                // Strip leading zero on negative value if needed\r\n                if (nSign === '-' && subParts.length > settingsClone.mIntNeg && left.charAt(0) === '0') {\r\n                    left = left.slice(1);\r\n                }\r\n\r\n                left = nSign + left;\r\n            }\r\n\r\n            const value = addGroupSeparators(this.value, this.settingsClone);\r\n            let position = value.length;\r\n            if (value) {\r\n                // Prepare regexp which searches for cursor position from unformatted left part\r\n                const leftAr = left.split('');\r\n\r\n                // Fixes caret position with trailing minus sign\r\n                if ((settingsClone.negativePositiveSignPlacement === 's' || (settingsClone.currencySymbolPlacement === 's' && settingsClone.negativePositiveSignPlacement !== 'p')) &&\r\n                    leftAr[0] === '-' && settingsClone.negativeSignCharacter !== '') {\r\n                    leftAr.shift();\r\n\r\n                    if ((this.eventKeyCode === keyCode.Backspace || this.eventKeyCode === keyCode.Delete) &&\r\n                        settingsClone.caretFix) {\r\n                        if (settingsClone.currencySymbolPlacement === 's' && settingsClone.negativePositiveSignPlacement === 'l') {\r\n                            leftAr.push('-');\r\n                            settingsClone.caretFix = e.type === 'keydown';\r\n                        }\r\n\r\n                        if (settingsClone.currencySymbolPlacement === 'p' && settingsClone.negativePositiveSignPlacement === 's') {\r\n                            leftAr.push('-');\r\n                            settingsClone.caretFix = e.type === 'keydown';\r\n                        }\r\n\r\n                        if (settingsClone.currencySymbolPlacement === 's' && settingsClone.negativePositiveSignPlacement === 'r') {\r\n                            const signParts = settingsClone.currencySymbol.split('');\r\n                            const escapeChr = ['\\\\', '^', '$', '.', '|', '?', '*', '+', '(', ')', '['];\r\n                            const escapedParts = [];\r\n                            $.each(signParts, (i, miniParts) => {\r\n                                miniParts = signParts[i];\r\n                                if (isInArray(miniParts, escapeChr)) {\r\n                                    escapedParts.push('\\\\' + miniParts);\r\n                                } else {\r\n                                    escapedParts.push(miniParts);\r\n                                }\r\n                            });\r\n\r\n                            if (this.eventKeyCode === keyCode.Backspace) {\r\n                                escapedParts.push('-');\r\n                            }\r\n\r\n                            // Pushing the escaped sign\r\n                            leftAr.push(escapedParts.join(''));\r\n                            settingsClone.caretFix = e.type === 'keydown';\r\n                        }\r\n                    }\r\n                }\r\n\r\n                for (let i = 0; i < leftAr.length; i++) {\r\n                    if (!leftAr[i].match('\\\\d')) {\r\n                        leftAr[i] = '\\\\' + leftAr[i];\r\n                    }\r\n                }\r\n\r\n                const leftReg = new RegExp('^.*?' + leftAr.join('.*?'));\r\n\r\n                // Search cursor position in formatted value\r\n                const newLeft = value.match(leftReg);\r\n                if (newLeft) {\r\n                    position = newLeft[0].length;\r\n\r\n                    // If the positive sign is shown, calculate the caret position accordingly\r\n                    if (settingsClone.showPositiveSign) {\r\n                        if (position === 0 && newLeft.input.charAt(0) === settingsClone.positiveSignCharacter) {\r\n                            position = (newLeft.input.indexOf(settingsClone.currencySymbol) === 1) ? settingsClone.currencySymbol.length + 1 : 1;\r\n                        }\r\n\r\n                        if (position === 0 && newLeft.input.charAt(settingsClone.currencySymbol.length) === settingsClone.positiveSignCharacter) {\r\n                            position = settingsClone.currencySymbol.length + 1;\r\n                        }\r\n                    }\r\n\r\n                    // If we are just before the sign which is in prefix position\r\n                    if (((position === 0 && value.charAt(0) !== settingsClone.negativeSignCharacter) || (position === 1 && value.charAt(0) === settingsClone.negativeSignCharacter)) && settingsClone.currencySymbol && settingsClone.currencySymbolPlacement === 'p') {\r\n                        // Place caret after prefix sign\r\n                        //TODO Should the test be 'isNegative' instead of 'isNegativeStrict' in order to search for '-' everywhere in the string?\r\n                        position = this.settingsClone.currencySymbol.length + (isNegativeStrict(value) ? 1 : 0);\r\n                    }\r\n                } else {\r\n                    if (settingsClone.currencySymbol && settingsClone.currencySymbolPlacement === 's') {\r\n                        // If we could not find a place for cursor and have a sign as a suffix\r\n                        // Place caret before suffix currency sign\r\n                        position -= settingsClone.currencySymbol.length;\r\n                    }\r\n\r\n                    if (settingsClone.suffixText) {\r\n                        // If we could not find a place for cursor and have a suffix\r\n                        // Place caret before suffix\r\n                        position -= settingsClone.suffixText.length;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Only update the value if it has changed. This prevents modifying the selection, if any.\r\n            if (value !== this.that.value ||\r\n                value === this.that.value && (this.eventKeyCode === keyCode.num0 || this.eventKeyCode === keyCode.numpad0)) {\r\n                this.that.value = value;\r\n                this._setCaretPosition(position);\r\n            }\r\n\r\n            if (settingsClone.androidSelectionStart !== null) {\r\n                // If an Android browser is detected, fix the caret position\r\n                // Unfortunately this does not fix all android browsers, only Android Chrome currently.\r\n                // This is due to the fact those provide different order of events and/or keycodes thrown (this is a real mess :|).\r\n                this._setCaretPosition(settingsClone.androidSelectionStart);\r\n            }\r\n\r\n            this.formatted = true; //TODO Rename `this.formatted` to `this._formatExecuted`, since it's possible this function does not need to format anything (in the case where the keycode is dropped for instance)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function factorise the `getString()` and `getArray()` functions since they share quite a lot of code.\r\n     *\r\n     * The \"getString\" method uses jQuery's .serialize() method that creates a text string in standard URL-encoded notation.\r\n     * The \"getArray\" method on the other hand uses jQuery's .serializeArray() method that creates array or objects that can be encoded as a JSON string.\r\n     *\r\n     * It then loops through the string and un-formats the inputs with autoNumeric.\r\n     * By defaults values returned as ISO numeric string \"1234.56\" or \"-1234.56\" where the decimal character is a period\r\n     * Locale formats are supported \"1234.56-\" or \"1234,56\" or \"-1234,56 or \"1234,56-\", or even plain numbers => please see option \"outputFormat\" for more details\r\n     *\r\n     * @param {boolean} getArrayBehavior - If set to TRUE, then this function behave like `getArray()`, otherwise if set to FALSE, it behave like `getString()`\r\n     * @param {HTMLElement} that - A reference to the current DOM element\r\n     * @returns {*}\r\n     * @private\r\n     */\r\n    function _getStringOrArray(getArrayBehavior = true, that) {\r\n        const $this = getCurrentElement(that);\r\n        const formIndex = $('form').index($this);\r\n        const allFormElements = $(`form:eq(${formIndex})`)[0];\r\n        const aiIndex = [];\r\n\r\n        // all input index\r\n        const scIndex = [];\r\n\r\n        // successful control index\r\n        const rSubmitterTypes = /^(?:submit|button|image|reset|file)$/i;\r\n\r\n        // from jQuery serialize method\r\n        const rSubmittable = /^(?:input|select|textarea|keygen)/i;\r\n\r\n        // from jQuery serialize method\r\n        const rCheckableType = /^(?:checkbox|radio)$/i;\r\n        const rNonAutoNumericTypes = /^(?:button|checkbox|color|date|datetime|datetime-local|email|file|image|month|number|password|radio|range|reset|search|submit|time|url|week)/i;\r\n\r\n        let count = 0;\r\n\r\n        // index of successful elements\r\n        $.each(allFormElements, (i, field) => {\r\n            if (field.name !== '' && rSubmittable.test(field.localName) && !rSubmitterTypes.test(field.type) && !field.disabled && (field.checked || !rCheckableType.test(field.type))) {\r\n                scIndex.push(count);\r\n                count++;\r\n            } else {\r\n                scIndex.push(-1);\r\n            }\r\n        });\r\n\r\n        // index of all inputs tags except checkbox\r\n        count = 0;\r\n        $.each(allFormElements, (i, field) => {\r\n            if (field.localName === 'input' && (field.type === '' || field.type === 'text' || field.type === 'hidden' || field.type === 'tel')) {\r\n                aiIndex.push(count);\r\n                count++;\r\n            } else {\r\n                aiIndex.push(-1);\r\n                if (field.localName === 'input' && rNonAutoNumericTypes.test(field.type)) {\r\n                    count++;\r\n                }\r\n            }\r\n        });\r\n\r\n        if (getArrayBehavior) {\r\n            const formFields = $this.serializeArray();\r\n\r\n            $.each(formFields, (i, field) => {\r\n                const scElement = scIndex.indexOf(i);\r\n\r\n                if (scElement > -1 && aiIndex[scElement] > -1) {\r\n                    const testInput = $(`form:eq(${formIndex}) input:eq(${aiIndex[scElement]})`);\r\n                    const settings = testInput.data('autoNumeric');\r\n\r\n                    if (typeof settings === 'object') {\r\n                        field.value = testInput.autoNumeric('getLocalized').toString();\r\n                    }\r\n                }\r\n            });\r\n\r\n            return formFields;\r\n        }\r\n        else {\r\n            // getString() behavior\r\n            const formFields = $this.serialize();\r\n            const formParts = formFields.split('&');\r\n\r\n            $.each(formParts, i => {\r\n                const [inputName, inputValue] = formParts[i].split('=');\r\n                const scElement = scIndex.indexOf(i);\r\n\r\n                // If the current element is a valid element\r\n                if (scElement > -1 && aiIndex[scElement] > -1) {\r\n                    const testInput = $(`form:eq(${formIndex}) input:eq(${aiIndex[scElement]})`);\r\n                    const settings = testInput.data('autoNumeric');\r\n\r\n                    if (typeof settings === 'object') {\r\n                        if (inputValue !== null) {\r\n                            const modifiedInputValue = testInput.autoNumeric('getLocalized').toString();\r\n                            formParts[i] = `${inputName}=${modifiedInputValue}`;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n            return formParts.join('&');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handler for 'focusin' events\r\n     *\r\n     * @param {object} $this jQuery-selected DOM element\r\n     * @param {AutoNumericHolder} holder\r\n     * @param {Event} e\r\n     */\r\n    function onFocusInAndMouseEnter($this, holder, e) {\r\n        const settings = holder.settingsClone;\r\n\r\n        if (e.type === 'focusin' || e.type === 'mouseenter' && !$this.is(':focus') && settings.emptyInputBehavior === 'focus') {\r\n            settings.hasFocus = true;\r\n\r\n            if (settings.negativeBracketsTypeOnBlur !== null && settings.negativeSignCharacter !== '') {\r\n                jQueryOriginalVal.call($this, toggleNegativeBracket(e.target.value, settings));\r\n            }\r\n\r\n            // clean the value to compare to rawValue\r\n            let result = stripAllNonNumberCharacters(e.target.value, settings, true);\r\n            result = convertToNumericString(result, settings);\r\n            result = cleanLeadingTrailingZeros(result, settings);\r\n            if (settings.trailingNegative) {\r\n                result = '-' + result;\r\n            }\r\n\r\n            let roundedValue;\r\n            if (settings.decimalPlacesShownOnFocus) {\r\n                settings.decimalPlacesOverride = settings.decimalPlacesShownOnFocus;\r\n                roundedValue = roundValue(settings.rawValue, settings);\r\n                jQueryOriginalVal.call($this, addGroupSeparators(roundedValue, settings));\r\n            } else if (settings.scaleDivisor) {\r\n                settings.decimalPlacesOverride = Number(settings.oDec);\r\n                roundedValue = roundValue(settings.rawValue, settings);\r\n                jQueryOriginalVal.call($this, addGroupSeparators(roundedValue, settings));\r\n            } else if (settings.noSeparatorOnFocus) {\r\n                settings.digitGroupSeparator = '';\r\n                settings.currencySymbol = '';\r\n                settings.suffixText = '';\r\n                roundedValue = roundValue(settings.rawValue, settings);\r\n                jQueryOriginalVal.call($this, addGroupSeparators(roundedValue, settings));\r\n            } else if (result !== settings.rawValue) {\r\n                // updates the rawValue\r\n                $this.autoNumeric('set', result);\r\n            }\r\n\r\n            // In order to send a 'native' change event when blurring the input, we need to first store the initial input value on focus.\r\n            holder.valueOnFocus = e.target.value;\r\n            holder.lastVal = holder.valueOnFocus;\r\n            const onEmpty = checkEmpty(holder.valueOnFocus, settings, true);\r\n            if ((onEmpty !== null && onEmpty !== '') && settings.emptyInputBehavior === 'focus') {\r\n                jQueryOriginalVal.call($this, onEmpty);\r\n                if (onEmpty === settings.currencySymbol && settings.currencySymbolPlacement === 's') {\r\n                    setElementSelection(e.target, 0, 0);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handler for 'keydown' events.\r\n     * The user just started pushing any key, hence one event is sent.\r\n     *\r\n     * Note :\r\n     * By default a 'normal' input output those events in the right order when inputting a character key (ie. 'a') :\r\n     * - keydown\r\n     * - keypress\r\n     * - input\r\n     * - keyup\r\n     *\r\n     * ...when inputting a modifier key (ie. 'ctrl') :\r\n     * - keydown\r\n     * - keyup\r\n     *\r\n     * If 'delete' or 'backspace' is entered, the following events are sent :\r\n     * - keydown\r\n     * - input\r\n     * - keyup\r\n     *\r\n     * If 'enter' is entered and the value has not changed, the following events are sent :\r\n     * - keydown\r\n     * - keypress\r\n     * - keyup\r\n     *\r\n     * If 'enter' is entered and the value has been changed, the following events are sent :\r\n     * - keydown\r\n     * - keypress\r\n     * - change\r\n     * - keyup\r\n     *\r\n     * When a paste is done, the following events are sent :\r\n     * - input (if paste is done with the mouse)\r\n     *\r\n     * - keydown (if paste is done with ctrl+v)\r\n     * - keydown\r\n     * - input\r\n     * - keyup\r\n     * - keyup\r\n     *\r\n     * @param {AutoNumericHolder} holder\r\n     * @param {Event} e\r\n     */\r\n    function onKeydown(holder, e) {\r\n        //TODO Create a function that retrieve the element value (either by using `e.target.value` when the element is an <input>, or by using `element.textContent` when the element as its `contenteditable` set to true)\r\n        holder._updateAutoNumericHolderEventKeycode(e);\r\n        holder.initialValueOnKeydown = e.target.value; // This is needed in `onKeyup()` to check if the value as changed during the key press\r\n\r\n        if (holder.that.readOnly) {\r\n            holder.processed = true;\r\n\r\n            return;\r\n        }\r\n\r\n        // The \"enter\" key throws a `change` event if the value has changed since the `focus` event\r\n        if (holder.eventKeyCode === keyCode.Enter && holder.valueOnFocus !== e.target.value) {\r\n            triggerEvent('change', e.target);\r\n            holder.valueOnFocus = e.target.value;\r\n        }\r\n\r\n        holder._updateAutoNumericHolderProperties(e);\r\n\r\n        if (holder._skipAlways(e)) {\r\n            holder.processed = true;\r\n\r\n            return;\r\n        }\r\n\r\n        // Check if the key is a delete/backspace key\r\n        if (holder.eventKeyCode === keyCode.Backspace || holder.eventKeyCode === keyCode.Delete) {\r\n            holder._processCharacterDeletion(); // Because backspace and delete only triggers keydown and keyup events, not keypress\r\n            holder.processed = true;\r\n            holder._formatValue(e);\r\n\r\n            // If and only if the resulting value has changed after that backspace/delete, then we have to send an 'input' event like browsers normally do.\r\n            if ((e.target.value !== holder.lastVal) && holder.settingsClone.throwInput) {\r\n                // Throw an input event when a character deletion is detected\r\n                triggerEvent('input', e.target);\r\n                e.preventDefault(); // ...and immediately prevent the browser to delete a second character\r\n            }\r\n\r\n            holder.lastVal = e.target.value;\r\n            holder.settingsClone.throwInput = true;\r\n\r\n            return;\r\n        }\r\n\r\n        holder.formatted = false; //TODO Is this line needed?\r\n    }\r\n\r\n    /**\r\n     * Handler for 'keypress' events.\r\n     * The user is still pressing the key, which will output a character (ie. '2') continuously until it releases the key.\r\n     * Note: 'keypress' events are not sent for delete keys like Backspace/Delete.\r\n     *\r\n     * @param {AutoNumericHolder} holder\r\n     * @param {Event} e\r\n     */\r\n    function onKeypress(holder, e) {\r\n        // Retrieve the real character that has been entered (ie. 'a' instead of the key code)\r\n        const eventCharacter = character(e);\r\n\r\n        // Firefox generate a 'keypress' event (e.keyCode === 0) for the keys that do not print a character (ie. 'Insert', 'Delete', 'Fn' keys, 'PageUp', 'PageDown' etc.). 'Shift' on the other hand does not generate a keypress event.\r\n        if (eventCharacter === keyName.Insert) {\r\n            return;\r\n        }\r\n\r\n        const processed = holder.processed;\r\n        holder._updateAutoNumericHolderProperties(e);\r\n\r\n        if (holder._skipAlways(e)) {\r\n            return;\r\n        }\r\n\r\n        if (processed) {\r\n            e.preventDefault();\r\n\r\n            return;\r\n        }\r\n\r\n        const isCharacterInsertionAllowed = holder._processCharacterInsertion(e);\r\n        if (isCharacterInsertionAllowed) {\r\n            holder._formatValue(e);\r\n            if ((e.target.value !== holder.lastVal) && holder.settingsClone.throwInput) {\r\n                // Throws input event on adding a character\r\n                triggerEvent('input', e.target);\r\n                e.preventDefault(); // ...and immediately prevent the browser to add a second character\r\n            }\r\n            else {\r\n                if ((eventCharacter === holder.settings.decimalCharacter || eventCharacter === holder.settings.decimalCharacterAlternative) &&\r\n                    (getElementSelection(e.target).start === getElementSelection(e.target).end) &&\r\n                    getElementSelection(e.target).start === e.target.value.indexOf(holder.settings.decimalCharacter)) {\r\n                    const position = getElementSelection(e.target).start + 1;\r\n                    setElementSelection(e.target, position, position);\r\n                }\r\n                e.preventDefault();\r\n            }\r\n\r\n            holder.lastVal = e.target.value;\r\n            holder.settingsClone.throwInput = true;\r\n\r\n            return;\r\n        }\r\n\r\n        e.preventDefault();\r\n\r\n        holder.formatted = false;\r\n    }\r\n\r\n    /**\r\n     * Handler for 'input' events.\r\n     * added to support android devices with mobile chrome browsers and others\r\n     * Has the potential to replace the keypress event.\r\n     *\r\n     * @param {AutoNumericHolder} holder\r\n     * @param {Event} e\r\n     */\r\n    function onInput(holder, e) {\r\n        const value = e.target.value;\r\n\r\n        // Fix the caret position on keyup in the `_formatValue()` function\r\n        holder.settings.androidSelectionStart = null;\r\n\r\n        if (holder.eventKeyCode === keyCode.AndroidDefault) {\r\n            // The keyCode is equal to the default Android Chrome one (which is always equal to `keyCode.AndroidDefault`)\r\n            if (value.length > holder.lastVal.length || value.length >= holder.lastVal.length - holder.selection.length) {\r\n                // Determine the keycode of the character that was entered, and overwrite the faulty `eventKeyCode` info with it\r\n                holder.eventKeyCode = value.charCodeAt(holder.selection.start);\r\n\r\n                // Capture the actual character entered\r\n                const androidCharEntered = value.charAt(holder.selection.start);\r\n\r\n                // Check if the given character should be inserted, and if so, do insert it into the current element value\r\n                const isCharacterInsertionAllowed = holder._processCharacterInsertion(androidCharEntered);\r\n\r\n                if (isCharacterInsertionAllowed) {\r\n                    // Allowed character entered (number, decimal or plus/minus sign)\r\n                    holder._formatValue(e);\r\n\r\n                    // Capture the new caret position. This is required because on keyup, `_updateAutoNumericHolderEventKeycode()` captures the old caret position\r\n                    //TODO Check if this is an Android bug or an autoNumeric one\r\n                    holder.settings.androidSelectionStart = holder.selection.start;\r\n\r\n                    const decimalCharacterPosition = e.target.value.indexOf(holder.settings.decimalCharacter);\r\n                    const hasDecimalCharacter = decimalCharacterPosition === -1;\r\n\r\n                    // Move the caret to the right if the `androidCharEntered` is the decimal character or if it's on the left of the caret position\r\n                    if (androidCharEntered === holder.settings.decimalCharacter ||\r\n                        !hasDecimalCharacter && decimalCharacterPosition < holder.settings.androidSelectionStart) {\r\n                        holder.settings.androidSelectionStart = holder.selection.start + 1;\r\n                    }\r\n\r\n                    if (e.target.value.length > value.length) {\r\n                        // Position the caret right now before the 'keyup' event in order to prevent the caret from jumping around\r\n                        setElementSelection(e.target, holder.settings.androidSelectionStart, holder.settings.androidSelectionStart);\r\n                    }\r\n\r\n                    holder.lastVal = e.target.value;\r\n\r\n                    return;\r\n                } else {\r\n                    // The entered character is not allowed ; overwrite the new invalid value with the previous valid one, and set back the caret/selection\r\n                    e.target.value = holder.lastVal;\r\n                    setElementSelection(e.target, holder.selection.start, holder.selection.end);\r\n                    holder.settings.androidSelectionStart = holder.selection.start;\r\n                }\r\n\r\n                e.preventDefault(); //FIXME How does that affects the normal trigger of the input event?\r\n\r\n                holder.formatted = false;\r\n            } else {\r\n                // Character deleted\r\n                //TODO What about the `Delete` key?\r\n                holder.eventKeyCode = keyCode.Backspace;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handler for 'keyup' events.\r\n     * The user just released any key, hence one event is sent.\r\n     *\r\n     * @param {AutoNumericHolder} holder\r\n     * @param {object} settings\r\n     * @param {Event} e\r\n     */\r\n    function onKeyup(holder, settings, e) {\r\n        holder._updateAutoNumericHolderProperties(e);\r\n\r\n        const skip = holder._skipAlways(e);\r\n        delete holder.valuePartsBeforePaste;\r\n        const isOnAndroid = holder.settingsClone.androidSelectionStart !== null;\r\n        if (skip && !isOnAndroid || e.target.value === '') {\r\n            return;\r\n        }\r\n\r\n        // Added to properly place the caret when only the currency sign is present\r\n        if (e.target.value === holder.settingsClone.currencySymbol) {\r\n            if (holder.settingsClone.currencySymbolPlacement === 's') {\r\n                setElementSelection(e.target, 0, 0);\r\n            } else {\r\n                setElementSelection(e.target, holder.settingsClone.currencySymbol.length, holder.settingsClone.currencySymbol.length);\r\n            }\r\n        } else if (holder.eventKeyCode === keyCode.Tab) {\r\n            setElementSelection(e.target, 0, e.target.value.length);\r\n        }\r\n\r\n        if ((e.target.value === holder.settingsClone.suffixText) ||\r\n            (holder.settingsClone.rawValue === '' && holder.settingsClone.currencySymbol !== '' && holder.settingsClone.suffixText !== '')) {\r\n            setElementSelection(e.target, 0, 0);\r\n        }\r\n\r\n        // Saves the extended decimal to preserve the data when navigating away from the page\r\n        if (holder.settingsClone.decimalPlacesShownOnFocus !== null && holder.settingsClone.saveValueToSessionStorage) {\r\n            saveValueToPersistentStorage(e.target, settings, 'set');\r\n        }\r\n\r\n        if (!holder.formatted) {\r\n            holder._formatValue(e);\r\n        }\r\n\r\n        // If the input value has changed during the key press event chain, an event is sent to alert that a formatting has been done (cf. Issue #187)\r\n        if (e.target.value !== holder.initialValueOnKeydown) {\r\n            triggerEvent('autoNumeric:formatted', e.target);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handler for 'focusout' events\r\n     *\r\n     * @param {object} $this jQuery-selected DOM element\r\n     * @param {AutoNumericHolder} holder\r\n     * @param {Event} e\r\n     */\r\n    function onFocusOutAndMouseLeave($this, holder, e) {\r\n        if (!$this.is(':focus')) {\r\n            let value = e.target.value;\r\n            const origValue = value;\r\n            const settings = holder.settingsClone;\r\n            settings.hasFocus = false;\r\n\r\n            if (settings.saveValueToSessionStorage) {\r\n                saveValueToPersistentStorage(e.target, settings, 'set');\r\n            }\r\n\r\n            if (settings.noSeparatorOnFocus === true) {\r\n                settings.digitGroupSeparator = settings.oSep;\r\n                settings.currencySymbol = settings.oSign;\r\n                settings.suffixText = settings.oSuffix;\r\n            }\r\n\r\n            if (settings.decimalPlacesShownOnFocus !== null) {\r\n                settings.decimalPlacesOverride = settings.oDec;\r\n                settings.allowDecimalPadding = settings.oPad;\r\n                settings.negativeBracketsTypeOnBlur = settings.oBracket;\r\n            }\r\n\r\n            value = stripAllNonNumberCharacters(value, settings, true);\r\n\r\n            if (value !== '') {\r\n                if (settings.trailingNegative && !isNegative(value)) {\r\n                    value = '-' + value;\r\n                    settings.trailingNegative = false;\r\n                }\r\n\r\n                const [minTest, maxTest] = checkIfInRangeWithOverrideOption(value, settings);\r\n                if (checkEmpty(value, settings, false) === null && minTest && maxTest) {\r\n                    value = modifyNegativeSignAndDecimalCharacterForRawValue(value, settings);\r\n                    settings.rawValue = cleanLeadingTrailingZeros(value, settings);\r\n\r\n                    if (settings.scaleDivisor) {\r\n                        value = value / settings.scaleDivisor;\r\n                        value = value.toString();\r\n                    }\r\n\r\n                    settings.decimalPlacesOverride = (settings.scaleDivisor && settings.scaleDecimalPlaces) ? Number(settings.scaleDecimalPlaces) : settings.decimalPlacesOverride;\r\n                    value = roundValue(value, settings);\r\n                    value = modifyNegativeSignAndDecimalCharacterForFormattedValue(value, settings);\r\n                } else {\r\n                    if (!minTest) {\r\n                        $this.trigger('autoNumeric:minExceeded');\r\n                    }\r\n                    if (!maxTest) {\r\n                        $this.trigger('autoNumeric:maxExceeded');\r\n                    }\r\n\r\n                    value = settings.rawValue;\r\n                }\r\n            } else {\r\n                if (settings.emptyInputBehavior === 'zero') {\r\n                    settings.rawValue = '0';\r\n                    value = roundValue('0', settings);\r\n                } else {\r\n                    settings.rawValue = '';\r\n                }\r\n            }\r\n\r\n            let groupedValue = checkEmpty(value, settings, false);\r\n            if (groupedValue === null) {\r\n                groupedValue = addGroupSeparators(value, settings);\r\n            }\r\n\r\n            if (groupedValue !== origValue) {\r\n                groupedValue = (settings.scaleSymbol) ? groupedValue + settings.scaleSymbol : groupedValue;\r\n                jQueryOriginalVal.call($this, groupedValue);\r\n            }\r\n\r\n            if (groupedValue !== holder.valueOnFocus) {\r\n                $this.change();\r\n                delete holder.valueOnFocus;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handler for 'paste' events\r\n     *\r\n     * @param {object} $this jQuery-selected DOM element\r\n     * @param {AutoNumericHolder} holder\r\n     * @param {Event} e\r\n     */\r\n    function onPaste($this, holder, e) {\r\n        //TODO Using ctrl+z after a paste should cancel it -> How would that affect other frameworks/component built with that feature in mind though?\r\n        //FIXME When pasting '000' on a thousand group selection, the whole selection gets deleted, and only one '0' is pasted (cf. issue #302)\r\n        // The event is prevented by default, since otherwise the user would be able to paste invalid characters into the input\r\n        e.preventDefault();\r\n\r\n        let rawPastedText = e.clipboardData.getData('text/plain');\r\n\r\n        // 0. Special case if the user has selected all the input text before pasting\r\n        const initialFormattedValue = e.target.value;\r\n        const selectionStart = e.target.selectionStart || 0;\r\n        const selectionEnd = e.target.selectionEnd || 0;\r\n        const selectionSize = selectionEnd - selectionStart;\r\n        let isAllInputTextSelected = false;\r\n\r\n        if (selectionSize === initialFormattedValue.length) {\r\n            isAllInputTextSelected = true;\r\n        }\r\n\r\n        // 1. Check if the paste has a negative sign (only if it's the first character), and store that information for later use\r\n        const isPasteNegative = isNegativeStrict(rawPastedText);\r\n        if (isPasteNegative) {\r\n            // 1a. Remove the negative sign from the pasted text\r\n            rawPastedText = rawPastedText.slice(1, rawPastedText.length);\r\n        }\r\n\r\n        // 2. Strip all thousand separators, brackets and currency sign, and convert the decimal character to a dot\r\n        const untranslatedPastedText = preparePastedText(rawPastedText, holder);\r\n\r\n        let pastedText;\r\n        if (untranslatedPastedText === '.') {\r\n            // Special case : If the user tries to paste a single decimal character (that has been translated to '.' already)\r\n            pastedText = '.';\r\n        } else {\r\n            // Normal case\r\n            // Allow pasting arabic numbers\r\n            pastedText = arabicToLatinNumbers(untranslatedPastedText, false, false, false);\r\n        }\r\n\r\n        // 3. Test if the paste is valid (only has numbers and eventually a decimal character). If it's not valid, stop here.\r\n        if (pastedText !== '.' && (!isNumber(pastedText) || pastedText === '')) {\r\n            if (holder.settings.onInvalidPaste === 'error') {\r\n                //TODO Should we send a warning instead of throwing an error?\r\n                throwError(`The pasted value '${rawPastedText}' is not a valid paste content.`);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        // 4. Calculate the paste result\r\n        let caretPositionOnInitialTextAfterPasting;\r\n        let initialUnformattedNumber;\r\n        if (e.target.value === '') {\r\n            // autoNumeric 'get' returns '0.00' if the input is empty, hence we need to store the 'real' empty initial value when needed\r\n            //FIXME This has been fixed in a previous commit, get should return '' on an empty input. Remove this unneeded 'if'\r\n            initialUnformattedNumber = '';\r\n        } else {\r\n            initialUnformattedNumber = $this.autoNumeric('get');\r\n        }\r\n        let isInitialValueNegative = isNegativeStrict(initialUnformattedNumber);\r\n        let isPasteNegativeAndInitialValueIsPositive;\r\n        let result;\r\n\r\n        // If the pasted content is negative, then the result will be negative too\r\n        if (isPasteNegative && !isInitialValueNegative) {\r\n            initialUnformattedNumber = `-${initialUnformattedNumber}`;\r\n            isInitialValueNegative = true;\r\n            isPasteNegativeAndInitialValueIsPositive = true;\r\n        }\r\n        else {\r\n            isPasteNegativeAndInitialValueIsPositive = false;\r\n        }\r\n\r\n        let leftPartContainedADot = false;\r\n        let leftPart;\r\n        let rightPart;\r\n        switch (holder.settings.onInvalidPaste) {\r\n            /* 4a. Truncate paste behavior:\r\n             * Insert as many numbers as possible on the right hand side of the caret from the pasted text content, until the input reach its range limit.\r\n             * If there is more characters in the clipboard once a limit is reached, drop the extraneous characters.\r\n             * Otherwise paste all the numbers in the clipboard.\r\n             * While doing so, we check if the result is within the minimum and maximum values allowed, and stop as soon as we encounter one of those.\r\n             *\r\n             * 4b. Replace paste behavior:\r\n             * Idem than the 'truncate' paste behavior, except that when a range limit is hit, we try to replace the subsequent initial numbers with the pasted ones, until we hit the range limit a second (and last) time, or we run out of numbers to paste\r\n             */\r\n            /* eslint no-case-declarations: 0 */\r\n            case 'truncate':\r\n            case 'replace':\r\n                const leftFormattedPart = initialFormattedValue.slice(0, selectionStart);\r\n                const rightFormattedPart = initialFormattedValue.slice(selectionEnd, initialFormattedValue.length);\r\n\r\n                if (selectionStart !== selectionEnd) {\r\n                    // a. If there is a selection, remove the selected part, and return the left and right part\r\n                    result = preparePastedText(leftFormattedPart + rightFormattedPart, holder);\r\n                } else {\r\n                    // b. Else if this is only one caret (and therefore no selection), then return the left and right part\r\n                    result = preparePastedText(initialFormattedValue, holder);\r\n                }\r\n\r\n                // Add back the negative sign if needed\r\n                if (isInitialValueNegative) {\r\n                    result = setRawNegativeSign(result);\r\n                }\r\n\r\n                // Build the unformatted result string\r\n                caretPositionOnInitialTextAfterPasting = convertCharacterCountToIndexPosition(countNumberCharactersOnTheCaretLeftSide(initialFormattedValue, selectionStart, holder.settings.decimalCharacter));\r\n                if (isPasteNegativeAndInitialValueIsPositive) {\r\n                    // If the initial paste is negative and the initial value is not, then I must offset the caret position by one place to the right to take the additional hyphen into account\r\n                    caretPositionOnInitialTextAfterPasting++;\r\n                    //TODO Quid if the negative sign is not on the left (negativePositiveSignPlacement and currencySymbolPlacement)?\r\n                }\r\n\r\n                leftPart = result.slice(0, caretPositionOnInitialTextAfterPasting);\r\n                rightPart = result.slice(caretPositionOnInitialTextAfterPasting, result.length);\r\n                if (pastedText === '.') {\r\n                    if (contains(leftPart, '.')) {\r\n                        // If I remove a dot here, then I need to update the caret position (decrement it by 1) when positioning it\r\n                        // To do so, we keep that info in order to modify the caret position later\r\n                        leftPartContainedADot = true;\r\n                        leftPart = leftPart.replace('.', '');\r\n                    }\r\n                    rightPart = rightPart.replace('.', '');\r\n                }\r\n                // -- Here, we are good to go to continue on the same basis\r\n\r\n                // c. Add numbers one by one at the caret position, while testing if the result is valid and within the range of the minimum and maximum value\r\n                //    Continue until you either run out of numbers to paste, or that you get out of the range limits\r\n                const minParse = parseStr(holder.settings.minimumValue);\r\n                const maxParse = parseStr(holder.settings.maximumValue);\r\n                let lastGoodKnownResult = result; // This is set as the default, in case we do not add even one number\r\n                let pastedTextIndex = 0;\r\n                let modifiedLeftPart = leftPart;\r\n\r\n                while (pastedTextIndex < pastedText.length) {\r\n                    // Modify the result with another pasted character\r\n                    modifiedLeftPart += pastedText[pastedTextIndex];\r\n                    result = modifiedLeftPart + rightPart;\r\n\r\n                    // Check the range limits\r\n                    if (!checkIfInRange(result, minParse, maxParse)) {\r\n                        // The result is out of the range limits, stop the loop here\r\n                        break;\r\n                    }\r\n\r\n                    // Save the last good known result\r\n                    lastGoodKnownResult = result;\r\n\r\n                    // Update the local variables for the next loop\r\n                    pastedTextIndex++;\r\n                }\r\n\r\n                // Update the last caret position where to insert a new number\r\n                caretPositionOnInitialTextAfterPasting += pastedTextIndex;\r\n\r\n                //XXX Here we have the result for the `truncate` option\r\n                if (holder.settings.onInvalidPaste === 'truncate') {\r\n                    //TODO If the user as defined a truncate callback and there are still some numbers (that will be dropped), then call this callback with the initial paste as well as the remaining numbers\r\n                    result = lastGoodKnownResult;\r\n\r\n                    if (leftPartContainedADot) {\r\n                        // If a dot has been removed for the part on the left of the caret, we decrement the caret index position\r\n                        caretPositionOnInitialTextAfterPasting--;\r\n                    }\r\n                    break;\r\n                }\r\n                //XXX ...else we need to continue modifying the result for the 'replace' option\r\n\r\n                // d. Until there are numbers to paste, replace the initial numbers one by one, and still do the range test.\r\n                //    Stop when you have no more numbers to paste, or if you are out of the range limits.\r\n                //    If you do get to the range limits, use the previous known good value within those limits.\r\n                //    Note: The numbers are replaced one by one, in the integer then decimal part, while ignoring the decimal character\r\n                //TODO What should happen if the user try to paste a decimal number? Should we override the current initial decimal character in favor of this new one? If we do, then we have to recalculate the vMin/vMax from the start in order to take into account this new decimal character position..\r\n                let lastGoodKnownResultIndex = caretPositionOnInitialTextAfterPasting;\r\n                const lastGoodKnownResultSize = lastGoodKnownResult.length;\r\n\r\n                while (pastedTextIndex < pastedText.length && lastGoodKnownResultIndex < lastGoodKnownResultSize) {\r\n                    if (lastGoodKnownResult[lastGoodKnownResultIndex] === '.') {\r\n                        // We skip the decimal character 'replacement'. That way, we do not change the decimal character position regarding the remaining numbers.\r\n                        lastGoodKnownResultIndex++;\r\n                        continue;\r\n                    }\r\n\r\n                    // This replace one character at a time\r\n                    result = replaceCharAt(lastGoodKnownResult, lastGoodKnownResultIndex, pastedText[pastedTextIndex]);\r\n\r\n                    // Check the range limits\r\n                    if (!checkIfInRange(result, minParse, maxParse)) {\r\n                        // The result is out of the range limits, stop the loop here\r\n                        break;\r\n                    }\r\n\r\n                    // Save the last good known result\r\n                    lastGoodKnownResult = result;\r\n\r\n                    // Update the local variables for the next loop\r\n                    pastedTextIndex++;\r\n                    lastGoodKnownResultIndex++;\r\n                }\r\n\r\n                // Update the last caret position where to insert a new number\r\n                caretPositionOnInitialTextAfterPasting = lastGoodKnownResultIndex;\r\n\r\n                if (leftPartContainedADot) {\r\n                    // If a dot has been removed for the part on the left of the caret, we decrement the caret index position\r\n                    caretPositionOnInitialTextAfterPasting--;\r\n                }\r\n\r\n                result = lastGoodKnownResult;\r\n\r\n                break;\r\n            /* 4c. Normal paste behavior:\r\n             * Insert the pasted number inside the current unformatted text, at the right caret position or selection\r\n             */\r\n            case 'error':\r\n            case 'ignore':\r\n            case 'clamp':\r\n            default:\r\n                // 1. Generate the unformatted result\r\n                const leftFormattedPart2 = initialFormattedValue.slice(0, selectionStart);\r\n                const rightFormattedPart2 = initialFormattedValue.slice(selectionEnd, initialFormattedValue.length);\r\n\r\n                if (selectionStart !== selectionEnd) {\r\n                    // a. If there is a selection, remove the selected part, and return the left and right part\r\n                    result = preparePastedText(leftFormattedPart2 + rightFormattedPart2, holder);\r\n                } else {\r\n                    // b. Else if this is only one caret (and therefore no selection), then return the left and right part\r\n                    result = preparePastedText(initialFormattedValue, holder);\r\n                }\r\n\r\n                // Add back the negative sign if needed\r\n                if (isInitialValueNegative) {\r\n                    result = setRawNegativeSign(result);\r\n                }\r\n\r\n                // Build the unformatted result string\r\n                caretPositionOnInitialTextAfterPasting = convertCharacterCountToIndexPosition(countNumberCharactersOnTheCaretLeftSide(initialFormattedValue, selectionStart, holder.settings.decimalCharacter));\r\n                if (isPasteNegativeAndInitialValueIsPositive) {\r\n                    // If the initial paste is negative and the initial value is not, then I must offset the caret position by one place to the right to take the additional hyphen into account\r\n                    caretPositionOnInitialTextAfterPasting++;\r\n                    //TODO Quid if the negative sign is not on the left (negativePositiveSignPlacement and currencySymbolPlacement)?\r\n                }\r\n\r\n                leftPart = result.slice(0, caretPositionOnInitialTextAfterPasting);\r\n                rightPart = result.slice(caretPositionOnInitialTextAfterPasting, result.length);\r\n                if (pastedText === '.') {\r\n                    // If the user only paste a single decimal character, then we remove the previously existing one (if any)\r\n                    if (contains(leftPart, '.')) {\r\n                        // If I remove a dot here, then I need to update the caret position (decrement it by 1) when positioning it\r\n                        // To do so, we keep that info in order to modify the caret position later\r\n                        leftPartContainedADot = true;\r\n                        leftPart = leftPart.replace('.', '');\r\n                    }\r\n                    rightPart = rightPart.replace('.', '');\r\n                }\r\n                // -- Here, we are good to go to continue on the same basis\r\n\r\n                // Generate the unformatted result\r\n                result = `${leftPart}${pastedText}${rightPart}`;\r\n\r\n                // 2. Calculate the caret position in the unformatted value, for later use\r\n                if (selectionStart === selectionEnd) {\r\n                    // There is no selection, then the caret position is set after the pasted text\r\n                    const indexWherePastedTextHasBeenInserted = convertCharacterCountToIndexPosition(countNumberCharactersOnTheCaretLeftSide(initialFormattedValue, selectionStart, holder.settings.decimalCharacter));\r\n                    caretPositionOnInitialTextAfterPasting = indexWherePastedTextHasBeenInserted + pastedText.length; // I must not count the characters that have been removed from the pasted text (ie. '.')\r\n                } else {\r\n                    if (isAllInputTextSelected) {\r\n                        // Special case when all the input text is selected before pasting, which means we'll completely erase its content and paste only the clipboard content\r\n                        caretPositionOnInitialTextAfterPasting = result.length;\r\n                    } else if (rightPart === '') {\r\n                        // If the user selected from the caret position to the end of the input (on the far right)\r\n                        caretPositionOnInitialTextAfterPasting = convertCharacterCountToIndexPosition(countNumberCharactersOnTheCaretLeftSide(initialFormattedValue, selectionStart, holder.settings.decimalCharacter)) + pastedText.length;\r\n                    } else {\r\n                        // Normal case\r\n                        const indexSelectionEndInRawValue = convertCharacterCountToIndexPosition(countNumberCharactersOnTheCaretLeftSide(initialFormattedValue, selectionEnd, holder.settings.decimalCharacter));\r\n\r\n                        // Here I must not count the characters that have been removed from the pasted text (ie. '.'), or the thousand separators in the initial selected text\r\n                        const selectedText = e.target.value.slice(selectionStart, selectionEnd);\r\n                        caretPositionOnInitialTextAfterPasting = indexSelectionEndInRawValue - selectionSize + countCharInText(holder.settings.digitGroupSeparator, selectedText) + pastedText.length;\r\n                    }\r\n                }\r\n\r\n                // Modify the caret position for special cases, only if the whole input has not been selected\r\n                if (!isAllInputTextSelected) {\r\n                    if (isPasteNegativeAndInitialValueIsPositive) {\r\n                        // If the pasted value has a '-' sign, but the initial value does not, offset the index by one\r\n                        caretPositionOnInitialTextAfterPasting++;\r\n                    }\r\n\r\n                    if (leftPartContainedADot) {\r\n                        // If a dot has been removed for the part on the left of the caret, we decrement the caret index position\r\n                        caretPositionOnInitialTextAfterPasting--;\r\n                    }\r\n                }\r\n        }\r\n\r\n        // 5. Check if the result is a valid number, if not, drop the paste and do nothing.\r\n        if (!isNumber(result) || result === '') {\r\n            if (holder.settings.onInvalidPaste === 'error') {\r\n                throwError(`The pasted value '${rawPastedText}' would result into an invalid content '${result}'.`); //TODO Should we send a warning instead of throwing an error?\r\n                //TODO This is not DRY ; refactor with above\r\n            }\r\n            return;\r\n        }\r\n\r\n        // 6. If it's a valid number, check if it falls inside the minimum and maximum value. If this fails, modify the value following this procedure :\r\n        /*\r\n         * If 'error' (this is the default) :\r\n         *      - Normal paste behavior.\r\n         *      - Try to set the new value, if it fails, then throw an error in the console.\r\n         *      - Do not change the input value, do not change the current selection.\r\n         * If 'ignore' :\r\n         *      - Normal paste behavior.\r\n         *      - Try to set the new value, if it fails, do nothing more.\r\n         *      - Do not change the input value, do not change the current selection.\r\n         * If 'clamp' :\r\n         *      - Normal paste behavior.\r\n         *      - Try to set the new value, if it fails, set the value to the minimum or maximum limit, whichever is closest to the\r\n         *        paste result.\r\n         *      - Change the caret position to be positioned on the left hand side of the decimal character.\r\n         * If 'truncate' :\r\n         *      - Truncate paste behavior.\r\n         *      - Try to set the new value, until it fails (if the result is out of the min and max value limits).\r\n         *      - Drop the remaining non-pasted numbers, and keep the last known non-failing result.\r\n         *      - Change the caret position to be positioned after the last pasted character.\r\n         * If 'replace' :\r\n         *      - Replace paste behavior.\r\n         *      - Try to set the new value, until it fails (if the result is out of the min and max value limits).\r\n         *     - Then try to replace as many numbers as possible with the pasted ones. Once it fails, keep the last known non-failing result.\r\n         *      - Change the caret position to be positioned after the last pasted character.\r\n         */\r\n        let valueHasBeenSet = false;\r\n        let valueHasBeenClamped = false;\r\n        try {\r\n            $this.autoNumeric('set', result);\r\n            valueHasBeenSet = true;\r\n        }\r\n        catch (error) {\r\n            let clampedValue;\r\n            switch (holder.settings.onInvalidPaste) {\r\n                case 'clamp':\r\n                    clampedValue = clampToRangeLimits(result, holder.settings);\r\n                    try {\r\n                        $this.autoNumeric('set', clampedValue);\r\n                    }\r\n                    catch (error) {\r\n                        throwError(`Fatal error: Unable to set the clamped value '${clampedValue}'.`);\r\n                    }\r\n\r\n                    valueHasBeenClamped = true;\r\n                    valueHasBeenSet = true;\r\n                    result = clampedValue; // This is used only for setting the caret position later\r\n                    break;\r\n                case 'error':\r\n                case 'truncate':\r\n                case 'replace':\r\n                    // Throw an error message\r\n                    throwError(`The pasted value '${rawPastedText}' results in a value '${result}' that is outside of the minimum [${holder.settings.minimumValue}] and maximum [${holder.settings.maximumValue}] value range.`);\r\n                // falls through\r\n                case 'ignore':\r\n                // Do nothing\r\n                // falls through\r\n                default :\r\n                    return; // ...and nothing else should be changed\r\n            }\r\n        }\r\n\r\n        // 7. Then lastly, set the caret position at the right logical place\r\n        let caretPositionInFormattedNumber;\r\n        if (valueHasBeenSet) {\r\n            switch (holder.settings.onInvalidPaste) {\r\n                case 'clamp':\r\n                    if (valueHasBeenClamped) {\r\n                        if (holder.settings.currencySymbolPlacement === 's') {\r\n                            setElementSelection(e.target, e.target.value.length - holder.settings.currencySymbol.length); // This puts the caret on the right of the last decimal place\r\n                        } else {\r\n                            setElementSelection(e.target, e.target.value.length); // ..and this on the far right\r\n                        }\r\n\r\n                        break;\r\n                    } // else if the value has not been clamped, the default behavior is used...\r\n                // falls through\r\n                case 'error':\r\n                case 'ignore':\r\n                case 'truncate':\r\n                case 'replace':\r\n                default :\r\n                    // Whenever one or multiple characters are pasted, this means we have to manage the potential thousand separators that could be added by the formatting\r\n                    caretPositionInFormattedNumber = findCaretPositionInFormattedNumber(result, caretPositionOnInitialTextAfterPasting, e.target.value, holder.settings.decimalCharacter);\r\n                    setElementSelection(e.target, caretPositionInFormattedNumber);\r\n            }\r\n        }\r\n\r\n        // 8. We make sure we send an input event only if the result is different than the initial value before the paste\r\n        if (valueHasBeenSet && initialFormattedValue !== e.target.value) {\r\n            // On a 'normal' non-autoNumeric input, an `input` event is sent when a paste is done. We mimic that.\r\n            triggerEvent('input', e.target);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handler for 'submit' events\r\n     *\r\n     * @param {object} $this jQuery-selected DOM element\r\n     * @param {AutoNumericHolder} holder\r\n     */\r\n    function onSubmit($this, holder) {\r\n        $this.closest('form').on('submit.autoNumeric', () => {\r\n            if (holder) {\r\n                const $settings = holder.settingsClone;\r\n\r\n                if ($settings.unformatOnSubmit) {\r\n                    jQueryOriginalVal.call($this, $settings.rawValue);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Return the jQuery selected input if the tag and type are supported by autoNumeric.\r\n     *\r\n     * @param {object} $this jQuery-selected DOM element\r\n     * @returns {boolean|*}\r\n     */\r\n    function getInputIfSupportedTagAndType($this) {\r\n        // Supported input type\r\n        const $input = $this.is('input[type=text], input[type=hidden], input[type=tel], input:not([type])');\r\n\r\n        // Checks for non-supported input types\r\n        if (!$input && $this.prop('tagName').toLowerCase() === 'input') {\r\n            throwError(`The input type \"${$this.prop('type')}\" is not supported by autoNumeric`);\r\n        }\r\n\r\n        // Checks for non-supported tags\r\n        const currentElementTag = $this.prop('tagName').toLowerCase();\r\n        if (currentElementTag !== 'input' && !isInArray(currentElementTag, allowedTagList)) {\r\n            throwError(`The <${currentElementTag}> tag is not supported by autoNumeric`);\r\n        }\r\n\r\n        return $input;\r\n    }\r\n\r\n    /**\r\n     * Formats the default value on page load.\r\n     * This is called only if the `formatOnPageLoad` option is set to `true`.\r\n     *\r\n     * @param {object} settings\r\n     * @param {object} $input jQuery-selected <input> element\r\n     * @param {object} $this jQuery-selected DOM element\r\n     */\r\n    function formatDefaultValueOnPageLoad(settings, $input, $this) {\r\n        let setValue = true;\r\n\r\n        if ($input) {\r\n            const currentValue = jQueryOriginalVal.call($this);\r\n            /*\r\n             * If the input value has been set by the dev, but not directly as an attribute in the html, then it takes\r\n             * precedence and should get formatted on init (if this input value is a valid number and that the\r\n             * developer wants it formatted on init (cf. `settings.formatOnPageLoad`)).\r\n             * Note; this is true whatever the developer has set for `data-an-default` in the html (asp.net users).\r\n             *\r\n             * In other words : if `defaultValueOverride` is not null, it means the developer is trying to prevent postback problems.\r\n             * But if `input.value` is set to a number, and `$this.attr('value')` is not set, then it means the dev has\r\n             * changed the input value, and then it means we should not overwrite his own decision to do so.\r\n             * Hence, if `defaultValueOverride` is not null, but `input.value` is a number and `$this.attr('value')` is not set,\r\n             * we should ignore `defaultValueOverride` altogether.\r\n             */\r\n            const unLocalizedCurrentValue = toNumericValue(currentValue, settings); // This allows to use a localized value on startup oDec\r\n            if (settings.formatOnPageLoad && currentValue !== '' && isUndefinedOrNullOrEmpty($this.attr('value'))) {\r\n                // Check if the `value` is valid or not\r\n                if (!isNaN(unLocalizedCurrentValue) && Infinity !== unLocalizedCurrentValue) {\r\n                    $this.autoNumeric('set', unLocalizedCurrentValue);\r\n                    setValue = false;\r\n                } else {\r\n                    // If not, inform the developer that nothing usable has been provided\r\n                    throwError(`The value [${currentValue}] used in the input is not a valid value autoNumeric can work with.`);\r\n                }\r\n            } else {\r\n                /* Checks for :\r\n                 * - page reload from back button, and\r\n                 * - ASP.net form post back\r\n                 *      The following HTML data attribute is REQUIRED (data-an-default=\"same value as the value attribute\")\r\n                 *      example: <asp:TextBox runat=\"server\" id=\"someID\" text=\"1234.56\" data-an-default=\"1234.56\">\r\n                 */\r\n                if ((settings.defaultValueOverride !== null && settings.defaultValueOverride.toString() !== currentValue) ||\r\n                    (settings.defaultValueOverride === null && currentValue !== '' && currentValue !== $this.attr('value')) ||\r\n                    (currentValue !== '' && $this.attr('type') === 'hidden' && !isNumber(unLocalizedCurrentValue))) {\r\n                    if ((settings.decimalPlacesShownOnFocus !== null && settings.saveValueToSessionStorage) ||\r\n                        (settings.scaleDivisor && settings.saveValueToSessionStorage)) {\r\n                        settings.rawValue = saveValueToPersistentStorage($this[0], settings, 'get');\r\n                    }\r\n\r\n                    // If the decimalPlacesShownOnFocus value should NOT be saved in sessionStorage\r\n                    if (!settings.saveValueToSessionStorage) {\r\n                        let toStrip;\r\n\r\n                        if (settings.negativeBracketsTypeOnBlur !== null && settings.negativeSignCharacter !== '') {\r\n                            settings.hasFocus = true;\r\n                            toStrip = toggleNegativeBracket(currentValue, settings);\r\n                        } else {\r\n                            toStrip = currentValue;\r\n                        }\r\n\r\n                        if ((settings.negativePositiveSignPlacement === 's' ||\r\n                            (settings.negativePositiveSignPlacement !== 'p' && settings.currencySymbolPlacement === 's')) &&\r\n                            settings.negativeSignCharacter !== '' &&\r\n                            isNegative(currentValue)) {\r\n                            settings.rawValue = settings.negativeSignCharacter + stripAllNonNumberCharacters(toStrip, settings, true);\r\n                        } else {\r\n                            settings.rawValue = stripAllNonNumberCharacters(toStrip, settings, true);\r\n                        }\r\n                    }\r\n\r\n                    setValue = false;\r\n                }\r\n            }\r\n\r\n            if (currentValue === '') {\r\n                switch (settings.emptyInputBehavior) {\r\n                    case 'focus':\r\n                        setValue = false;\r\n                        break;\r\n                    case 'always':\r\n                        jQueryOriginalVal.call($this, settings.currencySymbol);\r\n                        setValue = false;\r\n                        break;\r\n                    case 'zero':\r\n                        $this.autoNumeric('set', '0');\r\n                        setValue = false;\r\n                        break;\r\n                    default :\r\n                    //\r\n                }\r\n            } else if (setValue && currentValue === $this.attr('value')) {\r\n                $this.autoNumeric('set', currentValue);\r\n            }\r\n        }\r\n\r\n        if (isInArray($this.prop('tagName').toLowerCase(), settings.tagList) && $this.text() !== '') {\r\n            if (settings.defaultValueOverride !== null) {\r\n                if (settings.defaultValueOverride === $this.text()) {\r\n                    $this.autoNumeric('set', $this.text());\r\n                }\r\n            } else {\r\n                $this.autoNumeric('set', $this.text());\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enhance the user experience by modifying the default `negativePositiveSignPlacement` option depending on `currencySymbol` and `currencySymbolPlacement`.\r\n     *\r\n     * If the user has not set the placement of the negative sign (`negativePositiveSignPlacement`), but has set a currency symbol (`currencySymbol`),\r\n     * then we modify the default value of `negativePositiveSignPlacement` in order to keep the resulting output logical by default :\r\n     * - \"$-1,234.56\" instead of \"-$1,234.56\" ({currencySymbol: \"$\", negativePositiveSignPlacement: \"r\"})\r\n     * - \"-1,234.56$\" instead of \"1,234.56-$\" ({currencySymbol: \"$\", currencySymbolPlacement: \"s\", negativePositiveSignPlacement: \"p\"})\r\n     *\r\n     * @param {object} settings\r\n     */\r\n    function correctNegativePositiveSignPlacementOption(settings) {\r\n        // If negativePositiveSignPlacement is already set, we do not overwrite it\r\n        if (!isNull(settings.negativePositiveSignPlacement)) {\r\n            return;\r\n        }\r\n\r\n        if (!isUndefined(settings) &&\r\n            isUndefinedOrNullOrEmpty(settings.negativePositiveSignPlacement) &&\r\n            !isUndefinedOrNullOrEmpty(settings.currencySymbol)) {\r\n            switch (settings.currencySymbolPlacement) {\r\n                case 's':\r\n                    settings.negativePositiveSignPlacement = 'p'; // Default -1,234.56 €\r\n                    break;\r\n                case 'p':\r\n                    settings.negativePositiveSignPlacement = 'l'; // Default -$1,234.56\r\n                    break;\r\n                default :\r\n                //\r\n            }\r\n        } else {\r\n            // Sets the default value if `negativePositiveSignPlacement` is `null`\r\n            settings.negativePositiveSignPlacement = 'l';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Analyze and save the minimumValue and maximumValue integer size for later uses\r\n     *\r\n     * @param {object} settings\r\n     */\r\n    function calculateVMinAndVMaxIntegerSizes(settings) {\r\n        let [maximumValueIntegerPart] = settings.maximumValue.toString().split('.');\r\n        let [minimumValueIntegerPart] = (!settings.minimumValue && settings.minimumValue !== 0)?[]:settings.minimumValue.toString().split('.');\r\n        maximumValueIntegerPart = maximumValueIntegerPart.replace('-', '');\r\n        minimumValueIntegerPart = minimumValueIntegerPart.replace('-', '');\r\n\r\n        settings.mIntPos = Math.max(maximumValueIntegerPart.length, 1);\r\n        settings.mIntNeg = Math.max(minimumValueIntegerPart.length, 1);\r\n    }\r\n\r\n    /**\r\n     * Modify `decimalPlacesOverride` as needed\r\n     *\r\n     * @param {object} settings\r\n     */\r\n    function correctDecimalPlacesOverrideOption(settings) {\r\n        if (isNull(settings.decimalPlacesOverride)) {\r\n            settings.decimalPlacesOverride = maximumVMinAndVMaxDecimalLength(settings.minimumValue, settings.maximumValue);\r\n        }\r\n        settings.oDec = String(settings.decimalPlacesOverride);\r\n\r\n        // Most calculus assume `decimalPlacesOverride` is an integer, the following statement makes it clear (otherwise having it as a string leads to problems in rounding for instance)\r\n        settings.decimalPlacesOverride = Number(settings.decimalPlacesOverride);\r\n    }\r\n\r\n    /**\r\n     * Sets the alternative decimal separator key.\r\n     *\r\n     * @param {object} settings\r\n     */\r\n    function setsAlternativeDecimalSeparatorCharacter(settings) {\r\n        if (isNull(settings.decimalCharacterAlternative) && Number(settings.decimalPlacesOverride) > 0) {\r\n            if (settings.decimalCharacter === '.' && settings.digitGroupSeparator !== ',') {\r\n                settings.decimalCharacterAlternative = ',';\r\n            } else if (settings.decimalCharacter === ',' && settings.digitGroupSeparator !== '.') {\r\n                settings.decimalCharacterAlternative = '.';\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Caches regular expressions for stripAllNonNumberCharacters\r\n     *\r\n     * @param {object} settings\r\n     */\r\n    function cachesUsualRegularExpressions(settings) {\r\n        const allNumbersReg = '[0-9]';\r\n        const noAllNumbersReg = '[^0-9]';\r\n\r\n        // Test if there is a negative character in the string\r\n        const aNegReg = settings.negativeSignCharacter?`([-\\\\${settings.negativeSignCharacter}]?)`:'(-?)';\r\n        settings.aNegRegAutoStrip = aNegReg;\r\n\r\n        let negativeSignRegPart;\r\n        if (settings.negativeSignCharacter) {\r\n            negativeSignRegPart = `\\\\${settings.negativeSignCharacter}`;\r\n        } else {\r\n            negativeSignRegPart = '';\r\n        }\r\n        settings.skipFirstAutoStrip = new RegExp(`${aNegReg}[^-${negativeSignRegPart}\\\\${settings.decimalCharacter}${allNumbersReg}].*?(${allNumbersReg}|\\\\${settings.decimalCharacter}${allNumbersReg})`);\r\n        settings.skipLastAutoStrip = new RegExp(`(${allNumbersReg}\\\\${settings.decimalCharacter}?)[^\\\\${settings.decimalCharacter}${allNumbersReg}]${noAllNumbersReg}*$`);\r\n\r\n        const allowed = `-0123456789\\\\${settings.decimalCharacter}`;\r\n        settings.allowedAutoStrip = new RegExp(`[^${allowed}]`, 'g');\r\n        settings.numRegAutoStrip = new RegExp(`${aNegReg}(?:\\\\${settings.decimalCharacter}?(${allNumbersReg}+\\\\${settings.decimalCharacter}${allNumbersReg}+)|(${allNumbersReg}*(?:\\\\${settings.decimalCharacter}${allNumbersReg}*)?))`);\r\n\r\n        // Using this regex version `^${settings.aNegRegAutoStrip}0*(\\\\d|$)` entirely clear the input on blur\r\n        settings.stripReg = new RegExp(`^${settings.aNegRegAutoStrip}0*(${allNumbersReg})`);\r\n    }\r\n\r\n    /**\r\n     * Modify the user settings to make them 'exploitable' later.\r\n     *\r\n     * @param {object} settings\r\n     */\r\n    function transformOptionsValuesToDefaultTypes(settings) {\r\n        $.each(settings, (key, value) => {\r\n            // Convert the string 'true' and 'false' to real Boolean\r\n            if (value === 'true' || value === 'false') {\r\n                settings[key] = value === 'true';\r\n            }\r\n\r\n            // Convert numbers in options to strings\r\n            //TODO if a value is already of type 'Number', shouldn't we keep it as a number for further manipulation, instead of using a string?\r\n            if (typeof value === 'number' && key !== 'aScale') {\r\n                settings[key] = value.toString();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Convert the old settings options name to new ones.\r\n     *\r\n     * @param {object} options\r\n     */\r\n    function convertOldOptionsToNewOnes(options) {\r\n        //TODO Delete this function once the old options are not used anymore\r\n        const oldOptionsConverter = {\r\n            // Old option name, with their corresponding new option\r\n            aSep                         : 'digitGroupSeparator',\r\n            nSep                         : 'noSeparatorOnFocus',\r\n            dGroup                       : 'digitalGroupSpacing',\r\n            aDec                         : 'decimalCharacter',\r\n            altDec                       : 'decimalCharacterAlternative',\r\n            aSign                        : 'currencySymbol',\r\n            pSign                        : 'currencySymbolPlacement',\r\n            pNeg                         : 'negativePositiveSignPlacement',\r\n            aSuffix                      : 'suffixText',\r\n            oLimits                      : 'overrideMinMaxLimits',\r\n            vMax                         : 'maximumValue',\r\n            vMin                         : 'minimumValue',\r\n            mDec                         : 'decimalPlacesOverride',\r\n            eDec                         : 'decimalPlacesShownOnFocus',\r\n            scaleDecimal                 : 'scaleDecimalPlaces',\r\n            aStor                        : 'saveValueToSessionStorage',\r\n            mRound                       : 'roundingMethod',\r\n            aPad                         : 'allowDecimalPadding',\r\n            nBracket                     : 'negativeBracketsTypeOnBlur',\r\n            wEmpty                       : 'emptyInputBehavior',\r\n            lZero                        : 'leadingZero',\r\n            aForm                        : 'formatOnPageLoad',\r\n            sNumber                      : 'selectNumberOnly',\r\n            anDefault                    : 'defaultValueOverride',\r\n            unSetOnSubmit                : 'unformatOnSubmit',\r\n            outputType                   : 'outputFormat',\r\n            debug                        : 'showWarnings',\r\n            // Current options :\r\n            digitGroupSeparator          : true,\r\n            noSeparatorOnFocus           : true,\r\n            digitalGroupSpacing          : true,\r\n            decimalCharacter             : true,\r\n            decimalCharacterAlternative  : true,\r\n            currencySymbol               : true,\r\n            currencySymbolPlacement      : true,\r\n            negativePositiveSignPlacement: true,\r\n            showPositiveSign             : true,\r\n            suffixText                   : true,\r\n            overrideMinMaxLimits         : true,\r\n            maximumValue                 : true,\r\n            minimumValue                 : true,\r\n            decimalPlacesOverride        : true,\r\n            decimalPlacesShownOnFocus    : true,\r\n            scaleDivisor                 : true,\r\n            scaleDecimalPlaces           : true,\r\n            scaleSymbol                  : true,\r\n            saveValueToSessionStorage    : true,\r\n            onInvalidPaste               : true,\r\n            roundingMethod               : true,\r\n            allowDecimalPadding          : true,\r\n            selectAllOnFocusIfZero       : true,\r\n            negativeBracketsTypeOnBlur   : true,\r\n            emptyInputBehavior           : true,\r\n            leadingZero                  : true,\r\n            formatOnPageLoad             : true,\r\n            selectNumberOnly             : true,\r\n            defaultValueOverride         : true,\r\n            unformatOnSubmit             : true,\r\n            outputFormat                 : true,\r\n            showWarnings                 : true,\r\n            failOnUnknownOption          : true,\r\n            //FIXME Find a way to exclude those internal data from the settings object (ideally by using another object, or better yet, class attributes) -->\r\n            hasFocus             : true,\r\n            runOnce              : true,\r\n            rawValue             : true,\r\n            trailingNegative     : true,\r\n            caretFix             : true,\r\n            throwInput           : true,\r\n            strip                : true,\r\n            tagList              : true,\r\n            negativeSignCharacter: true,\r\n            positiveSignCharacter: true,\r\n            mIntPos              : true,\r\n            mIntNeg              : true,\r\n            oDec                 : true,\r\n            oPad                 : true,\r\n            oBracket             : true,\r\n            oSep                 : true,\r\n            oSign                : true,\r\n            oSuffix              : true,\r\n            aNegRegAutoStrip     : true,\r\n            skipFirstAutoStrip   : true,\r\n            skipLastAutoStrip    : true,\r\n            allowedAutoStrip     : true,\r\n            numRegAutoStrip      : true,\r\n            stripReg             : true,\r\n            holder               : true,\r\n        };\r\n\r\n        for (const option in options) {\r\n            if (options.hasOwnProperty(option)) {\r\n                if (oldOptionsConverter[option] === true) {\r\n                    // If the option is a 'new' option, we continue looping\r\n                    continue;\r\n                }\r\n\r\n                if (oldOptionsConverter.hasOwnProperty(option)) {\r\n                    // Else we have an 'old' option name\r\n                    warning(`You are using the deprecated option name '${option}'. Please use '${oldOptionsConverter[option]}' instead from now on. The old option name will be dropped soon.`, true);\r\n\r\n                    // Then we modify the initial option object to use the new options instead of the old ones\r\n                    options[oldOptionsConverter[option]] = options[option];\r\n                    delete options[option];\r\n                } else if (options.failOnUnknownOption) {\r\n                    // ...or the option name is unknown. This means there is a problem with the options object, therefore we throw an error.\r\n                    throwError(`Option name '${option}' is unknown. Please fix the options passed to autoNumeric`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Analyse the settings/options passed by the user, validate and clean them, then return them.\r\n     * Note: This returns `null` if somehow the settings returned by jQuery is not an object.\r\n     *\r\n     * @param {object} options\r\n     * @param {object} $this jQuery-selected DOM element\r\n     * @param {boolean} update - If TRUE, then the settings already exists and this function only updates them instead of recreating them from scratch\r\n     * @returns {object|null}\r\n     */\r\n    function getInitialSettings(options, $this, update = false) {\r\n        // Attempt to grab \"autoNumeric\" settings. If they do not exist, it returns \"undefined\".\r\n        let settings = $this.data('autoNumeric');\r\n\r\n        // If the user used old options, we convert them to new ones\r\n        if (update || !isNull(options)) {\r\n            convertOldOptionsToNewOnes(options);\r\n        }\r\n\r\n        if (update || isUndefined(settings)) {\r\n            if (update) {\r\n                // The settings are updated\r\n                settings = $.extend(settings, options);\r\n            } else {\r\n                // If we couldn't grab any settings, create them from the default ones and combine them with the options passed\r\n                // The settings are generated for the first time\r\n                // This also attempt to grab the HTML5 data. If it doesn't exist, we'll get \"undefined\"\r\n                const tagData = $this.data();\r\n                settings = $.extend({}, defaultSettings, tagData, options, {\r\n                    hasFocus             : false,\r\n                    runOnce              : false,\r\n                    rawValue             : '',\r\n                    trailingNegative     : false,\r\n                    caretFix             : false,\r\n                    androidSelectionStart: null,\r\n                    throwInput           : true, // Throw input event\r\n                    strip                : true,\r\n                    tagList              : allowedTagList,\r\n                });\r\n            }\r\n\r\n            // Modify the user settings to make them 'exploitable'\r\n            transformOptionsValuesToDefaultTypes(settings);\r\n\r\n            // Improve the `negativePositiveSignPlacement` option if needed\r\n            correctNegativePositiveSignPlacementOption(settings);\r\n\r\n            // Set the negative and positive signs, as needed\r\n            settings.negativeSignCharacter = settings.minimumValue < 0 ? '-' : '';\r\n            settings.positiveSignCharacter = settings.maximumValue >= 0 ? '+' : '';\r\n\r\n            // Additional changes to the settings object (from the original autoCode() function)\r\n            runCallbacksFoundInTheSettingsObject($this, settings);\r\n            calculateVMinAndVMaxIntegerSizes(settings);\r\n            correctDecimalPlacesOverrideOption(settings);\r\n            setsAlternativeDecimalSeparatorCharacter(settings);\r\n            cachesUsualRegularExpressions(settings);\r\n\r\n            // Validate the settings\r\n            validate(settings, false); // Throws if necessary\r\n\r\n            // Original settings saved for use when decimalPlacesShownOnFocus, scaleDivisor & noSeparatorOnFocus options are being used\r\n            keepAnOriginalSettingsCopy(settings);\r\n\r\n            // Save our new settings\r\n            $this.data('autoNumeric', settings);\r\n\r\n            return settings;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert the `value` parameter that can either be :\r\n     * - a real number,\r\n     * - a string representing a real number, or\r\n     * - a string representing a localized number (with specific group separators and decimal character),\r\n     * ...to a string representing a real 'javascript' number (ie. '1234' or '1234.567').\r\n     *\r\n     * This function returns `NaN` if such conversion fails.\r\n     *\r\n     * @param {int|float|string} value\r\n     * @param {object} settings\r\n     * @returns {string|NaN}\r\n     */\r\n    function toNumericValue(value, settings) {\r\n        let result;\r\n        if (isNumber(Number(value))) {\r\n            // The value has either already been stripped, or a 'real' javascript number is passed as a parameter\r\n            result = value;\r\n        } else {\r\n            // Else if it's a string that `Number()` cannot typecast, then we try to convert the localized numeric string to a numeric one\r\n            // Convert the value to a numeric string, stripping unnecessary characters in the process\r\n            result = convertToNumericString(value.toString(), settings);\r\n\r\n            // If the result is still not a numeric string, then we throw a warning\r\n            if (!isNumber(Number(result))) {\r\n                warning(`The value \"${value}\" being \"set\" is not numeric and therefore cannot be used appropriately.`, settings.showWarnings);\r\n                result = NaN;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Methods supported by autoNumeric\r\n     */\r\n    const methods = {\r\n        /**\r\n         * Method to initialize autoNumeric and attach the settings (options can be passed as a parameter)\r\n         * The options passed as a parameter is an object that contains the settings (ie. {digitGroupSeparator: \".\", decimalCharacter: \",\", currencySymbol: '€ '})\r\n         *\r\n         * @example\r\n         * $(someSelector).autoNumeric('init');            // Initiate autoNumeric with defaults\r\n         * $(someSelector).autoNumeric();                  // Initiate autoNumeric with defaults\r\n         * $(someSelector).autoNumeric('init', {options}); // Initiate autoNumeric with options\r\n         * $(someSelector).autoNumeric({options});         // Initiate autoNumeric with options\r\n         *\r\n         * @param {object} options\r\n         * @returns {*|{statements, branches, lines, functions, excludes, overrides}|{statements, branches, lines, functions, excludes}|{statements, lines, branches, functions, excludes}}\r\n         */\r\n        init(options) {\r\n            return this.each(function() {\r\n                const $this = $(this);\r\n                const $input = getInputIfSupportedTagAndType($this);\r\n\r\n                const settings = getInitialSettings(options, $this, false);\r\n                if (isNull(settings)) {\r\n                    return this;\r\n                }\r\n\r\n                // Create the AutoNumericHolder object that store the field properties\r\n                const holder = getAutoNumericHolder($this, settings, false);\r\n\r\n                if (!settings.runOnce && settings.formatOnPageLoad) {\r\n                    formatDefaultValueOnPageLoad(settings, $input, $this);\r\n                }\r\n\r\n                settings.runOnce = true;\r\n\r\n                // Add the events listeners to supported input types (\"text\", \"hidden\", \"tel\" and no type)\r\n                if ($input && $this.data('initialized') !== true) {\r\n                    const eventHandlers = {\r\n                        onFocusInAndMouseEnter: e => { onFocusInAndMouseEnter($this, holder, e); },\r\n                        onFocusOutAndMouseLeave: e => { onFocusOutAndMouseLeave($this, holder, e); },\r\n                        onKeydown: e => { onKeydown(holder, e); },\r\n                        onKeypress: e => { onKeypress(holder, e); },\r\n                        onInput: e => { onInput(holder, e); },\r\n                        onKeyup: e => { onKeyup(holder, settings, e); },\r\n                        onPaste: e => { onPaste($this, holder, e); },\r\n                        onJqFocus: () => { if (settings.selectAllOnFocusIfZero && $this.autoNumeric('getNumber') === 0) { setTimeout(() => $this.select(), 0); } },\r\n                    };\r\n                    const eventConfigs = [\r\n                        { name: 'focusin', handler: eventHandlers.onFocusInAndMouseEnter },\r\n                        { name: 'mouseenter', handler: eventHandlers.onFocusInAndMouseEnter },\r\n                        { name: 'blur', handler: eventHandlers.onFocusOutAndMouseLeave },\r\n                        { name: 'mouseleave', handler: eventHandlers.onFocusOutAndMouseLeave },\r\n                        { name: 'keydown', handler: eventHandlers.onKeydown },\r\n                        { name: 'keypress', handler: eventHandlers.onKeypress },\r\n                        { name: 'input', handler: eventHandlers.onInput },\r\n                        { name: 'keyup', handler: eventHandlers.onKeyup },\r\n                        { name: 'paste', handler: eventHandlers.onPaste },\r\n                    ];\r\n\r\n                    eventConfigs.forEach(eventConfig => this.addEventListener(eventConfig.name, eventConfig.handler, false));\r\n\r\n                    onSubmit($this, holder); //TODO Switch to `addEventListener'\r\n\r\n                    $this.on('focus', eventHandlers.onJqFocus);\r\n\r\n                    $this.data({\r\n                        initialized: true,\r\n                        misc: {\r\n                            removeAllEvents: el => {\r\n                                eventConfigs.forEach(eventConfig => el.removeEventListener(eventConfig.name, eventConfig.handler, false));\r\n\r\n                                $(el).off('focus', eventHandlers.onJqFocus);\r\n\r\n                                $(el).closest('form')\r\n                                    .off('.autoNumeric');\r\n                            },\r\n                        },\r\n                    });\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Method to stop and remove autoNumeric for the current element.\r\n         * Note: this does not remove the formatting.\r\n         *\r\n         * @example $(someSelector).autoNumeric(\"destroy\"); // Destroys autoNumeric on this selected element\r\n         *\r\n         * @param {Boolean} clearValue If TRUE, then this function clears the text box upon destruction.\r\n         * @returns {*|jQuery}\r\n         */\r\n        destroy(clearValue = false) {\r\n            return $(this).each(function() {\r\n                const $this = getCurrentElement(this);\r\n                const settings = $this.data('autoNumeric');\r\n                if (typeof settings === 'object') {\r\n                    jQueryOriginalVal.call($this, clearValue === true ? '' : $this.autoNumeric('get'));\r\n                    saveValueToPersistentStorage($this[0], settings, 'wipe');\r\n                    $this.data('misc').removeAllEvents(this);\r\n                    $this.removeData('autoNumeric', 'initialized', 'removeAllEvents');\r\n                    $this.off('.autoNumeric');\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Method to clear the value from sessionStorage (or cookie, depending on browser supports).\r\n         *\r\n         * @example $(someSelector).autoNumeric(\"wipe\"); // Removes session storage and cookies from memory\r\n         *\r\n         * @returns {*|jQuery}\r\n         */\r\n        wipe() {\r\n            return $(this).each(function() {\r\n                const $this = getCurrentElement(this);\r\n                const settings = $this.data('autoNumeric');\r\n                if (typeof settings === 'object') {\r\n                    jQueryOriginalVal.call($this, '');\r\n                    settings.rawValue = '';\r\n                    saveValueToPersistentStorage($this[0], settings, 'wipe');\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Method that updates the autoNumeric settings.\r\n         * It can be called multiple times if needed.\r\n         * The options passed as a parameter is an object that contains the settings (ie. {digitGroupSeparator: \".\", decimalCharacter: \",\", currencySymbol: '€ '}).\r\n         *\r\n         * @example $(someSelector).autoNumeric(\"update\", {options}); // Updates the settings\r\n         *\r\n         * @param {object} options\r\n         * @returns {*|jQuery}\r\n         */\r\n        update(options) {\r\n            return $(this).each(function() {\r\n                // Retrieve the current unformatted input value\r\n                const $this = getCurrentElement(this);\r\n                const strip = $this.autoNumeric('get');\r\n\r\n                // Update the settings\r\n                const settings = getInitialSettings(options, $this, true);\r\n\r\n                // Update the AutoNumericHolder object that store the field properties\r\n                getAutoNumericHolder($this, settings, true);\r\n\r\n                // Reformat the input value with the new settings\r\n                if (jQueryOriginalVal.call($this) !== '' || $this.text() !== '') {\r\n                    return $this.autoNumeric('set', strip);\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Method to format the value passed as a parameter.\r\n         * If the value is passed as a string, it can be an integer '1234' or a double '1234.56789'\r\n         * and must contain only numbers and one decimal (period) character\r\n         *\r\n         * @example $(someSelector).autoNumeric('set', '12345.67'); // Formats the value being passed as the second parameter\r\n         *\r\n         * @param {*} newValue\r\n         * @returns {*|jQuery}\r\n         */\r\n        set(newValue) {\r\n            return $(this).each(function() {\r\n                if (newValue === null || isUndefined(newValue)) {\r\n                    return;\r\n                }\r\n\r\n                //TODO This looks a lot like `getInputIfSupportedTagAndType()`. Is that necessary? Can the input element be changed since autoNumeric has been initialized?\r\n                const $this = getCurrentElement(this);\r\n                const settings = $this.data('autoNumeric');\r\n                if (typeof settings !== 'object') {\r\n                    throwError(`Initializing autoNumeric is required prior to calling the \"set\" method.`);\r\n                }\r\n                // Reset the trailing negative settings, since it's possible the previous value was negative, but not the newly set one\r\n                settings.trailingNegative = false;\r\n\r\n                const $input = $this.is('input[type=text], input[type=hidden], input[type=tel], input:not([type])');\r\n\r\n                let value = toNumericValue(newValue, settings);\r\n                if (isNaN(value)) {\r\n                    return jQueryOriginalVal.call($this, '');\r\n                }\r\n\r\n                if (value !== '') {\r\n                    const [minTest, maxTest] = checkIfInRangeWithOverrideOption(value, settings);\r\n                    // This test is needed by the showPositiveSign option\r\n                    const isZero = isZeroOrHasNoValue(value);\r\n                    if (isZero) {\r\n                        value = '0';\r\n                    }\r\n\r\n                    if (minTest && maxTest) {\r\n                        if ($input || isInArray($this.prop('tagName').toLowerCase(), settings.tagList)) {\r\n                            // to ensure rounding does not happen twice\r\n                            let hasBeenRounded = false;\r\n\r\n                            // rounds the the extended decimal places\r\n                            let tempDecimal;\r\n                            if (settings.decimalPlacesShownOnFocus) {\r\n                                tempDecimal = settings.decimalPlacesOverride;\r\n                                settings.decimalPlacesOverride = Number(settings.decimalPlacesShownOnFocus);\r\n                                value = roundValue(value, settings);\r\n                                hasBeenRounded = true;\r\n                                settings.decimalPlacesOverride = tempDecimal;\r\n                            }\r\n\r\n                            if (settings.scaleDivisor && !settings.onOff) {\r\n                                value = roundValue(value, settings);\r\n                                settings.rawValue = cleanLeadingTrailingZeros(value.replace(settings.decimalCharacter, '.'), settings);\r\n                                value = toNumericValue(value, settings);\r\n                                value = value / settings.scaleDivisor;\r\n                                value = value.toString();\r\n                                if (settings.scaleDecimalPlaces) {\r\n                                    tempDecimal = settings.decimalPlacesOverride;\r\n                                    settings.decimalPlacesOverride = Number(settings.scaleDecimalPlaces);\r\n                                    value = roundValue(value, settings);\r\n                                    hasBeenRounded = true;\r\n                                }\r\n                            }\r\n\r\n                            // Rounds if this has not been done already\r\n                            if (!hasBeenRounded) {\r\n                                value = roundValue(value, settings);\r\n                            }\r\n\r\n                            // Stores rawValue including the decimalPlacesShownOnFocus\r\n                            if (!settings.scaleDivisor) {\r\n                                settings.rawValue = cleanLeadingTrailingZeros(value.replace(settings.decimalCharacter, '.'), settings);\r\n                            }\r\n\r\n                            value = modifyNegativeSignAndDecimalCharacterForFormattedValue(value, settings);\r\n                            value = addGroupSeparators(value, settings);\r\n\r\n                            if (settings.scaleDivisor && settings.scaleDecimalPlaces && !settings.onOff) {\r\n                                settings.decimalPlacesOverride = tempDecimal;\r\n                            }\r\n                        }\r\n\r\n                        if (settings.saveValueToSessionStorage && (settings.decimalPlacesShownOnFocus || settings.scaleDivisor)) {\r\n                            saveValueToPersistentStorage($this[0], settings, 'set');\r\n                        }\r\n                    } else {\r\n                        settings.rawValue = '';\r\n                        saveValueToPersistentStorage($this[0], settings, 'wipe');\r\n                        const attemptedValue = value;\r\n                        value = '';\r\n                        if (!minTest) {\r\n                            $this.trigger('autoNumeric:minExceeded');\r\n                        }\r\n\r\n                        if (!maxTest) {\r\n                            $this.trigger('autoNumeric:maxExceeded');\r\n                        }\r\n\r\n                        throwError(`The value [${attemptedValue}] being set falls outside of the minimumValue [${settings.minimumValue}] and maximumValue [${settings.maximumValue}] range set for this element`);\r\n\r\n                        return jQueryOriginalVal.call($this, '');\r\n                    }\r\n                } else {\r\n                    return jQueryOriginalVal.call($this, '');\r\n                }\r\n\r\n                if (!settings.hasFocus && settings.scaleSymbol) {\r\n                    value = value + settings.scaleSymbol;\r\n                }\r\n\r\n                if ($input) {\r\n                    return jQueryOriginalVal.call($this, value);\r\n                }\r\n\r\n                if (isInArray($this.prop('tagName').toLowerCase(), settings.tagList)) {\r\n                    return $this.text(value);\r\n                }\r\n\r\n                return false;\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Method to un-format inputs.\r\n         * This is handy to use right before form submission.\r\n         *\r\n         * By default, values are returned as ISO numeric strings (ie. \"1234.56\" or \"-1234.56\"), where the decimal character is a period.\r\n         * Locale formats are supported \"1234.56-\" or \"1234,56\" or \"-1234,56 or \"1234,56-\", or even plain numbers.\r\n         * Please see option \"outputFormat\" for more details\r\n         *\r\n         * @example $(someSelector).autoNumeric('unSet');\r\n         *\r\n         * @returns {*|jQuery}\r\n         */\r\n        unSet() {\r\n            return $(this).each(function() {\r\n                const $this = getCurrentElement(this);\r\n                const settings = $this.data('autoNumeric');\r\n                if (typeof settings === 'object') {\r\n                    settings.hasFocus = true;\r\n                    jQueryOriginalVal.call($this, $this.autoNumeric('getLocalized'));\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Method to re-format inputs.\r\n         * This is handy to use right after form submission.\r\n         *\r\n         * This is called after the 'unSet' method to reformat the input\r\n         *\r\n         * @example $(someSelector).autoNumeric('reSet');\r\n         *\r\n         * @returns {*|jQuery}\r\n         */\r\n        reSet() {\r\n            return $(this).each(function() {\r\n                const $this = getCurrentElement(this);\r\n                const settings = $this.data('autoNumeric');\r\n                if (typeof settings === 'object') {\r\n                    $this.autoNumeric('set', jQueryOriginalVal.call($this));\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Return the unformatted value as a string.\r\n         *\r\n         * @usage $(someSelector).autoNumeric('get');\r\n         *\r\n         * @returns {string}\r\n         */\r\n        get() {\r\n            //TODO Why would we need to get a new reference to $this since it has been done in `init()`?\r\n            const $this = getCurrentElement(this);\r\n            //TODO This looks a lot like `getInputIfSupportedTagAndType()`. Is that necessary? Can the input element be changed since autoNumeric has been initialized?\r\n            const $input = $this.is('input[type=text], input[type=hidden], input[type=tel], input:not([type])');\r\n            const settings = $this.data('autoNumeric');\r\n            if (typeof settings !== 'object') {\r\n                throwError(`Initializing autoNumeric is required prior to calling the \"get\" method.`);\r\n            }\r\n\r\n            // determine the element type then use .eq(0) selector to grab the value of the first element in selector\r\n            let value = '';\r\n            if ($input) {\r\n                value = jQueryOriginalVal.call($this.eq(0));\r\n            } else if (isInArray($this.prop('tagName').toLowerCase(), settings.tagList)) {\r\n                value = $this.eq(0).text();\r\n            } else {\r\n                throwError(`The \"<${$this.prop('tagName').toLowerCase()}>\" tag is not supported by autoNumeric`);\r\n            }\r\n\r\n            if (settings.decimalPlacesShownOnFocus || settings.scaleDivisor) {\r\n                value = settings.rawValue;\r\n            } else {\r\n                // Test if the value is negative\r\n                const isValueNegative = isNegative(value);\r\n\r\n                if (!(/\\d/).test(value) && settings.emptyInputBehavior === 'focus') {\r\n                    return '';\r\n                }\r\n\r\n                if (value !== '' && settings.negativeBracketsTypeOnBlur !== null) {\r\n                    settings.hasFocus = true;\r\n                    value = toggleNegativeBracket(value, settings);\r\n                }\r\n\r\n                if (settings.runOnce || settings.formatOnPageLoad === false) {\r\n                    // Strips trailing negative symbol\r\n                    value = stripAllNonNumberCharacters(value, settings, true);\r\n                    // Trims leading and trailing zeros when leadingZero does NOT equal \"keep\".\r\n                    value = cleanLeadingTrailingZeros(value.replace(settings.decimalCharacter, '.'), settings);\r\n\r\n                    // Places the negative symbol in front of the trailing negative\r\n                    if (settings.trailingNegative && isValueNegative && !isNegative(value) && Number(value) !== 0) {\r\n                        value = '-' + value;\r\n                    }\r\n                }\r\n\r\n                if (value !== '' || value === '' && settings.emptyInputBehavior === 'zero') {\r\n                    value = modifyNegativeSignAndDecimalCharacterForRawValue(value, settings);\r\n                }\r\n            }\r\n\r\n            // Always return a numeric string\r\n            // This gets rid of the trailing zeros in the decimal places since `get` does not pad decimals\r\n            return trimPaddedZerosFromDecimalPlaces(value);\r\n        },\r\n\r\n        /**\r\n         * Returns the unformatted value, but following the `outputFormat` setting, which means the output can either be :\r\n         * - a string (that could or could not represent a number (ie. \"12345,67-\")), or\r\n         * - a plain number (if the setting 'number' is used).\r\n         *\r\n         * By default the returned values are an ISO numeric string \"1234.56\" or \"-1234.56\" where the decimal character is a period.\r\n         * Check the \"outputFormat\" option definition for more details.\r\n         *\r\n         * @usage $(someSelector).autoNumeric('getLocalized');\r\n         *\r\n         * @returns {*}\r\n         */\r\n        getLocalized() {\r\n            const $this = getCurrentElement(this);\r\n            let value = $this.autoNumeric('get');\r\n            const settings = $this.data('autoNumeric');\r\n\r\n            if (Number(value) === 0 && settings.leadingZero !== 'keep') {\r\n                value = '0';\r\n            }\r\n\r\n            return toLocale(value, settings.outputFormat);\r\n        },\r\n\r\n        /**\r\n         * Return the input unformatted value as a real Javascript number.\r\n         *\r\n         * @usage $(someSelector).autoNumeric('getNumber');\r\n         *\r\n         * @returns {number}\r\n         */\r\n        getNumber() {\r\n            const $this = getCurrentElement(this);\r\n            const value = $this.autoNumeric('get');\r\n\r\n            return toLocale(value, 'number');\r\n        },\r\n\r\n        /**\r\n         * Return the current formatted value of the autoNumeric element.\r\n         * @usage aNInput.autoNumeric('getFormatted'))\r\n         *\r\n         * @returns {string}\r\n         */\r\n        getFormatted() {\r\n            // Make sure `this[0]` exists as well as `.value` before trying to access that property\r\n            if (!this.hasOwnProperty('0') || !('value' in this[0])) {\r\n                throwError('Unable to get the formatted string from the element.');\r\n            }\r\n\r\n            return this[0].value;\r\n        },\r\n\r\n        /**\r\n         * The \"getString\" method uses jQuery's .serialize() method that creates a text string in standard URL-encoded notation.\r\n         *\r\n         * It then loops through the string and un-formats the inputs with autoNumeric.\r\n         * By defaults values returned as ISO numeric string \"1234.56\" or \"-1234.56\" where the decimal character is a period\r\n         * Locale formats are supported \"1234.56-\" or \"1234,56\" or \"-1234,56 or \"1234,56-\" or plain numbers => please see option \"outputFormat\" for details\r\n         *\r\n         * @returns {string}\r\n         */\r\n        getString() {\r\n            return _getStringOrArray(false, this);\r\n        },\r\n\r\n        /**\r\n         * The \"getArray\" method on the other hand uses jQuery's .serializeArray() method that creates array or objects that can be encoded as a JSON string.\r\n         *\r\n         * It then loops through the string and un-formats the inputs with autoNumeric.\r\n         * By defaults values returned as ISO numeric string \"1234.56\" or \"-1234.56\" where the decimal character is a period\r\n         * Locale formats are supported \"1234.56-\" or \"1234,56\" or \"-1234,56 or \"1234,56-\" or plain numbers => please see option \"outputFormat\" for details\r\n         *\r\n         * @returns {{}|[]}\r\n         */\r\n        getArray() {\r\n            return _getStringOrArray(true, this);\r\n        },\r\n\r\n        /**\r\n         * The 'getSettings' function returns an object containing all the current autoNumeric settings.\r\n         *\r\n         * @example\r\n         * $(someSelector).autoNumeric('getSettings');\r\n         * $(someSelector).autoNumeric('getSettings').decimalCharacter; // Return the decimalCharacter setting as a string - any valid option name can be used\r\n         *\r\n         * @returns {object}\r\n         */\r\n        getSettings() {\r\n            //TODO Add an option argument `optionName` to this function so that it return only the value of that option, not the entire settings object\r\n            return this.data('autoNumeric');\r\n        },\r\n    };\r\n\r\n    /**\r\n     * The autoNumeric function accepts methods names (in string format) and those method parameters if needed.\r\n     * It initialize autoNumeric on the given element.\r\n     *\r\n     * @param {string} method The method name (ie. 'set', 'get', etc.)\r\n     * @param {*} args\r\n     * @returns {*}\r\n     */\r\n    $.fn.autoNumeric = function(method, ...args) {\r\n        if (methods[method]) {\r\n            return methods[method].apply(this, args);\r\n        }\r\n\r\n        if (typeof method === 'object' || !method) {\r\n            // The options have been passed directly, without using a named method\r\n            return methods.init.apply(this, [method]);\r\n        }\r\n\r\n        throwError(`Method \"${method}\" is not supported by autoNumeric`);\r\n    };\r\n\r\n    /**\r\n     * Return the default autoNumeric settings.\r\n     *\r\n     * @returns {object}\r\n     */\r\n    getDefaultConfig = () => defaultSettings;\r\n\r\n    $.fn.autoNumeric.defaults = defaultSettings; // Make those settings public via jQuery too.\r\n\r\n    /**\r\n     * Return all the predefined language options in one object.\r\n     * You can also access a specific language object directly by using `an.getLanguages().French` for instance.\r\n     *\r\n     * @returns {object}\r\n     */\r\n    getLanguages = () => languageOption;\r\n\r\n    $.fn.autoNumeric.lang = languageOption; // Make those predefined language options public via jQuery too.\r\n\r\n    /**\r\n     * Public function that allows formatting without an element trigger.\r\n     *\r\n     * @param {number|string} value A number, or a string that represent a javascript number\r\n     * @param {object|null} options\r\n     * @returns {*}\r\n     */\r\n    autoFormat = (value, options = null) => {\r\n        if (isUndefined(value) || value === null) {\r\n            return null;\r\n        }\r\n\r\n        if (!isString(value) && !isNumber(value)) {\r\n            throwError(`The value \"${value}\" being \"set\" is not numeric and therefore cannot be used appropriately.`);\r\n        }\r\n\r\n        // Initiate a very basic settings object\r\n        const settings = $.extend({}, defaultSettings, { strip: false }, options);\r\n        if (value < 0) {\r\n            settings.negativeSignCharacter = '-';\r\n        }\r\n\r\n        if (isNull(settings.decimalPlacesOverride)) {\r\n            settings.decimalPlacesOverride = maximumVMinAndVMaxDecimalLength(settings.minimumValue, settings.maximumValue);\r\n        }\r\n\r\n        // Check the validity of the `value` parameter\r\n        // Convert the value to a numeric string, stripping unnecessary characters in the process\r\n        let valueString = toNumericValue(value, settings);\r\n        if (isNaN(valueString)) {\r\n            throwError(`The value [${valueString}] that you are trying to format is not a recognized number.`);\r\n        }\r\n\r\n        // Basic tests to check if the given valueString is valid\r\n        const [minTest, maxTest] = checkIfInRangeWithOverrideOption(valueString, settings);\r\n        if (!minTest || !maxTest) {\r\n            // Throw a custom event\r\n            triggerEvent('autoFormat.autoNumeric', document, `Range test failed`);\r\n            throwError(`The value [${valueString}] being set falls outside of the minimumValue [${settings.minimumValue}] and maximumValue [${settings.maximumValue}] range set for this element`);\r\n        }\r\n\r\n        // Everything is ok, proceed to rounding, formatting and grouping\r\n        valueString = roundValue(valueString, settings);\r\n        valueString = modifyNegativeSignAndDecimalCharacterForFormattedValue(valueString, settings);\r\n        valueString = addGroupSeparators(valueString, settings);\r\n\r\n        return valueString;\r\n    };\r\n\r\n    $.fn.autoFormat = autoFormat; // The jQuery export\r\n\r\n    /**\r\n     * Public function that allows unformatting without an element.\r\n     *\r\n     * @param {string|number} value\r\n     * @param {object} options\r\n     * @returns {*}\r\n     */\r\n    autoUnFormat = (value, options) => {\r\n        if (isUndefined(value) || value === null) {\r\n            return null;\r\n        }\r\n\r\n        // Giving an unformatted value should return the same unformatted value, whatever the options passed as a parameter\r\n        if (isNumber(value)) {\r\n            return Number(value);\r\n        }\r\n\r\n        if (isArray(value) || isObject(value)) { //TODO Complete the test to throw when given a wrongly formatted number (ie. 'foobar')\r\n            // Check the validity of the `value` parameter\r\n            throwError(`A number or a string representing a number is needed to be able to unformat it, [${value}] given.`);\r\n        }\r\n\r\n        const settings = $.extend({}, defaultSettings, { strip: false }, options);\r\n        const allowed = `-0123456789\\\\${settings.decimalCharacter}`;\r\n        const autoStrip = new RegExp(`[^${allowed}]`, 'gi');\r\n        value = value.toString();\r\n\r\n        // This checks is a negative sign is anywhere in the `value`, not just on the very first character (ie. '12345.67-')\r\n        if (isNegative(value)) {\r\n            settings.negativeSignCharacter = '-';\r\n        } else if (settings.negativeBracketsTypeOnBlur && settings.negativeBracketsTypeOnBlur.split(',')[0] === value.charAt(0)) {\r\n            settings.negativeSignCharacter = '-';\r\n            settings.hasFocus = true;\r\n            value = toggleNegativeBracket(value, settings);\r\n        }\r\n\r\n        value = value.replace(autoStrip, '');\r\n        value = value.replace(settings.decimalCharacter, '.');\r\n        value = toLocale(value, settings.outputFormat);\r\n\r\n        return value;\r\n    };\r\n\r\n    $.fn.autoUnformat = autoUnFormat; // The jQuery export\r\n\r\n    /**\r\n     * Validate the given option object.\r\n     * If the options are valid, this function returns nothing, otherwise if the options are invalid, this function throws an error.\r\n     *\r\n     * This tests if the options are not conflicting and are well formatted.\r\n     * This function is lenient since it only tests the settings properties ; it ignores any other properties the options object could have.\r\n     *\r\n     * @param {*} userOptions\r\n     * @param {Boolean} shouldExtendDefaultOptions If TRUE, then this function will extends the `userOptions` passed by the user, with the default options.\r\n     * @throws Error\r\n     */\r\n    validate = (userOptions, shouldExtendDefaultOptions = true) => {\r\n        if (isUndefinedOrNullOrEmpty(userOptions) || !isObject(userOptions) || isEmptyObj(userOptions)) {\r\n            throwError(`The userOptions are invalid ; it should be a valid object, [${userOptions}] given.`);\r\n        }\r\n\r\n        // If the user used old options, we convert them to new ones\r\n        if (!isNull(userOptions)) {\r\n            convertOldOptionsToNewOnes(userOptions);\r\n        }\r\n\r\n        // The user can choose if the `userOptions` has already been extended with the default options, or not\r\n        let options;\r\n        if (shouldExtendDefaultOptions) {\r\n            options = $.extend({}, defaultSettings, userOptions);\r\n        } else {\r\n            options = userOptions;\r\n        }\r\n\r\n        // First things first, we test that the `showWarnings` option is valid\r\n        if (!isTrueOrFalseString(options.showWarnings) && !isBoolean(options.showWarnings)) {\r\n            throwError(`The debug option 'showWarnings' is invalid ; it should be either 'false' or 'true', [${options.showWarnings}] given.`);\r\n        }\r\n\r\n        // Define the regular expressions needed for the following tests\r\n        const testPositiveInteger = /^[0-9]+$/;\r\n        const testNumericalCharacters = /[0-9]+/;\r\n        // const testFloatAndPossibleNegativeSign = /^-?[0-9]+(\\.?[0-9]+)$/;\r\n        const testFloatOrIntegerAndPossibleNegativeSign = /^-?[0-9]+(\\.?[0-9]+)?$/;\r\n        const testPositiveFloatOrInteger = /^[0-9]+(\\.?[0-9]+)?$/;\r\n\r\n        // Then tests the options individually\r\n        if (!isInArray(options.digitGroupSeparator, [\r\n            ',',      // Comma\r\n            '.',      // Dot\r\n            ' ',      // Normal space\r\n            '\\u2009', // Thin-space\r\n            '\\u202f', // Narrow no-break space\r\n            '\\u00a0', // No-break space\r\n            '',       // No separator\r\n            \"'\",      // Apostrophe\r\n            '٬',      // Arabic thousands separator\r\n            '˙',      // Dot above\r\n        ])) {\r\n            throwError(`The thousand separator character option 'digitGroupSeparator' is invalid ; it should be ',', '.', '٬', '˙', \"'\", ' ', '\\u2009', '\\u202f', '\\u00a0' or empty (''), [${options.digitGroupSeparator}] given.`);\r\n        }\r\n\r\n        if (!isTrueOrFalseString(options.noSeparatorOnFocus) && !isBoolean(options.noSeparatorOnFocus)) {\r\n            throwError(`The 'noSeparatorOnFocus' option is invalid ; it should be either 'false' or 'true', [${options.noSeparatorOnFocus}] given.`);\r\n        }\r\n\r\n        if (!testPositiveInteger.test(options.digitalGroupSpacing)) {\r\n            throwError(`The digital grouping for thousand separator option 'digitalGroupSpacing' is invalid ; it should be a positive integer, [${options.digitalGroupSpacing}] given.`);\r\n        }\r\n\r\n        if (!isInArray(options.decimalCharacter, [\r\n            ',', // Comma\r\n            '.', // Dot\r\n            '·', // Middle-dot\r\n            '٫', // Arabic decimal separator\r\n            '⎖', // Decimal separator key symbol\r\n        ])) {\r\n            throwError(`The decimal separator character option 'decimalCharacter' is invalid ; it should be '.', ',', '·', '⎖' or '٫', [${options.decimalCharacter}] given.`);\r\n        }\r\n\r\n        // Checks if the decimal and thousand characters are the same\r\n        if (options.decimalCharacter === options.digitGroupSeparator) {\r\n            throwError(`autoNumeric will not function properly when the decimal character 'decimalCharacter' [${options.decimalCharacter}] and the thousand separator 'digitGroupSeparator' [${options.digitGroupSeparator}] are the same character.`);\r\n        }\r\n\r\n        if (!isNull(options.decimalCharacterAlternative) && !isString(options.decimalCharacterAlternative)) {\r\n            throwError(`The alternate decimal separator character option 'decimalCharacterAlternative' is invalid ; it should be a string, [${options.decimalCharacterAlternative}] given.`);\r\n        }\r\n\r\n        if (options.currencySymbol !== '' && !isString(options.currencySymbol)) {\r\n            throwError(`The currency symbol option 'currencySymbol' is invalid ; it should be a string, [${options.currencySymbol}] given.`);\r\n        }\r\n\r\n        if (!isInArray(options.currencySymbolPlacement, ['p', 's'])) {\r\n            throwError(`The placement of the currency sign option 'currencySymbolPlacement' is invalid ; it should either be 'p' (prefix) or 's' (suffix), [${options.currencySymbolPlacement}] given.`);\r\n        }\r\n\r\n        if (!isInArray(options.negativePositiveSignPlacement, ['p', 's', 'l', 'r', null])) {\r\n            throwError(`The placement of the negative sign option 'negativePositiveSignPlacement' is invalid ; it should either be 'p' (prefix), 's' (suffix), 'l' (left), 'r' (right) or 'null', [${options.negativePositiveSignPlacement}] given.`);\r\n        }\r\n\r\n        if (!isTrueOrFalseString(options.showPositiveSign) && !isBoolean(options.showPositiveSign)) {\r\n            throwError(`The show positive sign option 'showPositiveSign' is invalid ; it should be either 'false' or 'true', [${options.showPositiveSign}] given.`);\r\n        }\r\n\r\n        if (!isString(options.suffixText) || (options.suffixText !== '' && (isNegative(options.suffixText) || testNumericalCharacters.test(options.suffixText)))) {\r\n            throwError(`The additional suffix option 'suffixText' is invalid ; it should not contains the negative sign '-' nor any numerical characters, [${options.suffixText}] given.`);\r\n        }\r\n\r\n        if (!isNull(options.overrideMinMaxLimits) && !isInArray(options.overrideMinMaxLimits, ['ceiling', 'floor', 'ignore'])) {\r\n            throwError(`The override min & max limits option 'overrideMinMaxLimits' is invalid ; it should either be 'ceiling', 'floor' or 'ignore', [${options.overrideMinMaxLimits}] given.`);\r\n        }\r\n\r\n        if (!isString(options.maximumValue) || !testFloatOrIntegerAndPossibleNegativeSign.test(options.maximumValue)) {\r\n            throwError(`The maximum possible value option 'maximumValue' is invalid ; it should be a string that represents a positive or negative number, [${options.maximumValue}] given.`);\r\n        }\r\n\r\n        if (!isString(options.minimumValue) || !testFloatOrIntegerAndPossibleNegativeSign.test(options.minimumValue)) {\r\n            throwError(`The minimum possible value option 'minimumValue' is invalid ; it should be a string that represents a positive or negative number, [${options.minimumValue}] given.`);\r\n        }\r\n\r\n        if (parseFloat(options.minimumValue) > parseFloat(options.maximumValue)) {\r\n            throwError(`The minimum possible value option is greater than the maximum possible value option ; 'minimumValue' [${options.minimumValue}] should be smaller than 'maximumValue' [${options.maximumValue}].`);\r\n        }\r\n\r\n        if (!(isNull(options.decimalPlacesOverride) ||\r\n            (isInt(options.decimalPlacesOverride) && options.decimalPlacesOverride >= 0) || // If integer option\r\n            (isString(options.decimalPlacesOverride) && testPositiveInteger.test(options.decimalPlacesOverride)))  // If string option\r\n        ) {\r\n            throwError(`The maximum number of decimal places option 'decimalPlacesOverride' is invalid ; it should be a positive integer, [${options.decimalPlacesOverride}] given.`);\r\n        }\r\n\r\n        // Write a warning message in the console if the number of decimal in minimumValue/maximumValue is overridden by decimalPlacesOverride (and not if decimalPlacesOverride is equal to the number of decimal used in minimumValue/maximumValue)\r\n        const vMinAndVMaxMaximumDecimalPlaces = maximumVMinAndVMaxDecimalLength(options.minimumValue, options.maximumValue);\r\n        if (!isNull(options.decimalPlacesOverride) && vMinAndVMaxMaximumDecimalPlaces !== Number(options.decimalPlacesOverride)) {\r\n            warning(`Setting 'decimalPlacesOverride' to [${options.decimalPlacesOverride}] will override the decimals declared in 'minimumValue' [${options.minimumValue}] and 'maximumValue' [${options.maximumValue}].`, options.showWarnings);\r\n        }\r\n\r\n        if (!options.allowDecimalPadding && !isNull(options.decimalPlacesOverride)) {\r\n            warning(`Setting 'allowDecimalPadding' to [false] will override the current 'decimalPlacesOverride' setting [${options.decimalPlacesOverride}].`, options.showWarnings);\r\n        }\r\n\r\n        if (!isNull(options.decimalPlacesShownOnFocus) && (!isString(options.decimalPlacesShownOnFocus) || !testPositiveInteger.test(options.decimalPlacesShownOnFocus))) {\r\n            throwError(`The number of expanded decimal places option 'decimalPlacesShownOnFocus' is invalid ; it should be a positive integer, [${options.decimalPlacesShownOnFocus}] given.`);\r\n        }\r\n\r\n        // Checks if the extended decimal places \"decimalPlacesShownOnFocus\" is greater than the normal decimal places \"decimalPlacesOverride\"\r\n        if (!isNull(options.decimalPlacesShownOnFocus) && !isNull(options.decimalPlacesOverride) && Number(options.decimalPlacesOverride) > Number(options.decimalPlacesShownOnFocus)) {\r\n            warning(`The extended decimal places 'decimalPlacesShownOnFocus' [${options.decimalPlacesShownOnFocus}] should be greater than the 'decimalPlacesOverride' [${options.decimalPlacesOverride}] value. Currently, this will limit the ability of your client to manually change some of the decimal places. Do you really want to do that?`, options.showWarnings);\r\n        }\r\n\r\n        if (!isNull(options.scaleDivisor) && !testPositiveFloatOrInteger.test(options.scaleDivisor)) {\r\n            throwError(`The scale divisor option 'scaleDivisor' is invalid ; it should be a positive number, preferably an integer, [${options.scaleDivisor}] given.`);\r\n        }\r\n\r\n        if (!isNull(options.scaleDecimalPlaces) && !testPositiveInteger.test(options.scaleDecimalPlaces)) {\r\n            throwError(`The scale number of decimals option 'scaleDecimalPlaces' is invalid ; it should be a positive integer, [${options.scaleDecimalPlaces}] given.`);\r\n        }\r\n\r\n        if (!isNull(options.scaleSymbol) && !isString(options.scaleSymbol)) {\r\n            throwError(`The scale symbol option 'scaleSymbol' is invalid ; it should be a string, [${options.scaleSymbol}] given.`);\r\n        }\r\n\r\n        if (!isTrueOrFalseString(options.saveValueToSessionStorage) && !isBoolean(options.saveValueToSessionStorage)) {\r\n            throwError(`The save to session storage option 'saveValueToSessionStorage' is invalid ; it should be either 'false' or 'true', [${options.saveValueToSessionStorage}] given.`);\r\n        }\r\n\r\n        if (!isInArray(options.onInvalidPaste, [\r\n            'error',\r\n            'ignore',\r\n            'clamp',\r\n            'truncate',\r\n            'replace',\r\n        ])) {\r\n            throwError(`The paste behavior option 'onInvalidPaste' is invalid ; it should either be 'error', 'ignore', 'clamp', 'truncate' or 'replace' (cf. documentation), [${options.onInvalidPaste}] given.`);\r\n        }\r\n\r\n        if (!isInArray(options.roundingMethod, [\r\n            'S',\r\n            'A',\r\n            's',\r\n            'a',\r\n            'B',\r\n            'U',\r\n            'D',\r\n            'C',\r\n            'F',\r\n            'N05',\r\n            'CHF',\r\n            'U05',\r\n            'D05',\r\n        ])) {\r\n            throwError(`The rounding method option 'roundingMethod' is invalid ; it should either be 'S', 'A', 's', 'a', 'B', 'U', 'D', 'C', 'F', 'N05', 'CHF', 'U05' or 'D05' (cf. documentation), [${options.roundingMethod}] given.`);\r\n        }\r\n\r\n        if (!isTrueOrFalseString(options.allowDecimalPadding) && !isBoolean(options.allowDecimalPadding)) {\r\n            throwError(`The control decimal padding option 'allowDecimalPadding' is invalid ; it should be either 'false' or 'true', [${options.allowDecimalPadding}] given.`);\r\n        }\r\n\r\n        if (!isTrueOrFalseString(options.selectAllOnFocusIfZero) && !isBoolean(options.selectAllOnFocusIfZero)) {\r\n            throwError(`The option 'selectAllOnFocusIfZero' is invalid ; it should be either 'false' or 'true', [${options.selectAllOnFocusIfZero}] given.`);\r\n        }\r\n\r\n        if (!isNull(options.negativeBracketsTypeOnBlur) && !isInArray(options.negativeBracketsTypeOnBlur, ['(,)', '[,]', '<,>', '{,}'])) {\r\n            throwError(`The brackets for negative values option 'negativeBracketsTypeOnBlur' is invalid ; it should either be '(,)', '[,]', '<,>' or '{,}', [${options.negativeBracketsTypeOnBlur}] given.`);\r\n        }\r\n\r\n        if (!isInArray(options.emptyInputBehavior, ['focus', 'press', 'always', 'zero'])) {\r\n            throwError(`The display on empty string option 'emptyInputBehavior' is invalid ; it should either be 'focus', 'press', 'always' or 'zero', [${options.emptyInputBehavior}] given.`);\r\n        }\r\n\r\n        if (!isInArray(options.leadingZero, ['allow', 'deny', 'keep'])) {\r\n            throwError(`The leading zero behavior option 'leadingZero' is invalid ; it should either be 'allow', 'deny' or 'keep', [${options.leadingZero}] given.`);\r\n        }\r\n\r\n        if (!isTrueOrFalseString(options.formatOnPageLoad) && !isBoolean(options.formatOnPageLoad)) {\r\n            throwError(`The format on initialization option 'formatOnPageLoad' is invalid ; it should be either 'false' or 'true', [${options.formatOnPageLoad}] given.`);\r\n        }\r\n\r\n        if (!isTrueOrFalseString(options.selectNumberOnly) && !isBoolean(options.selectNumberOnly)) {\r\n            throwError(`The select number only option 'selectNumberOnly' is invalid ; it should be either 'false' or 'true', [${options.selectNumberOnly}] given.`);\r\n        }\r\n\r\n        if (!isNull(options.defaultValueOverride) && (options.defaultValueOverride !== '' && !testFloatOrIntegerAndPossibleNegativeSign.test(options.defaultValueOverride))) {\r\n            throwError(`The unformatted default value option 'defaultValueOverride' is invalid ; it should be a string that represents a positive or negative number, [${options.defaultValueOverride}] given.`);\r\n        }\r\n\r\n        if (!isTrueOrFalseString(options.unformatOnSubmit) && !isBoolean(options.unformatOnSubmit)) {\r\n            throwError(`The remove formatting on submit option 'unformatOnSubmit' is invalid ; it should be either 'false' or 'true', [${options.unformatOnSubmit}] given.`);\r\n        }\r\n\r\n        if (!isNull(options.outputFormat) && !isInArray(options.outputFormat, [\r\n            'string',\r\n            'number',\r\n            '.',\r\n            '-.',\r\n            ',',\r\n            '-,',\r\n            '.-',\r\n            ',-',\r\n        ])) {\r\n            throwError(`The custom locale format option 'outputFormat' is invalid ; it should either be null, 'string', 'number', '.', '-.', ',', '-,', '.-' or ',-', [${options.outputFormat}] given.`);\r\n        }\r\n\r\n        if (!isTrueOrFalseString(options.failOnUnknownOption) && !isBoolean(options.failOnUnknownOption)) {\r\n            throwError(`The debug option 'failOnUnknownOption' is invalid ; it should be either 'false' or 'true', [${options.failOnUnknownOption}] given.`);\r\n        }\r\n    };\r\n\r\n    $.fn.autoValidate = validate;\r\n\r\n    /**\r\n     * Return TRUE is the settings/options are valid, FALSE otherwise.\r\n     *\r\n     * @param {object} options\r\n     * @returns {boolean}\r\n     */\r\n    areSettingsValid = function(options) {\r\n        let isValid = true;\r\n        try {\r\n            validate(options);\r\n        }\r\n        catch (error) {\r\n            isValid = false;\r\n        }\r\n\r\n        return isValid;\r\n    };\r\n\r\n    /**\r\n     * Take an arabic number as a string and return a javascript number.\r\n     * By default, this function does not try to convert the arabic decimal and thousand separator characters.\r\n     * This returns `NaN` is the conversion is not possible.\r\n     * Based on http://stackoverflow.com/a/17025392/2834898\r\n     *\r\n     * @param {string} arabicNumbers\r\n     * @param {boolean} returnANumber If `true`, return a Number, otherwise return a String\r\n     * @param {boolean} parseDecimalCharacter\r\n     * @param {boolean} parseThousandSeparator\r\n     * @returns {string|number|NaN}\r\n     */\r\n    function arabicToLatinNumbers(arabicNumbers, returnANumber = true, parseDecimalCharacter = false, parseThousandSeparator = false) {\r\n        let result = arabicNumbers.toString();\r\n        if (result === '' || result.match(/[٠١٢٣٤٥٦٧٨٩۴۵۶]/g) === null) {\r\n            // If no Arabic/Persian numbers are found, return the numeric string directly\r\n            return arabicNumbers;\r\n        }\r\n\r\n        if (parseDecimalCharacter) {\r\n            result = result.replace(/٫/, '.'); // Decimal character\r\n        }\r\n\r\n        if (parseThousandSeparator) {\r\n            result = result.replace(/٬/g, ''); // Thousand separator\r\n        }\r\n\r\n        // Replace the numbers only\r\n        result = result.replace(/[٠١٢٣٤٥٦٧٨٩]/g, d => d.charCodeAt(0) - 1632) // Arabic numbers\r\n                       .replace(/[۰۱۲۳۴۵۶۷۸۹]/g, d => d.charCodeAt(0) - 1776); // Persian numbers\r\n\r\n        // `NaN` has precedence over the string `'NaN'`\r\n        const resultAsNumber = Number(result);\r\n        if (isNaN(resultAsNumber)) {\r\n            return resultAsNumber;\r\n        }\r\n\r\n        if (returnANumber) {\r\n            result = resultAsNumber;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Create a custom event and immediately sent it from the given element.\r\n     * By default, if no element is given, the event is thrown from `document`.\r\n     *\r\n     * @param {string} eventName\r\n     * @param {Element} element\r\n     * @param {object} detail\r\n     */\r\n    function triggerEvent(eventName, element = document, detail = null) {\r\n        let event;\r\n        if (window.CustomEvent) {\r\n            event = new CustomEvent(eventName, { detail, bubbles: false, cancelable: false }); // This is not supported by default by IE ; We use the polyfill for IE9 and later.\r\n        } else {\r\n            event = document.createEvent('CustomEvent');\r\n            event.initCustomEvent(eventName, true, true, { detail });\r\n        }\r\n\r\n        element.dispatchEvent(event);\r\n    }\r\n\r\n    /**\r\n     * Polyfill from https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent for obsolete browsers (IE)\r\n     */\r\n    (function() {\r\n        if (typeof window.CustomEvent === 'function') {\r\n            return false;\r\n        }\r\n\r\n        function CustomEvent(event, params) {\r\n            params = params || { bubbles: false, cancelable: false, detail: void(0) };\r\n            const evt = document.createEvent('CustomEvent');\r\n            evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\r\n            return evt;\r\n        }\r\n\r\n        CustomEvent.prototype = window.Event.prototype;\r\n        window.CustomEvent = CustomEvent;\r\n    })();\r\n\r\n    $.extend(true, defaultSettings, $.fn.autoNumeric.lang.Turkish, { currencySymbol: '' });\r\n\r\n    // Hijack the original val fn in order to\r\n    // use $autoNumeric.val() and be able to get/set\r\n    // the unmasked value.\r\n    $.fn.val = function(value) {\r\n        const me = this;\r\n        const $me = $(me);\r\n\r\n        // If we're not dealing with an instance of autoNumeric,\r\n        // simply call the original jQuery.fn.val\r\n        if ($me.data('autoNumeric') == null) {\r\n            return jQueryOriginalVal.apply(me, arguments); // eslint-disable-line prefer-rest-params\r\n        }\r\n\r\n        if (!arguments.length) { // We're trying to read the numeric value\r\n            return $me.autoNumeric('get');\r\n        }\r\n        else { // We're trying to set a value\r\n            const originalVal = value;\r\n            let numericValue;\r\n\r\n            if (typeof value === 'string') {\r\n                value = value.trim().replace(',', '.');\r\n\r\n                if (value === '') {\r\n                    return $me;\r\n                }\r\n\r\n                numericValue = parseFloat(value, 10);\r\n\r\n                if (isNaN(numericValue)) {\r\n                    throw `\"${originalVal}\" is not a number.`;\r\n                }\r\n            }\r\n            else if (typeof value !== 'number') {\r\n                throw `The type \"${typeof value}\" is not supported.`;\r\n            }\r\n            else {\r\n                numericValue = value;\r\n            }\r\n\r\n            return $me.autoNumeric('set', numericValue);\r\n        }\r\n    };\r\n}));\r\n\r\n/**\r\n * This exports the interface for the autoNumeric object\r\n */\r\nexport default {\r\n    format  : autoFormat,\r\n    unFormat: autoUnFormat,\r\n    getDefaultConfig,\r\n    getLanguages,\r\n    validate, // an.validate(options) : throws if necessary\r\n    areSettingsValid, // an.areSettingsValid(options) : return true or false //TODO Is this redundant? Should we let the developers wrap each autoNumeric.validate() calls in try/catch block? Or should we just facilitate their life by doing it already?\r\n\r\n    //TODO Complete the interface with functions having the following signatures :\r\n    //init         : an.init(options, input)\r\n    //get          : an.get(input)\r\n    //set          : an.set(value, input)\r\n    //formString   : an.formString(form)\r\n    //formArray    : an.formArray(form)\r\n    //getFormatted : an.getFormatted(input)\r\n    //unset        : an.unset(input) //to rename to 'unformat'? (and merge with autoUnFormat/unFormat?)\r\n    //reformat     : an.reformat(input) // 'reSet' is very to close to 'reset' and therefore should be renamed. We could still expose 'reSet', but add a @deprecated tag on its declaration.\r\n    //settings     : an.settings(input)\r\n    //update       : an.update(options, input)\r\n    //wipe         : an.wipe(input)\r\n    //destroy      : an.destroy(input)\r\n\r\n    //raw          : an.raw(input) // Return the unformatted value as a string\r\n    //number       : an.number(input) // Return the unformatted value as a number (Warning: This can lead to precision problems with big numbers)\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/autoNumeric.js","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":\"jQuery\",\"commonjs\":\"jquery\",\"commonjs2\":\"jquery\",\"amd\":\"jquery\"}\n// module id = 1\n// module chunks = 0"],"sourceRoot":""}