{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///autoNumeric.min.js","webpack:///webpack/bootstrap 0baa34994e52e3ca2108","webpack:///./src/autoNumeric.js","webpack:///external {\"root\":\"jQuery\",\"commonjs\":\"jquery\",\"commonjs2\":\"jquery\",\"amd\":\"jquery\"}"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_1__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","jQuery","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","_slicedToArray","sliceIterator","arr","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","err","Array","isArray","_typeof","obj","constructor","jQueryOriginalVal","fn","val","autoFormat","autoUnFormat","getDefaultConfig","getLanguages","validate","areSettingsValid","allowedTagList","defaultSettings","digitGroupSeparator","noSeparatorOnFocus","digitalGroupSpacing","decimalCharacter","decimalCharacterAlternative","currencySymbol","currencySymbolPlacement","negativePositiveSignPlacement","showPositiveSign","suffixText","overrideMinMaxLimits","maximumValue","minimumValue","decimalPlacesOverride","decimalPlacesShownOnFocus","scaleDivisor","scaleDecimalPlaces","scaleSymbol","saveValueToSessionStorage","onInvalidPaste","roundingMethod","allowDecimalPadding","negativeBracketsTypeOnBlur","emptyInputBehavior","leadingZero","formatOnPageLoad","selectNumberOnly","defaultValueOverride","unformatOnSubmit","outputFormat","showWarnings","failOnUnknownOption","keyCode","Backspace","Tab","Enter","Shift","Ctrl","Alt","PauseBreak","CapsLock","Esc","Space","PageUp","PageDown","End","Home","LeftArrow","UpArrow","RightArrow","DownArrow","Insert","Delete","num0","num1","num2","num3","num4","num5","num6","num7","num8","num9","a","b","d","e","f","g","h","j","k","l","n","o","q","r","s","t","u","v","w","x","y","z","Windows","RightClick","numpad0","numpad1","numpad2","numpad3","numpad4","numpad5","numpad6","numpad7","numpad8","numpad9","MultiplyNumpad","PlusNumpad","MinusNumpad","DotNumpad","SlashNumpad","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","NumLock","ScrollLock","MyComputer","MyCalculator","Semicolon","Equal","Comma","Hyphen","Dot","Slash","Backquote","LeftBracket","Backslash","RightBracket","Quote","Command","AndroidDefault","keyName","Unidentified","AltGr","Fn","FnLock","Hyper","Meta","Super","SymbolLock","Clear","Copy","CrSel","Cut","EraseEof","ExSel","Paste","Redo","Undo","Accept","Again","Attn","Cancel","ContextMenu","Execute","Find","Finish","Help","Pause","Play","Props","Select","ZoomIn","ZoomOut","BrightnessDown","BrightnessUp","Eject","LogOff","Power","PowerOff","PrintScreen","Hibernate","Standby","WakeUp","Compose","Dead","Print","Minus","Plus","NumpadDot","NumpadDotAlt","NumpadMultiply","NumpadPlus","NumpadMinus","NumpadSlash","NumpadDotObsoleteBrowsers","NumpadMultiplyObsoleteBrowsers","NumpadPlusObsoleteBrowsers","NumpadMinusObsoleteBrowsers","NumpadSlashObsoleteBrowsers","defaultMinimumValue","defaultMaximumValue","defaultRoundingMethod","defaultLeadingZero","defaultSelectNumberOnly","languageOption","French","NorthAmerican","British","Swiss","Japanese","Turkish","Spanish","Chinese","apply","$","isNull","isUndefined","isUndefinedOrNullOrEmpty","isString","str","String","isBoolean","isTrueOrFalseString","lowercaseValue","toLowerCase","isObject","reference","isEmptyObj","prop","hasOwnProperty","isNumber","isNaN","parseFloat","isFinite","isInt","parseInt","preparePastedText","text","holder","stripAllNonNumberCharacters","settingsClone","replace","contains","needle","indexOf","isInArray","array","toString","Error","decimalPlaces","_str$split","split","_str$split2","decimalPart","keyCodeNumber","event","which","character","fromCharCode","result","checkIfInRange","parsedMinValue","parsedMaxValue","parsedValue","parseStr","testMinMax","isNegative","numericString","checkEverywhere","arguments","isNegativeStrict","charAt","isZeroOrHasNoValue","test","setRawNegativeSign","replaceCharAt","string","index","newCharacter","substr","clampToRangeLimits","settings","Math","max","min","countNumberCharactersOnTheCaretLeftSide","formattedNumberString","caretPosition","numberDotOrNegativeSign","RegExp","numberDotAndNegativeSignCount","findCaretPositionInFormattedNumber","rawNumberString","caretPositionInRawValue","formattedNumberStringSize","rawNumberStringSize","formattedNumberStringIndex","rawNumberStringIndex","countCharInText","charCounter","convertCharacterCountToIndexPosition","characterCount","getElementSelection","that","position","selectionStart","focus","select","document","selection","createRange","moveStart","end","start","selectionEnd","setElementSelection","range","createTextRange","collapse","moveEnd","throwError","message","warning","showWarning","console","warn","runCallbacksFoundInTheSettingsObject","$this","each","autoNumeric","maximumVMinAndVMaxDecimalLength","leftOrAll","skipFirstAutoStrip","trailingNegative","skipLastAutoStrip","allowedAutoStrip","match","numRegAutoStrip","join","nSign","_s$split","_s$split2","integerPart","modifiedIntegerPart","negativeSignCharacter","mIntPos","slice","mIntNeg","hasFocus","stripReg","toggleNegativeBracket","_settings$negativeBra","_settings$negativeBra2","firstBracket","lastBracket","convertToNumericString","lastIndexOf","temp","arabicToLatinNumbers","toLocale","locale","Number","modifyNegativeSignAndDecimalCharacterForRawValue","modifyNegativeSignAndDecimalCharacterForFormattedValue","checkEmpty","inputValue","signOnEmpty","addGroupSeparators","strip","empty","isValueNegative","isZero","digitalGroup","_inputValue$split","_inputValue$split2","_inputValue$split3","_inputValue$split4","substring","positiveSignCharacter","rawValue","truncateZeros","roundedInputValue","temporaryDecimalPlacesOverride","regex","roundValue","round","ceil","floor","ivRounded","dPos","inputValueHasADot","vdPos","cDec","zeros","rLength","tRound","odd","ivArray","truncateDecimal","isPaste","_s$split3","_s$split4","modifiedDecimalPart","nL","search","xc","yc","xNeg","checkIfInRangeWithOverrideOption","minParse","maxParse","valParse","getCurrentElement","element","getAutoNumericHolder","update","data","AutoNumericHolder","get","keepAnOriginalSettingsCopy","oDec","oPad","oBracket","oSep","oSign","oSuffix","readCookie","name","nameEQ","ca","cookie","storageTest","mod","sessionStorage","setItem","removeItem","cleanLeadingTrailingZeros","trimPaddedZerosFromDecimalPlaces","_numericString$split","_numericString$split2","trimmedDecimalPart","saveValueToPersistentStorage","action","storedName","decodeURIComponent","date","expires","Date","setTime","getTime","toUTCString","getItem","_getStringOrArray","getArrayBehavior","formIndex","allFormElements","aiIndex","scIndex","rSubmitterTypes","rSubmittable","rCheckableType","rNonAutoNumericTypes","count","field","localName","type","disabled","checked","formFields","serializeArray","scElement","testInput","_ret2","serialize","formParts","_formParts$i$split","_formParts$i$split2","inputName","modifiedInputValue","onFocusInAndMouseEnter","is","roundedValue","valueOnFocus","lastVal","onEmpty","onKeydown","_updateAutoNumericHolderEventKeycode","initialValueOnKeydown","readOnly","processed","eventKeyCode","triggerEvent","_updateAutoNumericHolderProperties","_skipAlways","_processCharacterDeletion","_formatValue","throwInput","preventDefault","formatted","onKeypress","eventCharacter","isCharacterInsertionAllowed","_processCharacterInsertion","onInput","androidSelectionStart","charCodeAt","androidCharEntered","decimalCharacterPosition","hasDecimalCharacter","onKeyup","skip","valuePartsBeforePaste","isOnAndroid","onFocusOutAndMouseLeave","origValue","_checkIfInRangeWithOv3","_checkIfInRangeWithOv4","minTest","maxTest","trigger","groupedValue","change","onPaste","rawPastedText","clipboardData","getData","initialFormattedValue","selectionSize","isAllInputTextSelected","isPasteNegative","untranslatedPastedText","pastedText","caretPositionOnInitialTextAfterPasting","initialUnformattedNumber","isInitialValueNegative","isPasteNegativeAndInitialValueIsPositive","leftPartContainedADot","leftPart","rightPart","leftFormattedPart","rightFormattedPart","lastGoodKnownResult","pastedTextIndex","modifiedLeftPart","lastGoodKnownResultIndex","lastGoodKnownResultSize","leftFormattedPart2","rightFormattedPart2","indexWherePastedTextHasBeenInserted","indexSelectionEndInRawValue","selectedText","valueHasBeenSet","valueHasBeenClamped","error","clampedValue","caretPositionInFormattedNumber","onBlur","onSubmit","closest","on","$settings","getInputIfSupportedTagAndType","$input","currentElementTag","formatDefaultValueOnPageLoad","setValue","currentValue","unLocalizedCurrentValue","toNumericValue","attr","Infinity","toStrip","tagList","correctNegativePositiveSignPlacementOption","calculateVMinAndVMaxIntegerSizes","_settings$maximumValu","_settings$maximumValu2","maximumValueIntegerPart","_ref3","_ref4","minimumValueIntegerPart","correctDecimalPlacesOverrideOption","setsAlternativeDecimalSeparatorCharacter","cachesUsualRegularExpressions","allNumbersReg","noAllNumbersReg","aNegReg","aNegRegAutoStrip","negativeSignRegPart","allowed","transformOptionsValuesToDefaultTypes","convertOldOptionsToNewOnes","options","oldOptionsConverter","aSep","nSep","dGroup","aDec","altDec","aSign","pSign","pNeg","aSuffix","oLimits","vMax","vMin","mDec","eDec","scaleDecimal","aStor","mRound","aPad","nBracket","wEmpty","lZero","aForm","sNumber","anDefault","unSetOnSubmit","outputType","debug","runOnce","caretFix","option","getInitialSettings","extend","tagData","NaN","arabicNumbers","returnANumber","parseDecimalCharacter","parseThousandSeparator","resultAsNumber","eventName","detail","window","CustomEvent","bubbles","cancelable","createEvent","initCustomEvent","dispatchEvent","$that","setReal","pos","_setSelection","left","right","_getLeftAndRightPartA","_getLeftAndRightPartAroundTheSelection","_getLeftAndRightPartA2","stripZeros","newValue","parts","_normalizeParts","_checkIfInRangeWithOv","_checkIfInRangeWithOv2","testValue","_setCaretPosition","currencySymbolLen","hasNeg","valueLen","signPosition","_getSignPosition","oldParts","_getLeftAndRightPartA3","_getLeftAndRightPartA4","_setValueParts","ctrlKey","metaKey","shiftKey","_checkPaste","negLen","suffixTextLen","_expandSelectionOnSign","_ref","_ref2","_getUnformattedLeftAn3","_getUnformattedLeftAndRightPartAroundTheSelection","_getUnformattedLeftAn4","_getUnformattedLeftAn","_getUnformattedLeftAn2","_processCharacterDele","_processCharacterDeletionIfTrailingNegativeSign","_processCharacterDele2","eventOrChar","_getUnformattedLeftAn5","_getUnformattedLeftAn6","eventNumber","_this","leftLength","_getUnformattedLeftAn7","_getUnformattedLeftAn8","_leftLength$split","_leftLength$split2","subParts","leftAr","shift","signParts","escapeChr","escapedParts","miniParts","leftReg","newLeft","input","methods","init","addEventListener","destroy","removeData","off","wipe","set","_checkIfInRangeWithOv5","_checkIfInRangeWithOv6","attemptedValue","hasBeenRounded","tempDecimal","onOff","unSet","reSet","eq","getLocalized","getNumber","getFormatted","getString","getArray","getSettings","method","_len","args","_key","defaults","lang","valueString","_checkIfInRangeWithOv7","_checkIfInRangeWithOv8","autoStrip","autoUnformat","userOptions","shouldExtendDefaultOptions","testPositiveInteger","testNumericalCharacters","testFloatOrIntegerAndPossibleNegativeSign","testPositiveFloatOrInteger","vMinAndVMaxMaximumDecimalPlaces","autoValidate","isValid","params","evt","Event","me","$me","originalVal","numericValue","default","format","unFormat"],"mappings":"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","file":"autoNumeric.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"jquery\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"jquery\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"autonumeric\"] = factory(require(\"jquery\"));\n\telse\n\t\troot[\"autonumeric\"] = factory(root[\"jQuery\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"jquery\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"jquery\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"autonumeric\"] = factory(require(\"jquery\"));\n\telse\n\t\troot[\"autonumeric\"] = factory(root[\"jQuery\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*** IMPORTS FROM imports-loader ***/\n\tvar jQuery = __webpack_require__(1);\n\tvar $ = __webpack_require__(1);\n\t(function() {\n\t\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\r\n\t *               autoNumeric.js\r\n\t *\r\n\t * @version      2.0.12\r\n\t * @date         2017-04-07 UTC 07:00\r\n\t *\r\n\t * @author       Bob Knothe\r\n\t * @contributors Alexandre Bonneau, Sokolov Yura and other Github users,\r\n\t *               cf. AUTHORS.md.\r\n\t * @copyright    2009 Robert J. Knothe http://www.decorplanit.com/plugin/\r\n\t * @since        2009-08-09\r\n\t *\r\n\t * @summary      autoNumeric is a library that provides live as-you-type\r\n\t *               formatting for international numbers and currencies.\r\n\t *\r\n\t *               Note : Some functions are borrowed from big.js\r\n\t * @link         https://github.com/MikeMcl/big.js/\r\n\t *\r\n\t * Please report any bugs to https://github.com/autoNumeric/autoNumeric\r\n\t *\r\n\t * @license      Released under the MIT License\r\n\t * @link         http://www.opensource.org/licenses/mit-license.php\r\n\t *\r\n\t * Permission is hereby granted, free of charge, to any person\r\n\t * obtaining a copy of this software and associated documentation\r\n\t * files (the \"Software\"), to deal in the Software without\r\n\t * restriction, including without limitation the rights to use,\r\n\t * copy, modify, merge, publish, distribute, sub license, and/or sell\r\n\t * copies of the Software, and to permit persons to whom the\r\n\t * Software is furnished to do so, subject to the following\r\n\t * conditions:\r\n\t *\r\n\t * The above copyright notice and this permission notice shall be\r\n\t * included in all copies or substantial portions of the Software.\r\n\t *\r\n\t * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n\t * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\r\n\t * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n\t * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n\t * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\n\t * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n\t * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\r\n\t * OTHER DEALINGS IN THE SOFTWARE.\r\n\t */\n\t\n\t/* global module, require, define */\n\t\n\tvar jQueryOriginalVal = jQuery.fn.val;\n\t\n\t// Functions names for ES6 exports\n\tvar autoFormat = void 0;\n\tvar autoUnFormat = void 0;\n\tvar getDefaultConfig = void 0;\n\tvar getLanguages = void 0;\n\tvar validate = void 0;\n\tvar areSettingsValid = void 0;\n\t\n\t// AutoNumeric default settings\n\t/**\r\n\t * List of allowed tag on which autoNumeric can be used.\r\n\t */\n\tvar allowedTagList = ['b', 'caption', 'cite', 'code', 'const', 'dd', 'del', 'div', 'dfn', 'dt', 'em', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'ins', 'kdb', 'label', 'li', 'option', 'output', 'p', 'q', 's', 'sample', 'span', 'strong', 'td', 'th', 'u'];\n\t\n\t/**\r\n\t * Defaults options are public - these can be overridden by the following method:\r\n\t * - HTML5 data attributes (ie. `<input type=\"text\" data-currency-symbol=\" €\">`)\r\n\t * - Options passed by the 'init' or 'update' methods (ie. `aNInput.autoNumeric('update', { currencySymbol: ' €' });`)\r\n\t * - Use jQuery's `$.extend` method for global changes - also a great way to pass ASP.NET current culture settings\r\n\t */\n\tvar defaultSettings = {\n\t    /* Allowed thousand grouping separator characters :\r\n\t     * ','      // Comma\r\n\t     * '.'      // Dot\r\n\t     * ' '      // Normal space\r\n\t     * '\\u2009' // Thin-space\r\n\t     * '\\u202f' // Narrow no-break space\r\n\t     * '\\u00a0' // No-break space\r\n\t     * ''       // No separator\r\n\t     * \"'\"      // Apostrophe\r\n\t     * '٬'      // Arabic thousands separator\r\n\t     * '˙'      // Dot above\r\n\t     * Deprecated older option name : aSep\r\n\t     */\n\t    digitGroupSeparator: ',',\n\t\n\t    /* Remove the thousand separator on focus, currency symbol and suffix on focus\r\n\t     * example if the input value \"$ 1,999.88 suffix\"\r\n\t     * on \"focusin\" it becomes \"1999.88\" and back to \"$ 1,999.88 suffix\" on focus out.\r\n\t     * Deprecated older option name : nSep\r\n\t     */\n\t    noSeparatorOnFocus: false,\n\t\n\t    /* Digital grouping for the thousand separator used in Format\r\n\t     * digitalGroupSpacing: \"2\", results in 99,99,99,999 India's lakhs\r\n\t     * digitalGroupSpacing: \"2s\", results in 99,999,99,99,999 India's lakhs scaled\r\n\t     * digitalGroupSpacing: \"3\", results in 999,999,999 default\r\n\t     * digitalGroupSpacing: \"4\", results in 9999,9999,9999 used in some Asian countries\r\n\t     * Deprecated older option name : dGroup\r\n\t     */\n\t    digitalGroupSpacing: '3',\n\t\n\t    /* Allowed decimal separator characters :\r\n\t     * ',' : Comma\r\n\t     * '.' : Dot\r\n\t     * '·' : Middle-dot\r\n\t     * '٫' : Arabic decimal separator\r\n\t     * '⎖' : Decimal separator key symbol\r\n\t     * Deprecated older option name : aDec\r\n\t     */\n\t    decimalCharacter: '.',\n\t\n\t    /* Allow to declare an alternative decimal separator which is automatically replaced by `decimalCharacter` when typed.\r\n\t     * This is used by countries that use a comma \",\" as the decimal character and have keyboards\\numeric pads that have\r\n\t     * a period 'full stop' as the decimal characters (France or Spain for instance).\r\n\t     * Deprecated older option name : altDec\r\n\t     */\n\t    decimalCharacterAlternative: null,\n\t\n\t    /* currencySymbol = allowed currency symbol\r\n\t     * Must be in quotes currencySymbol: \"$\"\r\n\t     * space to the right of the currency symbol currencySymbol: '$ '\r\n\t     * space to the left of the currency symbol currencySymbol: ' $'\r\n\t     * Deprecated older option name : aSign\r\n\t     */\n\t    currencySymbol: '',\n\t\n\t    /* currencySymbolPlacement = placement of currency sign as a p=prefix or s=suffix\r\n\t     * for prefix currencySymbolPlacement: \"p\" (default)\r\n\t     * for suffix currencySymbolPlacement: \"s\"\r\n\t     * Deprecated older option name : pSign\r\n\t     */\n\t    //TODO Rename the options to more explicit names ('p' => 'prefix', etc.)\n\t    currencySymbolPlacement: 'p',\n\t\n\t    /* Placement of negative/positive sign relative to the currencySymbol option l=left, r=right, p=prefix & s=suffix\r\n\t     * -1,234.56  => default no options required\r\n\t     * -$1,234.56 => {currencySymbol: \"$\"} or {currencySymbol: \"$\", negativePositiveSignPlacement: \"l\"}\r\n\t     * $-1,234.56 => {currencySymbol: \"$\", negativePositiveSignPlacement: \"r\"} // Default if negativePositiveSignPlacement is 'null' and currencySymbol is not empty\r\n\t     * -1,234.56$ => {currencySymbol: \"$\", currencySymbolPlacement: \"s\", negativePositiveSignPlacement: \"p\"} // Default if negativePositiveSignPlacement is 'null' and currencySymbol is not empty\r\n\t     * 1,234.56-  => {negativePositiveSignPlacement: \"s\"}\r\n\t     * $1,234.56- => {currencySymbol: \"$\", negativePositiveSignPlacement: \"s\"}\r\n\t     * 1,234.56-$ => {currencySymbol: \"$\", currencySymbolPlacement: \"s\"}\r\n\t     * 1,234.56$- => {currencySymbol: \"$\", currencySymbolPlacement: \"s\", negativePositiveSignPlacement: \"r\"}\r\n\t     * Deprecated older option name : pNeg\r\n\t     */\n\t    //TODO Rename the options to more explicit names ('p' => 'prefix', etc.)\n\t    negativePositiveSignPlacement: null,\n\t\n\t    /* Allow the positive sign symbol `+` to be displayed for positive numbers.\r\n\t     * By default, this positive sign is not shown.\r\n\t     * The sign placement is controlled by the 'negativePositiveSignPlacement' option, mimicking the negative sign placement rules.\r\n\t     */\n\t    showPositiveSign: false,\n\t\n\t    /* Additional suffix\r\n\t     * Must be in quotes suffixText: 'gross', a space is allowed suffixText: ' dollars'\r\n\t     * Numeric characters and negative sign not allowed'\r\n\t     * Deprecated older option name : aSuffix\r\n\t     */\n\t    suffixText: '',\n\t\n\t    /* Override min max limits\r\n\t     * overrideMinMaxLimits: \"ceiling\" adheres to maximumValue and ignores minimumValue settings\r\n\t     * overrideMinMaxLimits: \"floor\" adheres to minimumValue and ignores maximumValue settings\r\n\t     * overrideMinMaxLimits: \"ignore\" ignores both minimumValue & maximumValue\r\n\t     * Deprecated older option name : oLimits\r\n\t     */\n\t    overrideMinMaxLimits: null,\n\t\n\t    /* Maximum possible value\r\n\t     * value must be enclosed in quotes and use the period for the decimal point\r\n\t     * value must be larger than minimumValue\r\n\t     * Deprecated older option name : vMax\r\n\t     */\n\t    maximumValue: '9999999999999.99', // 9.999.999.999.999,99 ~= 10000 billions\n\t\n\t    /* Minimum possible value\r\n\t     * value must be enclosed in quotes and use the period for the decimal point\r\n\t     * value must be smaller than maximumValue\r\n\t     * Deprecated older option name : vMin\r\n\t     */\n\t    minimumValue: '-9999999999999.99', // -9.999.999.999.999,99 ~= 10000 billions\n\t\n\t    /* Maximum number of decimal places = used to override decimal places set by the minimumValue & maximumValue values\r\n\t     * Deprecated older option name : mDec\r\n\t     */\n\t    decimalPlacesOverride: null,\n\t\n\t    /* Expanded decimal places visible when input has focus - example:\r\n\t     * {decimalPlacesShownOnFocus: \"5\"} and the default 2 decimal places with focus \"1,000.12345\" without focus \"1,000.12\" the results depends on the rounding method used\r\n\t     * the \"get\" method returns the extended decimal places\r\n\t     * Deprecated older option name : eDec\r\n\t     */\n\t    decimalPlacesShownOnFocus: null,\n\t\n\t    /* The next three options (scaleDivisor, scaleDecimalPlaces & scaleSymbol) handle scaling of the input when the input does not have focus\r\n\t     * Please note that the non-scaled value is held in data and it is advised that you use the \"saveValueToSessionStorage\" option to ensure retaining the value\r\n\t     * [\"divisor\", \"decimal places\", \"symbol\"]\r\n\t     * Example: with the following options set {scaleDivisor: '1000', scaleDecimalPlaces: '1', scaleSymbol: ' K'}\r\n\t     * Example: focusin value \"1,111.11\" focusout value \"1.1 K\"\r\n\t     */\n\t\n\t    /* The `scaleDivisor` decides the on focus value and places the result in the input on focusout\r\n\t     * Example {scaleDivisor: '1000'} or <input data-scale-divisor=\"1000\">\r\n\t     * The divisor value - does not need to be whole number but please understand that Javascript has limited accuracy in math\r\n\t     * The \"get\" method returns the full value, including the 'hidden' decimals.\r\n\t     */\n\t    scaleDivisor: null,\n\t\n\t    /*\r\n\t     * The `scaleDecimalPlaces` option is the number of decimal place when not in focus - for this to work, `scaledDivisor` must not be `null`.\r\n\t     * This is optional ; if omitted the decimal places will be the same when the input has the focus.\r\n\t     * Deprecated older option name : scaleDecimal\r\n\t     */\n\t    scaleDecimalPlaces: null,\n\t\n\t    /*\r\n\t     * The `scaleSymbol` option is a symbol placed as a suffix when not in focus.\r\n\t     * This is optional too.\r\n\t     */\n\t    scaleSymbol: null,\n\t\n\t    /* Set to true to allow the decimalPlacesShownOnFocus value to be saved with sessionStorage\r\n\t     * if ie 6 or 7 the value will be saved as a session cookie\r\n\t     * Deprecated older option name : aStor\r\n\t     */\n\t    saveValueToSessionStorage: false,\n\t\n\t    /*\r\n\t     * Manage how autoNumeric react when the user tries to paste an invalid number.\r\n\t     * - 'error'    : (This is the default behavior) The input value is not changed and an error is output in the console.\r\n\t     * - 'ignore'   : idem than 'error', but fail silently without outputting any error/warning in the console.\r\n\t     * - 'clamp'    : if the pasted value is either too small or too big regarding the minimumValue and maximumValue range, then the result is clamped to those limits.\r\n\t     * - 'truncate' : autoNumeric will insert as many pasted numbers it can at the initial caret/selection, until everything is pasted, or the range limit is hit.\r\n\t     *                The non-pasted numbers are dropped and therefore not used at all.\r\n\t     * - 'replace'  : autoNumeric will first insert as many pasted numbers it can at the initial caret/selection, then if the range limit is hit, it will try\r\n\t     *                to replace one by one the remaining initial numbers (on the right side of the caret) with the rest of the pasted numbers.\r\n\t     *\r\n\t     * Note 1 : A paste content starting with a negative sign '-' will be accepted anywhere in the input, and will set the resulting value as a negative number\r\n\t     * Note 2 : A paste content starting with a number will be accepted, even if the rest is gibberish (ie. '123foobar456').\r\n\t     *          Only the first number will be used (here '123').\r\n\t     * Note 3 : The paste event works with the `decimalPlacesShownOnFocus` option too.\r\n\t     */\n\t    //TODO Shouldn't we use `truncate` as the default value?\n\t    onInvalidPaste: 'error',\n\t\n\t    /* method used for rounding\r\n\t     * roundingMethod: \"S\", Round-Half-Up Symmetric (default)\r\n\t     * roundingMethod: \"A\", Round-Half-Up Asymmetric\r\n\t     * roundingMethod: \"s\", Round-Half-Down Symmetric (lower case s)\r\n\t     * roundingMethod: \"a\", Round-Half-Down Asymmetric (lower case a)\r\n\t     * roundingMethod: \"B\", Round-Half-Even \"Bankers Rounding\"\r\n\t     * roundingMethod: \"U\", Round Up \"Round-Away-From-Zero\"\r\n\t     * roundingMethod: \"D\", Round Down \"Round-Toward-Zero\" - same as truncate\r\n\t     * roundingMethod: \"C\", Round to Ceiling \"Toward Positive Infinity\"\r\n\t     * roundingMethod: \"F\", Round to Floor \"Toward Negative Infinity\"\r\n\t     * roundingMethod: \"N05\" Rounds to the nearest .05 => same as \"CHF\" used in 1.9X and still valid\r\n\t     * roundingMethod: \"U05\" Rounds up to next .05\r\n\t     * roundingMethod: \"D05\" Rounds down to next .05\r\n\t     * Deprecated older option name : mRound\r\n\t     */\n\t    //TODO Rename the options to more explicit names ('S' => 'RoundHalfUpSymmetric', etc.)\n\t    //TODO Add an `an.roundingMethod` object that enum those options clearly\n\t    roundingMethod: 'S',\n\t\n\t    /* Allow padding the decimal places with zeros\r\n\t     * allowDecimalPadding: true - always Pad decimals with zeros\r\n\t     * allowDecimalPadding: false - does not pad with zeros.\r\n\t     * Note: setting allowDecimalPadding to 'false' will override the 'decimalPlacesOverride' setting.\r\n\t     *\r\n\t     * thanks to Jonas Johansson for the suggestion\r\n\t     * Deprecated older option name : aPad\r\n\t     */\n\t    allowDecimalPadding: true,\n\t\n\t    /* Adds brackets on negative values (ie. transforms '-$ 999.99' to '(999.99)')\r\n\t     * Those brackets are visible only when the field does NOT have the focus.\r\n\t     * The left and right symbols should be enclosed in quotes and separated by a comma\r\n\t     * This option can be of the following values :\r\n\t     * null, // This is the default value, which deactivate this feature\r\n\t     * '(,)',\r\n\t     * '[,]',\r\n\t     * '<,>' or\r\n\t     * '{,}'\r\n\t     * Deprecated older option name : nBracket\r\n\t     */\n\t    //TODO Rename the options to more explicit names ('(,)' => 'parentheses', etc.)\n\t    negativeBracketsTypeOnBlur: null,\n\t\n\t    /* Displayed on empty string \"\"\r\n\t     * emptyInputBehavior: \"focus\" - (default) currency sign displayed and the input receives focus\r\n\t     * emptyInputBehavior: \"press\" - currency sign displays on any key being pressed\r\n\t     * emptyInputBehavior: \"always\" - always displays the currency sign only\r\n\t     * emptyInputBehavior: \"zero\" - if the input has no value on focus out displays a zero \"rounded\" with or without a currency sign\r\n\t     * Deprecated older option name : wEmpty\r\n\t     */\n\t    emptyInputBehavior: 'focus',\n\t\n\t    /* Controls leading zero behavior\r\n\t     * leadingZero: \"allow\", - allows leading zeros to be entered. Zeros will be truncated when entering additional digits. On focusout zeros will be deleted.\r\n\t     * leadingZero: \"deny\", - allows only one leading zero on values less than one\r\n\t     * leadingZero: \"keep\", - allows leading zeros to be entered. on focusout zeros will be retained.\r\n\t     * Deprecated older option name : lZero\r\n\t     */\n\t    leadingZero: 'deny',\n\t\n\t    /* Determine if the default value will be formatted on initialization.\r\n\t     * true = automatically formats the default value on initialization\r\n\t     * false = will not format the default value on initialization\r\n\t     * Deprecated older option name : aForm\r\n\t     */\n\t    formatOnPageLoad: true,\n\t\n\t    /* Determine if the select all keyboard command will select the complete input text, or only the input numeric value\r\n\t     * Note : If the currency symbol is between the numeric value and the negative sign, only the numeric value will selected\r\n\t     * Deprecated older option name : sNumber\r\n\t     */\n\t    selectNumberOnly: false,\n\t\n\t    /* Helper option for ASP.NET postback\r\n\t     * should be the value of the unformatted default value\r\n\t     * examples:\r\n\t     * no default value=\"\" {defaultValueOverride: \"\"}\r\n\t     * value=1234.56 {defaultValueOverride: '1234.56'}\r\n\t     * Deprecated older option name : anDefault\r\n\t     */\n\t    defaultValueOverride: null,\n\t\n\t    /* Removes formatting on submit event\r\n\t     * this output format: positive nnnn.nn, negative -nnnn.nn\r\n\t     * review the 'unSet' method for other formats\r\n\t     * Deprecated older option name : unSetOnSubmit\r\n\t     */\n\t    unformatOnSubmit: false,\n\t\n\t    /* Allows the output to be in the locale format via the \"get\", \"getString\" & \"getArray\" methods\r\n\t     * null or 'string' => 'nnnn.nn' or '-nnnn.nn' as text type. This is the default behavior.\r\n\t     * 'number'         => nnnn.nn or -nnnn.nn as a Number (Warning: this works only for integers inferior to Number.MAX_SAFE_INTEGER)\r\n\t     * ',' or '-,'      => 'nnnn,nn' or '-nnnn,nn'\r\n\t     * '.-'             => 'nnnn.nn' or 'nnnn.nn-'\r\n\t     * ',-'             => 'nnnn,nn' or 'nnnn,nn-'\r\n\t     * Deprecated older option name : outputType\r\n\t     */\n\t    outputFormat: null,\n\t\n\t    /* Defines if warnings should be shown\r\n\t     * Error handling function\r\n\t     * true => all warning are shown\r\n\t     * false => no warnings are shown, only the thrown errors\r\n\t     * Deprecated older option name : debug\r\n\t     */\n\t    showWarnings: true,\n\t\n\t    /*\r\n\t     * This option is the 'strict mode' (aka 'debug' mode), which allows autoNumeric to strictly analyse the options passed, and fails if an unknown options is used in the settings object.\r\n\t     * You should set that to 'TRUE' if you want to make sure you are only using 'pure' autoNumeric settings objects in your code.\r\n\t     * If you see uncaught errors in the console and your code starts to fail, this means somehow those options gets corrupted by another program.\r\n\t     */\n\t    failOnUnknownOption: false\n\t};\n\t\n\t/**\r\n\t * Wrapper variable that hold named keyboard keys with their respective keyCode as seen in DOM events.\r\n\t * //TODO Replace every call to this object with a call to `keyName`\r\n\t * @deprecated\r\n\t */\n\tvar keyCode = {\n\t    Backspace: 8,\n\t    Tab: 9,\n\t    Enter: 13,\n\t    Shift: 16,\n\t    Ctrl: 17,\n\t    Alt: 18,\n\t    PauseBreak: 19,\n\t    CapsLock: 20,\n\t    Esc: 27,\n\t    Space: 32,\n\t    PageUp: 33,\n\t    PageDown: 34,\n\t    End: 35,\n\t    Home: 36,\n\t    LeftArrow: 37,\n\t    UpArrow: 38,\n\t    RightArrow: 39,\n\t    DownArrow: 40,\n\t    Insert: 45,\n\t    Delete: 46,\n\t    num0: 48,\n\t    num1: 49,\n\t    num2: 50,\n\t    num3: 51,\n\t    num4: 52,\n\t    num5: 53,\n\t    num6: 54,\n\t    num7: 55,\n\t    num8: 56,\n\t    num9: 57,\n\t    a: 65,\n\t    b: 66,\n\t    c: 67,\n\t    d: 68,\n\t    e: 69,\n\t    f: 70,\n\t    g: 71,\n\t    h: 72,\n\t    i: 73,\n\t    j: 74,\n\t    k: 75,\n\t    l: 76,\n\t    m: 77,\n\t    n: 78,\n\t    o: 79,\n\t    p: 80,\n\t    q: 81,\n\t    r: 82,\n\t    s: 83,\n\t    t: 84,\n\t    u: 85,\n\t    v: 86,\n\t    w: 87,\n\t    x: 88,\n\t    y: 89,\n\t    z: 90,\n\t    Windows: 91,\n\t    RightClick: 93,\n\t    numpad0: 96,\n\t    numpad1: 97,\n\t    numpad2: 98,\n\t    numpad3: 99,\n\t    numpad4: 100,\n\t    numpad5: 101,\n\t    numpad6: 102,\n\t    numpad7: 103,\n\t    numpad8: 104,\n\t    numpad9: 105,\n\t    MultiplyNumpad: 106,\n\t    PlusNumpad: 107,\n\t    MinusNumpad: 109,\n\t    DotNumpad: 110,\n\t    SlashNumpad: 111,\n\t    F1: 112,\n\t    F2: 113,\n\t    F3: 114,\n\t    F4: 115,\n\t    F5: 116,\n\t    F6: 117,\n\t    F7: 118,\n\t    F8: 119,\n\t    F9: 120,\n\t    F10: 121,\n\t    F11: 122,\n\t    F12: 123,\n\t    NumLock: 144,\n\t    ScrollLock: 145,\n\t    MyComputer: 182,\n\t    MyCalculator: 183,\n\t    Semicolon: 186,\n\t    Equal: 187,\n\t    Comma: 188,\n\t    Hyphen: 189,\n\t    Dot: 190,\n\t    Slash: 191,\n\t    Backquote: 192,\n\t    LeftBracket: 219,\n\t    Backslash: 220,\n\t    RightBracket: 221,\n\t    Quote: 222,\n\t    Command: 224,\n\t    AndroidDefault: 229 };\n\t\n\t/**\r\n\t * Wrapper variable that hold named keyboard keys with their respective key name (as set in KeyboardEvent.key).\r\n\t * Those names are listed here :\r\n\t * @link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\r\n\t */\n\tvar keyName = {\n\t    // Special values\n\t    Unidentified: 'Unidentified',\n\t\n\t    // Modifier keys\n\t    Alt: 'Alt',\n\t    AltGr: 'AltGraph',\n\t    CapsLock: 'CapsLock', // Under Chrome, e.key is empty for CapsLock\n\t    Ctrl: 'Control',\n\t    Fn: 'Fn',\n\t    FnLock: 'FnLock',\n\t    Hyper: 'Hyper', // 'OS' under Firefox\n\t    Meta: 'Meta', // The Windows, Command or ⌘ key // 'OS' under Firefox and IE9\n\t    Windows: 'Meta', // This is a non-official key name\n\t    Command: 'Meta', // This is a non-official key name\n\t    NumLock: 'NumLock',\n\t    ScrollLock: 'ScrollLock',\n\t    Shift: 'Shift',\n\t    Super: 'Super', // 'OS' under Firefox\n\t    Symbol: 'Symbol',\n\t    SymbolLock: 'SymbolLock',\n\t\n\t    // Whitespace keys\n\t    Enter: 'Enter',\n\t    Tab: 'Tab',\n\t    Space: ' ', // 'Spacebar' for Firefox <37, and IE9\n\t\n\t    // Navigation keys\n\t    DownArrow: 'ArrowDown', // 'Down' for Firefox <=36, and IE9\n\t    LeftArrow: 'ArrowLeft', // 'Left' for Firefox <=36, and IE9\n\t    RightArrow: 'ArrowRight', // 'Right' for Firefox <=36, and IE9\n\t    UpArrow: 'ArrowUp', // 'Up' for Firefox <=36, and IE9\n\t    End: 'End',\n\t    Home: 'Home',\n\t    PageDown: 'PageDown',\n\t    PageUp: 'PageUp',\n\t\n\t    // Editing keys\n\t    Backspace: 'Backspace',\n\t    Clear: 'Clear',\n\t    Copy: 'Copy',\n\t    CrSel: 'CrSel', // 'Crsel' for Firefox <=36, and IE9\n\t    Cut: 'Cut',\n\t    Delete: 'Delete', // 'Del' for Firefox <=36, and IE9\n\t    EraseEof: 'EraseEof',\n\t    ExSel: 'ExSel', // 'Exsel' for Firefox <=36, and IE9\n\t    Insert: 'Insert',\n\t    Paste: 'Paste',\n\t    Redo: 'Redo',\n\t    Undo: 'Undo',\n\t\n\t    // UI keys\n\t    Accept: 'Accept',\n\t    Again: 'Again',\n\t    Attn: 'Attn', // 'Unidentified' for Firefox, Chrome, and IE9 ('KanaMode' when using the Japanese keyboard layout)\n\t    Cancel: 'Cancel',\n\t    ContextMenu: 'ContextMenu', // 'Apps' for Firefox <=36, and IE9\n\t    Esc: 'Escape', // 'Esc' for Firefox <=36, and IE9\n\t    Execute: 'Execute',\n\t    Find: 'Find',\n\t    Finish: 'Finish', // 'Unidentified' for Firefox, Chrome, and IE9 ('Katakana' when using the Japanese keyboard layout)\n\t    Help: 'Help',\n\t    Pause: 'Pause',\n\t    Play: 'Play',\n\t    Props: 'Props',\n\t    Select: 'Select',\n\t    ZoomIn: 'ZoomIn',\n\t    ZoomOut: 'ZoomOut',\n\t\n\t    // Device keys\n\t    BrightnessDown: 'BrightnessDown',\n\t    BrightnessUp: 'BrightnessUp',\n\t    Eject: 'Eject',\n\t    LogOff: 'LogOff',\n\t    Power: 'Power',\n\t    PowerOff: 'PowerOff',\n\t    PrintScreen: 'PrintScreen',\n\t    Hibernate: 'Hibernate', // 'Unidentified' for Firefox <=37\n\t    Standby: 'Standby', // 'Unidentified' for Firefox <=36, and IE9\n\t    WakeUp: 'WakeUp',\n\t\n\t    // IME and composition keys\n\t    Compose: 'Compose',\n\t    Dead: 'Dead',\n\t\n\t    // Function keys\n\t    F1: 'F1',\n\t    F2: 'F2',\n\t    F3: 'F3',\n\t    F4: 'F4',\n\t    F5: 'F5',\n\t    F6: 'F6',\n\t    F7: 'F7',\n\t    F8: 'F8',\n\t    F9: 'F9',\n\t    F10: 'F10',\n\t    F11: 'F11',\n\t    F12: 'F12',\n\t\n\t    // Document keys\n\t    Print: 'Print',\n\t\n\t    // 'Normal' keys\n\t    num0: '0',\n\t    num1: '1',\n\t    num2: '2',\n\t    num3: '3',\n\t    num4: '4',\n\t    num5: '5',\n\t    num6: '6',\n\t    num7: '7',\n\t    num8: '8',\n\t    num9: '9',\n\t    numpad0: '0',\n\t    numpad1: '1',\n\t    numpad2: '2',\n\t    numpad3: '3',\n\t    numpad4: '4',\n\t    numpad5: '5',\n\t    numpad6: '6',\n\t    numpad7: '7',\n\t    numpad8: '8',\n\t    numpad9: '9',\n\t    a: 'a',\n\t    b: 'b',\n\t    c: 'c',\n\t    d: 'd',\n\t    e: 'e',\n\t    f: 'f',\n\t    g: 'g',\n\t    h: 'h',\n\t    i: 'i',\n\t    j: 'j',\n\t    k: 'k',\n\t    l: 'l',\n\t    m: 'm',\n\t    n: 'n',\n\t    o: 'o',\n\t    p: 'p',\n\t    q: 'q',\n\t    r: 'r',\n\t    s: 's',\n\t    t: 't',\n\t    u: 'u',\n\t    v: 'v',\n\t    w: 'w',\n\t    x: 'x',\n\t    y: 'y',\n\t    z: 'z',\n\t    MultiplyNumpad: '*',\n\t    PlusNumpad: '+',\n\t    MinusNumpad: '-',\n\t    DotNumpad: '.',\n\t    SlashNumpad: '/',\n\t    Semicolon: ';',\n\t    Equal: '=',\n\t    Comma: ',',\n\t    Hyphen: '-',\n\t    Minus: '-',\n\t    Plus: '+',\n\t    Dot: '.',\n\t    Slash: '/',\n\t    Backquote: '`',\n\t    LeftBracket: '[',\n\t    RightBracket: ']',\n\t    Backslash: '\\\\',\n\t    Quote: \"'\",\n\t    NumpadDot: '.',\n\t    NumpadDotAlt: ',', // Modern browsers automatically adapt the character sent by this key to the decimal character of the current language\n\t    NumpadMultiply: '*',\n\t    NumpadPlus: '+',\n\t    NumpadMinus: '-',\n\t    NumpadSlash: '/',\n\t    NumpadDotObsoleteBrowsers: 'Decimal',\n\t    NumpadMultiplyObsoleteBrowsers: 'Multiply',\n\t    NumpadPlusObsoleteBrowsers: 'Add',\n\t    NumpadMinusObsoleteBrowsers: 'Subtract',\n\t    NumpadSlashObsoleteBrowsers: 'Divide'\n\t};\n\t\n\tvar defaultMinimumValue = '-999999999999.99';\n\tvar defaultMaximumValue = '999999999999.99';\n\tvar defaultRoundingMethod = 'U';\n\tvar defaultLeadingZero = 'deny';\n\tvar defaultSelectNumberOnly = true;\n\t\n\t/**\r\n\t * Predefined options for the most common languages\r\n\t */\n\tvar languageOption = {\n\t    French: { // Français\n\t        digitGroupSeparator: '.', // or '\\u202f'\n\t        decimalCharacter: ',',\n\t        decimalCharacterAlternative: '.',\n\t        currencySymbol: '\\u202F\\u20AC',\n\t        currencySymbolPlacement: 's',\n\t        selectNumberOnly: defaultSelectNumberOnly,\n\t        roundingMethod: defaultRoundingMethod,\n\t        leadingZero: defaultLeadingZero,\n\t        minimumValue: defaultMinimumValue,\n\t        maximumValue: defaultMaximumValue\n\t    },\n\t    NorthAmerican: {\n\t        digitGroupSeparator: ',',\n\t        decimalCharacter: '.',\n\t        currencySymbol: '$',\n\t        currencySymbolPlacement: 'p',\n\t        selectNumberOnly: defaultSelectNumberOnly,\n\t        roundingMethod: defaultRoundingMethod,\n\t        leadingZero: defaultLeadingZero,\n\t        minimumValue: defaultMinimumValue,\n\t        maximumValue: defaultMaximumValue\n\t    },\n\t    British: {\n\t        digitGroupSeparator: ',',\n\t        decimalCharacter: '.',\n\t        currencySymbol: '£',\n\t        currencySymbolPlacement: 'p',\n\t        selectNumberOnly: defaultSelectNumberOnly,\n\t        roundingMethod: defaultRoundingMethod,\n\t        leadingZero: defaultLeadingZero,\n\t        minimumValue: defaultMinimumValue,\n\t        maximumValue: defaultMaximumValue\n\t    },\n\t    Swiss: { // Suisse\n\t        digitGroupSeparator: '\\'',\n\t        decimalCharacter: '.',\n\t        currencySymbol: '\\u202FCHF',\n\t        currencySymbolPlacement: 's',\n\t        selectNumberOnly: defaultSelectNumberOnly,\n\t        roundingMethod: defaultRoundingMethod,\n\t        leadingZero: defaultLeadingZero,\n\t        minimumValue: defaultMinimumValue,\n\t        maximumValue: defaultMaximumValue\n\t    },\n\t    Japanese: { // 日本語\n\t        digitGroupSeparator: ',',\n\t        decimalCharacter: '.',\n\t        currencySymbol: '¥',\n\t        currencySymbolPlacement: 'p',\n\t        selectNumberOnly: defaultSelectNumberOnly,\n\t        roundingMethod: defaultRoundingMethod,\n\t        leadingZero: defaultLeadingZero,\n\t        minimumValue: defaultMinimumValue,\n\t        maximumValue: defaultMaximumValue\n\t    },\n\t    Turkish: {\n\t        digitGroupSeparator: '.',\n\t        decimalCharacter: ',',\n\t        decimalCharacterAlternative: '.',\n\t        currencySymbol: ' ₺',\n\t        currencySymbolPlacement: 's',\n\t        selectNumberOnly: defaultSelectNumberOnly,\n\t        roundingMethod: defaultRoundingMethod,\n\t        leadingZero: defaultLeadingZero,\n\t        minimumValue: defaultMinimumValue,\n\t        maximumValue: defaultMaximumValue,\n\t        negativePositiveSignPlacement: 'p'\n\t    }\n\t};\n\tlanguageOption.Spanish = languageOption.French; // Español (idem French)\n\tlanguageOption.Chinese = languageOption.Japanese; // 中国語 (Chinese)\n\t\n\t/**\r\n\t * UMD structure\r\n\t */\n\t(function (factory) {\n\t    //TODO This surely can be improved by letting webpack take care of generating this UMD part\n\t    if (true) {\n\t        // AMD. Register as an anonymous module.\n\t        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t    } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object' && module.exports) {\n\t        // Node/CommonJS\n\t        module.exports = factory(require('jquery'));\n\t    } else {\n\t        // Browser globals\n\t        factory(window.jQuery);\n\t    }\n\t})(function ($) {\n\t    // Helper functions\n\t\n\t    /**\r\n\t     * Return TRUE if the `value` is null\r\n\t     *\r\n\t     * @static\r\n\t     * @param {*} value The value to test\r\n\t     * @returns {boolean} Return TRUE if the `value` is null, FALSE otherwise\r\n\t     */\n\t    function isNull(value) {\n\t        return value === null;\n\t    }\n\t\n\t    /**\r\n\t     * Return TRUE if the `value` is undefined\r\n\t     *\r\n\t     * @static\r\n\t     * @param {*} value The value to test\r\n\t     * @returns {boolean} Return TRUE if the `value` is undefined, FALSE otherwise\r\n\t     */\n\t    function isUndefined(value) {\n\t        return value === void 0;\n\t    }\n\t\n\t    /**\r\n\t     * Return TRUE if the `value` is undefined, null or empty\r\n\t     *\r\n\t     * @param {*} value\r\n\t     * @returns {boolean}\r\n\t     */\n\t    function isUndefinedOrNullOrEmpty(value) {\n\t        return value === null || value === void 0 || '' === value;\n\t    }\n\t\n\t    /**\r\n\t     * Return TRUE if the given parameter is a String\r\n\t     *\r\n\t     * @param {*} str\r\n\t     * @returns {boolean}\r\n\t     */\n\t    function isString(str) {\n\t        return typeof str === 'string' || str instanceof String;\n\t    }\n\t\n\t    /**\r\n\t     * Return TRUE if the parameter is a boolean\r\n\t     *\r\n\t     * @static\r\n\t     * @param {*} value\r\n\t     * @returns {boolean}\r\n\t     */\n\t    function isBoolean(value) {\n\t        return typeof value === 'boolean';\n\t    }\n\t\n\t    /**\r\n\t     * Return TRUE if the parameter is a string 'true' or 'false'\r\n\t     *\r\n\t     * This function accepts any cases for those strings.\r\n\t     * @param {string} value\r\n\t     * @returns {boolean}\r\n\t     */\n\t    function isTrueOrFalseString(value) {\n\t        var lowercaseValue = String(value).toLowerCase();\n\t        return lowercaseValue === 'true' || lowercaseValue === 'false';\n\t    }\n\t\n\t    /**\r\n\t     * Return TRUE if the parameter is an object\r\n\t     *\r\n\t     * @param {*} reference\r\n\t     * @returns {boolean}\r\n\t     */\n\t    function isObject(reference) {\n\t        return (typeof reference === 'undefined' ? 'undefined' : _typeof(reference)) === 'object' && reference !== null && !Array.isArray(reference);\n\t    }\n\t\n\t    /**\r\n\t     * Return TRUE if the given object is empty\r\n\t     * cf. http://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object and http://jsperf.com/empty-object-test\r\n\t     *\r\n\t     * @param {object} obj\r\n\t     * @returns {boolean}\r\n\t     */\n\t    function isEmptyObj(obj) {\n\t        for (var prop in obj) {\n\t            if (obj.hasOwnProperty(prop)) {\n\t                return false;\n\t            }\n\t        }\n\t        return true;\n\t    }\n\t\n\t    /**\r\n\t     * Return TRUE if the parameter is a number (or a number written as a string).\r\n\t     *\r\n\t     * @param {*} n\r\n\t     * @returns {boolean}\r\n\t     */\n\t    function isNumber(n) {\n\t        return !isArray(n) && !isNaN(parseFloat(n)) && isFinite(n);\n\t    }\n\t\n\t    /**\r\n\t     * Return TRUE if the parameter is an integer (and not a float).\r\n\t     *\r\n\t     * @param {*} n\r\n\t     * @returns {boolean}\r\n\t     */\n\t    function isInt(n) {\n\t        return typeof n === 'number' && parseFloat(n) === parseInt(n, 10) && !isNaN(n);\n\t    }\n\t\n\t    /**\r\n\t     * Return the pasted text that will be used.\r\n\t     *\r\n\t     * @param {string} text\r\n\t     * @param {AutoNumericHolder} holder\r\n\t     * @returns {string|void|XML|*}\r\n\t     */\n\t    function preparePastedText(text, holder) {\n\t        return stripAllNonNumberCharacters(text, holder.settingsClone, true).replace(holder.settingsClone.decimalCharacter, '.');\n\t    }\n\t\n\t    /**\r\n\t     * Return TRUE is the string `str` contains the string `needle`\r\n\t     * Note: this function does not coerce the parameters types\r\n\t     *\r\n\t     * @param {string} str\r\n\t     * @param {string} needle\r\n\t     * @returns {boolean}\r\n\t     */\n\t    function contains(str, needle) {\n\t        if (!isString(str) || !isString(needle) || str === '' || needle === '') {\n\t            return false;\n\t        }\n\t\n\t        return str.indexOf(needle) !== -1;\n\t    }\n\t\n\t    /**\r\n\t     * Return TRUE if the `needle` is in the array\r\n\t     *\r\n\t     * @param {*} needle\r\n\t     * @param {Array} array\r\n\t     * @returns {boolean}\r\n\t     */\n\t    function isInArray(needle, array) {\n\t        if (!isArray(array) || array === [] || isUndefined(needle)) {\n\t            return false;\n\t        }\n\t\n\t        return array.indexOf(needle) !== -1;\n\t    }\n\t\n\t    /**\r\n\t     * Return TRUE if the parameter is an Array\r\n\t     *\r\n\t     * @param {*} arr\r\n\t     * @throws Error\r\n\t     * @returns {*|boolean}\r\n\t     */\n\t    function isArray(arr) {\n\t        if (Object.prototype.toString.call([]) === '[object Array]') {\n\t            // Make sure an array has a class attribute of [object Array]\n\t            // Test passed, now check if is an Array\n\t            return Array.isArray(arr) || (typeof arr === 'undefined' ? 'undefined' : _typeof(arr)) === 'object' && Object.prototype.toString.call(arr) === '[object Array]';\n\t        } else {\n\t            throw new Error('toString message changed for Object Array'); // Verify that the string returned by `toString` does not change in the future (cf. http://stackoverflow.com/a/8365215)\n\t        }\n\t    }\n\t\n\t    /**\r\n\t     * Return TRUE if the parameter is a string that represents a float number, and that number has a decimal part\r\n\t     *\r\n\t     * @param {string} str\r\n\t     * @returns {boolean}\r\n\t     */\n\t    // function hasDecimals(str) {\n\t    //     const [, decimalPart] = str.split('.');\n\t    //     return !isUndefined(decimalPart);\n\t    // }\n\t\n\t    /**\r\n\t     * Return the number of decimal places if the parameter is a string that represents a float number, and that number has a decimal part.\r\n\t     *\r\n\t     * @param {string} str\r\n\t     * @returns {int}\r\n\t     */\n\t    function decimalPlaces(str) {\n\t        var _str$split = str.split('.'),\n\t            _str$split2 = _slicedToArray(_str$split, 2),\n\t            decimalPart = _str$split2[1];\n\t\n\t        if (!isUndefined(decimalPart)) {\n\t            return decimalPart.length;\n\t        }\n\t\n\t        return 0;\n\t    }\n\t\n\t    /**\r\n\t     * Return the code for the key used to generate the given event.\r\n\t     *\r\n\t     * @param {Event} event\r\n\t     * @returns {string|Number}\r\n\t     */\n\t    function keyCodeNumber(event) {\n\t        // `event.keyCode` and `event.which` are deprecated, `KeyboardEvent.key` (https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) must be used now\n\t        return typeof event.which === 'undefined' ? event.keyCode : event.which;\n\t    }\n\t\n\t    /**\r\n\t     * Return the character from the event key code.\r\n\t     * @example character(50) => '2'\r\n\t     *\r\n\t     * @param {Event} event\r\n\t     * @returns {string}\r\n\t     */\n\t    function character(event) {\n\t        if (typeof event.key === 'undefined' || event.key === 'Unidentified') {\n\t            return String.fromCharCode(keyCodeNumber(event));\n\t        } else {\n\t            // Special case for obsolete browsers like IE that return the old names\n\t            var result = void 0;\n\t            switch (event.key) {\n\t                case 'Decimal':\n\t                    result = keyName.NumpadDot;\n\t                    break;\n\t                case 'Multiply':\n\t                    result = keyName.NumpadMultiply;\n\t                    break;\n\t                case 'Add':\n\t                    result = keyName.NumpadPlus;\n\t                    break;\n\t                case 'Subtract':\n\t                    result = keyName.NumpadMinus;\n\t                    break;\n\t                case 'Divide':\n\t                    result = keyName.NumpadSlash;\n\t                    break;\n\t                case 'Del':\n\t                    // Special workaround for the obsolete browser IE11 which output a 'Delete' key when using the numpad 'dot' one! This fixes issue #401 //FIXME à terminer\n\t                    result = keyName.Dot; // as of version 2.0.8 the character() function is only called on keypress event. The 'Del' does not throw the keypress event.\n\t                    break;\n\t                default:\n\t                    result = event.key;\n\t            }\n\t\n\t            return result;\n\t        }\n\t    }\n\t\n\t    /**\r\n\t     * Return TRUE if the given value (a number as a string) is within the range set in the settings `minimumValue` and `maximumValue`, FALSE otherwise.\r\n\t     *\r\n\t     * @param {string} value\r\n\t     * @param {object} parsedMinValue Parsed via the `parseStr()` function\r\n\t     * @param {object} parsedMaxValue Parsed via the `parseStr()` function\r\n\t     * @returns {boolean}\r\n\t     */\n\t    function checkIfInRange(value, parsedMinValue, parsedMaxValue) {\n\t        var parsedValue = parseStr(value);\n\t        return testMinMax(parsedMinValue, parsedValue) > -1 && testMinMax(parsedMaxValue, parsedValue) < 1;\n\t    }\n\t\n\t    /**\r\n\t     * Return TRUE if the given string contains a negative sign :\r\n\t     * - everywhere in the string (by default), or\r\n\t     * - on the first character only if the `checkEverywhere` parameter is set to `false`.\r\n\t     *\r\n\t     * @param {string} numericString A number represented by a string\r\n\t     * @param {boolean} checkEverywhere If TRUE, then the negative sign is search everywhere in the numeric string (this is needed for instance if the string is '1234.56-')\r\n\t     * @returns {boolean}\r\n\t     */\n\t    function isNegative(numericString) {\n\t        var checkEverywhere = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\t\n\t        //TODO Use the `negativeSignCharacter` from the settings here\n\t        if (checkEverywhere) {\n\t            return contains(numericString, '-');\n\t        }\n\t\n\t        return isNegativeStrict(numericString);\n\t    }\n\t\n\t    /**\r\n\t     * Return TRUE if the given string contains a negative sign on the first character (on the far left).\r\n\t     *\r\n\t     * @example isNegativeStrict('1234.56')     => false\r\n\t     * @example isNegativeStrict('1234.56-')    => false\r\n\t     * @example isNegativeStrict('-1234.56')    => true\r\n\t     * @example isNegativeStrict('-1,234.56 €') => true\r\n\t     *\r\n\t     * @param {string} numericString\r\n\t     * @returns {boolean}\r\n\t     */\n\t    function isNegativeStrict(numericString) {\n\t        //TODO Using the `negativeSignCharacter` from the settings here\n\t        return numericString.charAt(0) === '-';\n\t    }\n\t\n\t    /**\r\n\t     * Return TRUE if the formatted or unformatted numeric string represent the value 0 (ie. '0,00 €'), or is empty (' €').\r\n\t     * This works since we test if there are any numbers from 1 to 9 in the string. If there is none, then the number is zero (or the string is empty).\r\n\t     *\r\n\t     * @param {string} numericString\r\n\t     * @returns {boolean}\r\n\t     */\n\t    function isZeroOrHasNoValue(numericString) {\n\t        return !/[1-9]/g.test(numericString);\n\t    }\n\t\n\t    /**\r\n\t     * Return the negative version of the value (represented as a string) given as a parameter.\r\n\t     *\r\n\t     * @param {string} value\r\n\t     * @returns {*}\r\n\t     */\n\t    function setRawNegativeSign(value) {\n\t        if (!isNegativeStrict(value)) {\n\t            return '-' + value;\n\t        }\n\t\n\t        return value;\n\t    }\n\t\n\t    /**\r\n\t     * Replace the character at the position `index` in the string `string` by the character(s) `newCharacter`.\r\n\t     *\r\n\t     * @param {string} string\r\n\t     * @param {int} index\r\n\t     * @param {string} newCharacter\r\n\t     * @returns {string}\r\n\t     */\n\t    function replaceCharAt(string, index, newCharacter) {\n\t        return '' + string.substr(0, index) + newCharacter + string.substr(index + newCharacter.length);\n\t    }\n\t\n\t    /**\r\n\t     * Return the value clamped to the nearest minimum/maximum value, as defined in the settings.\r\n\t     *\r\n\t     * @param {string|number} value\r\n\t     * @param {object} settings\r\n\t     * @returns {number}\r\n\t     */\n\t    function clampToRangeLimits(value, settings) {\n\t        //XXX This function always assume `settings.minimumValue` is lower than `settings.maximumValue`\n\t        return Math.max(settings.minimumValue, Math.min(settings.maximumValue, value));\n\t    }\n\t\n\t    /**\r\n\t     * Return the number of number or dot characters on the left side of the caret, in a formatted number.\r\n\t     *\r\n\t     * @param {string} formattedNumberString\r\n\t     * @param {int} caretPosition This must be a positive integer\r\n\t     * @param {string} decimalCharacter\r\n\t     * @returns {number}\r\n\t     */\n\t    function countNumberCharactersOnTheCaretLeftSide(formattedNumberString, caretPosition, decimalCharacter) {\n\t        // Here we count the dot and report it as a number character too, since it will 'stay' in the Javascript number when unformatted\n\t        var numberDotOrNegativeSign = new RegExp('[0-9' + decimalCharacter + '-]'); // No need to escape the decimal character here, since it's in `[]`\n\t\n\t        var numberDotAndNegativeSignCount = 0;\n\t        for (var i = 0; i < caretPosition; i++) {\n\t            // Test if the character is a number, a dot or an hyphen. If it is, count it, otherwise ignore it\n\t            if (numberDotOrNegativeSign.test(formattedNumberString[i])) {\n\t                numberDotAndNegativeSignCount++;\n\t            }\n\t        }\n\t\n\t        return numberDotAndNegativeSignCount;\n\t    }\n\t\n\t    /**\r\n\t     * Walk the `formattedNumberString` from left to right, one char by one, counting the `formattedNumberStringIndex`.\r\n\t     * If the char is in the `rawNumberString` (starting at index 0), then `rawNumberStringIndex++`, and continue until\r\n\t     * there is no more characters in `rawNumberString`) or that `rawNumberStringIndex === caretPositionInRawValue`.\r\n\t     * When you stop, the `formattedNumberStringIndex` is the position where the caret should be set.\r\n\t     *\r\n\t     * @example\r\n\t     * 1234567|89.01   : position 7 (rawNumberString)\r\n\t     * 123.456.7|89,01 : position 9 (formattedNumberString)\r\n\t     *\r\n\t     * @param {string} rawNumberString\r\n\t     * @param {int} caretPositionInRawValue\r\n\t     * @param {string} formattedNumberString\r\n\t     * @param {string} decimalCharacter\r\n\t     * @returns {*}\r\n\t     */\n\t    function findCaretPositionInFormattedNumber(rawNumberString, caretPositionInRawValue, formattedNumberString, decimalCharacter) {\n\t        var formattedNumberStringSize = formattedNumberString.length;\n\t        var rawNumberStringSize = rawNumberString.length;\n\t\n\t        var formattedNumberStringIndex = void 0;\n\t        var rawNumberStringIndex = 0;\n\t        for (formattedNumberStringIndex = 0; formattedNumberStringIndex < formattedNumberStringSize && rawNumberStringIndex < rawNumberStringSize && rawNumberStringIndex < caretPositionInRawValue; formattedNumberStringIndex++) {\n\t            if (rawNumberString[rawNumberStringIndex] === formattedNumberString[formattedNumberStringIndex] || rawNumberString[rawNumberStringIndex] === '.' && formattedNumberString[formattedNumberStringIndex] === decimalCharacter) {\n\t                rawNumberStringIndex++;\n\t            }\n\t        }\n\t\n\t        return formattedNumberStringIndex;\n\t    }\n\t\n\t    /**\r\n\t     * Count the number of occurrence of the given character, in the given text.\r\n\t     *\r\n\t     * @param {string} character\r\n\t     * @param {string} text\r\n\t     * @returns {number}\r\n\t     */\n\t    function countCharInText(character, text) {\n\t        var charCounter = 0;\n\t        for (var i = 0; i < text.length; i++) {\n\t            if (text[i] === character) {\n\t                charCounter++;\n\t            }\n\t        }\n\t\n\t        return charCounter;\n\t    }\n\t\n\t    /**\r\n\t     * Return the index that can be used to set the caret position.\r\n\t     * This takes into account that the position is starting at '0', not 1.\r\n\t     *\r\n\t     * @param {int} characterCount\r\n\t     * @returns {number}\r\n\t     */\n\t    function convertCharacterCountToIndexPosition(characterCount) {\n\t        return Math.max(characterCount, characterCount - 1);\n\t    }\n\t\n\t    /**\r\n\t     * Cross browser routine for getting selected range/cursor position\r\n\t     *\r\n\t     * @param {HTMLElement|EventTarget} that\r\n\t     * @returns {{}}\r\n\t     */\n\t    function getElementSelection(that) {\n\t        var position = {};\n\t        if (isUndefined(that.selectionStart)) {\n\t            that.focus();\n\t            var select = document.selection.createRange();\n\t            position.length = select.text.length;\n\t            select.moveStart('character', -that.value.length);\n\t            position.end = select.text.length;\n\t            position.start = position.end - position.length;\n\t        } else {\n\t            position.start = that.selectionStart;\n\t            position.end = that.selectionEnd;\n\t            position.length = position.end - position.start;\n\t        }\n\t\n\t        return position;\n\t    }\n\t\n\t    /**\r\n\t     * Cross browser routine for setting selected range/cursor position\r\n\t     *\r\n\t     * @param {HTMLElement|EventTarget} that\r\n\t     * @param {int} start\r\n\t     * @param {int|null} end\r\n\t     */\n\t    function setElementSelection(that, start) {\n\t        var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\t\n\t        if (isUndefinedOrNullOrEmpty(end)) {\n\t            end = start;\n\t        }\n\t\n\t        if (isUndefined(that.selectionStart)) {\n\t            that.focus();\n\t            var range = that.createTextRange();\n\t            range.collapse(true);\n\t            range.moveEnd('character', end);\n\t            range.moveStart('character', start);\n\t            range.select();\n\t        } else {\n\t            that.selectionStart = start;\n\t            that.selectionEnd = end;\n\t        }\n\t    }\n\t\n\t    /**\r\n\t     * Function that throw error messages\r\n\t     *\r\n\t     * @param {string} message\r\n\t     */\n\t    function throwError(message) {\n\t        throw new Error(message);\n\t    }\n\t\n\t    /**\r\n\t     * Function that display a warning messages, according to the debug level.\r\n\t     *\r\n\t     * @param {string} message\r\n\t     * @param {boolean} showWarning If FALSE, then the warning message is not displayed\r\n\t     */\n\t    function warning(message) {\n\t        var showWarning = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\t\n\t        if (showWarning) {\n\t            /* eslint no-console: 0 */\n\t            console.warn('Warning: ' + message);\n\t        }\n\t    }\n\t\n\t    // autoNumeric-specific functions\n\t\n\t    /**\r\n\t     * Run any callbacks found in the settings object.\r\n\t     * Any parameter could be a callback:\r\n\t     * - a function, which invoked with jQuery element, parameters and this parameter name and returns parameter value\r\n\t     * - a name of function, attached to $(selector).autoNumeric.functionName(){} - which was called previously\r\n\t     * @param {object} $this jQuery-selected DOM element\r\n\t     * @param {object} settings\r\n\t     */\n\t    function runCallbacksFoundInTheSettingsObject($this, settings) {\n\t        // Loops through the settings object (option array) to find the following\n\t        $.each(settings, function (k, val) {\n\t            if (typeof val === 'function') {\n\t                settings[k] = val($this, settings, k);\n\t            } else if (typeof $this.autoNumeric[val] === 'function') {\n\t                // Calls the attached function from the html5 data example: data-a-sign=\"functionName\"\n\t                settings[k] = $this.autoNumeric[val]($this, settings, k);\n\t            }\n\t        });\n\t    }\n\t\n\t    /**\r\n\t     * Determine the maximum decimal length from the minimumValue and maximumValue settings\r\n\t     *\r\n\t     * @param {string} minimumValue\r\n\t     * @param {string} maximumValue\r\n\t     * @returns {number}\r\n\t     */\n\t    function maximumVMinAndVMaxDecimalLength(minimumValue, maximumValue) {\n\t        return Math.max(decimalPlaces(minimumValue), decimalPlaces(maximumValue));\n\t    }\n\t\n\t    /**\r\n\t     * Strip all unwanted non-number characters.\r\n\t     * This keeps the numbers, the negative sign as well as the custom decimal character.\r\n\t     *\r\n\t     * @param {string} s\r\n\t     * @param {object} settings\r\n\t     * @param {boolean} leftOrAll\r\n\t     * @returns {string|*}\r\n\t     */\n\t    function stripAllNonNumberCharacters(s, settings, leftOrAll) {\n\t        //TODO This function is called 10 times (sic!) on each key input, couldn't we lower that number? cf. issue #325\n\t        //TODO Refactor this with `convertToNumericString()` if possible?\n\t        if (settings.currencySymbol !== '') {\n\t            // Remove currency sign\n\t            s = s.replace(settings.currencySymbol, '');\n\t        }\n\t        if (settings.suffixText) {\n\t            // Remove suffix\n\t            while (contains(s, settings.suffixText)) {\n\t                s = s.replace(settings.suffixText, '');\n\t            }\n\t        }\n\t\n\t        // First replace anything before digits\n\t        s = s.replace(settings.skipFirstAutoStrip, '$1$2');\n\t\n\t        if ((settings.negativePositiveSignPlacement === 's' || settings.currencySymbolPlacement === 's' && settings.negativePositiveSignPlacement !== 'p') && isNegative(s) && s !== '') {\n\t            settings.trailingNegative = true;\n\t        }\n\t\n\t        // Then replace anything after digits\n\t        s = s.replace(settings.skipLastAutoStrip, '$1');\n\t\n\t        // Then remove any uninteresting characters\n\t        s = s.replace(settings.allowedAutoStrip, '');\n\t        if (settings.decimalCharacterAlternative) {\n\t            s = s.replace(settings.decimalCharacterAlternative, settings.decimalCharacter);\n\t        }\n\t\n\t        // Get only number string\n\t        var m = s.match(settings.numRegAutoStrip);\n\t        s = m ? [m[1], m[2], m[3]].join('') : '';\n\t\n\t        if (settings.leadingZero === 'allow' || settings.leadingZero === 'keep') {\n\t            var nSign = '';\n\t\n\t            var _s$split = s.split(settings.decimalCharacter),\n\t                _s$split2 = _slicedToArray(_s$split, 2),\n\t                integerPart = _s$split2[0],\n\t                decimalPart = _s$split2[1];\n\t\n\t            var modifiedIntegerPart = integerPart;\n\t            if (contains(modifiedIntegerPart, settings.negativeSignCharacter)) {\n\t                nSign = settings.negativeSignCharacter;\n\t                modifiedIntegerPart = modifiedIntegerPart.replace(settings.negativeSignCharacter, '');\n\t            }\n\t\n\t            // Strip leading zero on positive value if need\n\t            if (nSign === '' && modifiedIntegerPart.length > settings.mIntPos && modifiedIntegerPart.charAt(0) === '0') {\n\t                modifiedIntegerPart = modifiedIntegerPart.slice(1);\n\t            }\n\t\n\t            // Strip leading zero on negative value if need\n\t            if (nSign !== '' && modifiedIntegerPart.length > settings.mIntNeg && modifiedIntegerPart.charAt(0) === '0') {\n\t                modifiedIntegerPart = modifiedIntegerPart.slice(1);\n\t            }\n\t\n\t            s = '' + nSign + modifiedIntegerPart + (isUndefined(decimalPart) ? '' : settings.decimalCharacter + decimalPart);\n\t        }\n\t\n\t        if (leftOrAll && settings.leadingZero === 'deny' || !settings.hasFocus && settings.leadingZero === 'allow') {\n\t            s = s.replace(settings.stripReg, '$1$2');\n\t        }\n\t\n\t        return s;\n\t    }\n\t\n\t    /**\r\n\t     * Sets or removes brackets on negative values, depending on the focus state.\r\n\t     * The focus state is 'stored' in the settings object under the `settings.hasFocus` attribute.\r\n\t     * //TODO Use another object to keep track of internal data that are not settings\r\n\t     *\r\n\t     * @param {string} s\r\n\t     * @param {object} settings\r\n\t     * @returns {*}\r\n\t     */\n\t    function toggleNegativeBracket(s, settings) {\n\t        if (settings.currencySymbolPlacement === 'p' && settings.negativePositiveSignPlacement === 'l' || settings.currencySymbolPlacement === 's' && settings.negativePositiveSignPlacement === 'p') {\n\t            //TODO Split the first and last bracket only once during the settings initialization\n\t            var _settings$negativeBra = settings.negativeBracketsTypeOnBlur.split(','),\n\t                _settings$negativeBra2 = _slicedToArray(_settings$negativeBra, 2),\n\t                firstBracket = _settings$negativeBra2[0],\n\t                lastBracket = _settings$negativeBra2[1];\n\t\n\t            if (!settings.hasFocus) {\n\t                // Add brackets\n\t                s = s.replace(settings.negativeSignCharacter, '');\n\t                s = firstBracket + s + lastBracket;\n\t            } else if (settings.hasFocus && s.charAt(0) === firstBracket) {\n\t                // Remove brackets\n\t                //TODO Quid if the negative sign is not on the left, shouldn't we replace the '-' sign at the right place?\n\t                s = s.replace(firstBracket, settings.negativeSignCharacter);\n\t                s = s.replace(lastBracket, '');\n\t            }\n\t        }\n\t\n\t        return s;\n\t    }\n\t\n\t    /**\r\n\t     * Return a number as a numeric string that can be typecast to a Number that Javascript will understand.\r\n\t     *\r\n\t     * This function return the given string by stripping the currency sign (currencySymbol), the grouping separators (digitalGroupSpacing) and by replacing the decimal character (decimalCharacter) by a dot.\r\n\t     * Lastly, it also put the negative sign back to its normal position if needed.\r\n\t     *\r\n\t     * @param {string} s\r\n\t     * @param {object} settings\r\n\t     * @returns {string|void|XML|*}\r\n\t     */\n\t    function convertToNumericString(s, settings) {\n\t        // Remove the currency symbol\n\t        s = s.replace(settings.currencySymbol, '');\n\t\n\t        // Remove the grouping separators (thousands separators usually)\n\t        s = s.replace(settings.digitGroupSeparator, '');\n\t\n\t        // Replace the decimal character by a dot\n\t        if (settings.decimalCharacter !== '.') {\n\t            s = s.replace(settings.decimalCharacter, '.');\n\t        }\n\t\n\t        // Move the trailing negative sign to the right position, if any\n\t        if (isNegative(s) && s.lastIndexOf('-') === s.length - 1) {\n\t            s = s.replace('-', '');\n\t            s = '-' + s;\n\t        }\n\t\n\t        // Convert any arabic numbers to latin ones\n\t        var temp = arabicToLatinNumbers(s, true, false, false);\n\t        if (!isNaN(temp)) {\n\t            s = temp.toString();\n\t        }\n\t\n\t        return s;\n\t    }\n\t\n\t    /**\r\n\t     * Converts the ISO numeric string to the locale decimal and minus sign placement.\r\n\t     * See the \"outputFormat\" option definition for more details.\r\n\t     *\r\n\t     * @param {string|null} value\r\n\t     * @param {string} locale\r\n\t     * @returns {*}\r\n\t     */\n\t    function toLocale(value, locale) {\n\t        if (isNull(locale) || locale === 'string') {\n\t            return value;\n\t        }\n\t\n\t        var result = void 0;\n\t        switch (locale) {\n\t            case 'number':\n\t                result = Number(value);\n\t                break;\n\t            case '.-':\n\t                result = isNegative(value) ? value.replace('-', '') + '-' : value;\n\t                break;\n\t            case ',':\n\t            case '-,':\n\t                result = value.replace('.', ',');\n\t                break;\n\t            case ',-':\n\t                result = value.replace('.', ',');\n\t                result = isNegative(result) ? result.replace('-', '') + '-' : result;\n\t                break;\n\t            // The default case\n\t            case '.':\n\t            case '-.':\n\t                result = value;\n\t                break;\n\t            default:\n\t                throwError('The given outputFormat [' + locale + '] option is not recognized.');\n\t        }\n\t\n\t        return result;\n\t    }\n\t\n\t    /**\r\n\t     * Modify the negative sign and the decimal character of the given string value to an hyphen (-) and a dot (.) in order to make that value 'typecastable' to a real number.\r\n\t     *\r\n\t     * @param {string} s\r\n\t     * @param {object} settings\r\n\t     * @returns {string}\r\n\t     */\n\t    function modifyNegativeSignAndDecimalCharacterForRawValue(s, settings) {\n\t        if (settings.decimalCharacter !== '.') {\n\t            s = s.replace(settings.decimalCharacter, '.');\n\t        }\n\t        if (settings.negativeSignCharacter !== '-' && settings.negativeSignCharacter !== '') {\n\t            s = s.replace(settings.negativeSignCharacter, '-');\n\t        }\n\t        if (!s.match(/\\d/)) {\n\t            // The default value returned by `get` is not formatted with decimals\n\t            s += '0';\n\t        }\n\t\n\t        return s;\n\t    }\n\t\n\t    /**\r\n\t     * Modify the negative sign and the decimal character to use those defined in the settings.\r\n\t     *\r\n\t     * @param {string} s\r\n\t     * @param {object} settings\r\n\t     * @returns {string}\r\n\t     */\n\t    function modifyNegativeSignAndDecimalCharacterForFormattedValue(s, settings) {\n\t        if (settings.negativeSignCharacter !== '-' && settings.negativeSignCharacter !== '') {\n\t            s = s.replace('-', settings.negativeSignCharacter);\n\t        }\n\t        if (settings.decimalCharacter !== '.') {\n\t            s = s.replace('.', settings.decimalCharacter);\n\t        }\n\t\n\t        return s;\n\t    }\n\t\n\t    /**\r\n\t     * Private function to check for empty value\r\n\t     * //TODO Modify this function so that it return either TRUE or FALSE if the value is empty. Then create another function to return the input value if it's not empty.\r\n\t     *\r\n\t     * @param {string} inputValue\r\n\t     * @param {object} settings\r\n\t     * @param {boolean} signOnEmpty\r\n\t     * @returns {*}\r\n\t     */\n\t    function checkEmpty(inputValue, settings, signOnEmpty) {\n\t        if (inputValue === '' || inputValue === settings.negativeSignCharacter) {\n\t            if (settings.emptyInputBehavior === 'always' || signOnEmpty) {\n\t                return settings.negativePositiveSignPlacement === 'l' ? inputValue + settings.currencySymbol + settings.suffixText : settings.currencySymbol + inputValue + settings.suffixText;\n\t            }\n\t\n\t            return inputValue;\n\t        }\n\t\n\t        return null;\n\t    }\n\t\n\t    /**\r\n\t     * Modify the input value by adding the group separators, as defined in the settings.\r\n\t     *\r\n\t     * @param {string} inputValue\r\n\t     * @param {object} settings\r\n\t     * @returns {*}\r\n\t     */\n\t    function addGroupSeparators(inputValue, settings) {\n\t        if (settings.strip) {\n\t            inputValue = stripAllNonNumberCharacters(inputValue, settings, false);\n\t        }\n\t\n\t        //TODO This function `addGroupSeparators()` add group separators. Adding the negative sign as well is out of its scope. Move that to another function.\n\t        if (settings.trailingNegative && !isNegative(inputValue)) {\n\t            inputValue = '-' + inputValue;\n\t        }\n\t\n\t        var empty = checkEmpty(inputValue, settings, true);\n\t        var isValueNegative = isNegative(inputValue);\n\t        var isZero = isZeroOrHasNoValue(inputValue);\n\t        if (isValueNegative) {\n\t            inputValue = inputValue.replace('-', '');\n\t        }\n\t\n\t        if (!isNull(empty)) {\n\t            return empty;\n\t        }\n\t\n\t        settings.digitalGroupSpacing = settings.digitalGroupSpacing.toString();\n\t        var digitalGroup = void 0;\n\t        switch (settings.digitalGroupSpacing) {\n\t            case '2':\n\t                digitalGroup = /(\\d)((\\d)(\\d{2}?)+)$/;\n\t                break;\n\t            case '2s':\n\t                digitalGroup = /(\\d)((?:\\d{2}){0,2}\\d{3}(?:(?:\\d{2}){2}\\d{3})*?)$/;\n\t                break;\n\t            case '4':\n\t                digitalGroup = /(\\d)((\\d{4}?)+)$/;\n\t                break;\n\t            default:\n\t                digitalGroup = /(\\d)((\\d{3}?)+)$/;\n\t        }\n\t\n\t        // Splits the string at the decimal string\n\t\n\t        var _inputValue$split = inputValue.split(settings.decimalCharacter),\n\t            _inputValue$split2 = _slicedToArray(_inputValue$split, 2),\n\t            integerPart = _inputValue$split2[0],\n\t            decimalPart = _inputValue$split2[1];\n\t\n\t        if (settings.decimalCharacterAlternative && isUndefined(decimalPart)) {\n\t            var _inputValue$split3 = inputValue.split(settings.decimalCharacterAlternative);\n\t\n\t            var _inputValue$split4 = _slicedToArray(_inputValue$split3, 2);\n\t\n\t            integerPart = _inputValue$split4[0];\n\t            decimalPart = _inputValue$split4[1];\n\t        }\n\t\n\t        if (settings.digitGroupSeparator !== '') {\n\t            // Re-inserts the thousand separator via a regular expression\n\t            while (digitalGroup.test(integerPart)) {\n\t                integerPart = integerPart.replace(digitalGroup, '$1' + settings.digitGroupSeparator + '$2');\n\t            }\n\t        }\n\t\n\t        if (settings.decimalPlacesOverride !== 0 && !isUndefined(decimalPart)) {\n\t            if (decimalPart.length > settings.decimalPlacesOverride) {\n\t                decimalPart = decimalPart.substring(0, settings.decimalPlacesOverride);\n\t            }\n\t\n\t            // Joins the whole number with the decimal value\n\t            inputValue = integerPart + settings.decimalCharacter + decimalPart;\n\t        } else {\n\t            // Otherwise if it's an integer\n\t            inputValue = integerPart;\n\t        }\n\t\n\t        settings.trailingNegative = false;\n\t\n\t        if (settings.currencySymbolPlacement === 'p') {\n\t            if (isValueNegative) {\n\t                switch (settings.negativePositiveSignPlacement) {\n\t                    case 'l':\n\t                        inputValue = '' + settings.negativeSignCharacter + settings.currencySymbol + inputValue;\n\t                        break;\n\t                    case 'r':\n\t                        inputValue = '' + settings.currencySymbol + settings.negativeSignCharacter + inputValue;\n\t                        break;\n\t                    case 's':\n\t                        inputValue = '' + settings.currencySymbol + inputValue + settings.negativeSignCharacter;\n\t                        settings.trailingNegative = true;\n\t                        break;\n\t                    default:\n\t                    //\n\t                }\n\t            } else if (settings.showPositiveSign && !isZero) {\n\t                switch (settings.negativePositiveSignPlacement) {\n\t                    case 'l':\n\t                        inputValue = '' + settings.positiveSignCharacter + settings.currencySymbol + inputValue;\n\t                        break;\n\t                    case 'r':\n\t                        inputValue = '' + settings.currencySymbol + settings.positiveSignCharacter + inputValue;\n\t                        break;\n\t                    case 's':\n\t                        inputValue = '' + settings.currencySymbol + inputValue + settings.positiveSignCharacter;\n\t                        break;\n\t                    default:\n\t                    //\n\t                }\n\t            } else {\n\t                inputValue = settings.currencySymbol + inputValue;\n\t            }\n\t        }\n\t\n\t        if (settings.currencySymbolPlacement === 's') {\n\t            if (isValueNegative) {\n\t                switch (settings.negativePositiveSignPlacement) {\n\t                    case 'r':\n\t                        inputValue = '' + inputValue + settings.currencySymbol + settings.negativeSignCharacter;\n\t                        settings.trailingNegative = true;\n\t                        break;\n\t                    case 'l':\n\t                        inputValue = '' + inputValue + settings.negativeSignCharacter + settings.currencySymbol;\n\t                        settings.trailingNegative = true;\n\t                        break;\n\t                    case 'p':\n\t                        inputValue = '' + settings.negativeSignCharacter + inputValue + settings.currencySymbol;\n\t                        break;\n\t                    default:\n\t                    //\n\t                }\n\t            } else if (settings.showPositiveSign && !isZero) {\n\t                switch (settings.negativePositiveSignPlacement) {\n\t                    case 'r':\n\t                        inputValue = '' + inputValue + settings.currencySymbol + settings.positiveSignCharacter;\n\t                        break;\n\t                    case 'l':\n\t                        inputValue = '' + inputValue + settings.positiveSignCharacter + settings.currencySymbol;\n\t                        break;\n\t                    case 'p':\n\t                        inputValue = '' + settings.positiveSignCharacter + inputValue + settings.currencySymbol;\n\t                        break;\n\t                    default:\n\t                    //\n\t                }\n\t            } else {\n\t                inputValue = inputValue + settings.currencySymbol;\n\t            }\n\t        }\n\t\n\t        // Removes the negative sign and places brackets\n\t        if (settings.negativeBracketsTypeOnBlur !== null && (settings.rawValue < 0 || isNegativeStrict(inputValue))) {\n\t            inputValue = toggleNegativeBracket(inputValue, settings);\n\t        }\n\t\n\t        return inputValue + settings.suffixText;\n\t    }\n\t\n\t    /**\r\n\t     * Truncate not needed zeros\r\n\t     *\r\n\t     * @param {string} roundedInputValue\r\n\t     * @param {int} temporaryDecimalPlacesOverride\r\n\t     * @returns {void|XML|string|*}\r\n\t     */\n\t    function truncateZeros(roundedInputValue, temporaryDecimalPlacesOverride) {\n\t        var regex = void 0;\n\t        switch (temporaryDecimalPlacesOverride) {\n\t            case 0:\n\t                // Prevents padding - removes trailing zeros until the first significant digit is encountered\n\t                regex = /(\\.(?:\\d*[1-9])?)0*$/;\n\t                break;\n\t            case 1:\n\t                // Allows padding when decimalPlacesOverride equals one - leaves one zero trailing the decimal character\n\t                regex = /(\\.\\d(?:\\d*[1-9])?)0*$/;\n\t                break;\n\t            default:\n\t                // Removes access zeros to the decimalPlacesOverride length when allowDecimalPadding is set to true\n\t                regex = new RegExp('(\\\\.\\\\d{' + temporaryDecimalPlacesOverride + '}(?:\\\\d*[1-9])?)0*');\n\t        }\n\t\n\t        // If there are no decimal places, we don't need a decimal point at the end\n\t        roundedInputValue = roundedInputValue.replace(regex, '$1');\n\t        if (temporaryDecimalPlacesOverride === 0) {\n\t            roundedInputValue = roundedInputValue.replace(/\\.$/, '');\n\t        }\n\t\n\t        return roundedInputValue;\n\t    }\n\t\n\t    /**\r\n\t     * Round the input value using the rounding method defined in the settings.\r\n\t     * This function accepts multiple rounding methods. See the documentation for more details about those.\r\n\t     *\r\n\t     * Note : This is handled as text since JavaScript math function can return inaccurate values.\r\n\t     *\r\n\t     * @param {string} inputValue\r\n\t     * @param {object} settings\r\n\t     * @returns {*}\r\n\t     */\n\t    function roundValue(inputValue, settings) {\n\t        inputValue = inputValue === '' ? '0' : inputValue.toString();\n\t        if (settings.roundingMethod === 'N05' || settings.roundingMethod === 'CHF' || settings.roundingMethod === 'U05' || settings.roundingMethod === 'D05') {\n\t            switch (settings.roundingMethod) {\n\t                case 'N05':\n\t                    inputValue = (Math.round(inputValue * 20) / 20).toString();\n\t                    break;\n\t                case 'U05':\n\t                    inputValue = (Math.ceil(inputValue * 20) / 20).toString();\n\t                    break;\n\t                default:\n\t                    inputValue = (Math.floor(inputValue * 20) / 20).toString();\n\t            }\n\t\n\t            var result = void 0;\n\t            if (!contains(inputValue, '.')) {\n\t                result = inputValue + '.00';\n\t            } else if (inputValue.length - inputValue.indexOf('.') < 3) {\n\t                result = inputValue + '0';\n\t            } else {\n\t                result = inputValue;\n\t            }\n\t            return result;\n\t        }\n\t\n\t        var ivRounded = '';\n\t        var i = 0;\n\t        var nSign = '';\n\t        var temporaryDecimalPlacesOverride = void 0;\n\t\n\t        // sets the truncate zero method\n\t        if (settings.allowDecimalPadding) {\n\t            temporaryDecimalPlacesOverride = settings.decimalPlacesOverride;\n\t        } else {\n\t            temporaryDecimalPlacesOverride = 0;\n\t        }\n\t\n\t        // Checks if the inputValue (input Value) is a negative value\n\t        if (isNegativeStrict(inputValue)) {\n\t            nSign = '-';\n\t\n\t            // Removes the negative sign that will be added back later if required\n\t            inputValue = inputValue.replace('-', '');\n\t        }\n\t\n\t        // Append a zero if the first character is not a digit (then it is likely to be a dot)\n\t        if (!inputValue.match(/^\\d/)) {\n\t            inputValue = '0' + inputValue;\n\t        }\n\t\n\t        // Determines if the value is equal to zero. If it is, remove the negative sign\n\t        if (Number(inputValue) === 0) {\n\t            nSign = '';\n\t        }\n\t\n\t        // Trims leading zero's as needed\n\t        if (Number(inputValue) > 0 && settings.leadingZero !== 'keep' || inputValue.length > 0 && settings.leadingZero === 'allow') {\n\t            inputValue = inputValue.replace(/^0*(\\d)/, '$1');\n\t        }\n\t\n\t        var dPos = inputValue.lastIndexOf('.');\n\t        var inputValueHasADot = dPos === -1;\n\t\n\t        // Virtual decimal position\n\t        var vdPos = inputValueHasADot ? inputValue.length - 1 : dPos;\n\t\n\t        // Checks decimal places to determine if rounding is required :\n\t        // Check if no rounding is required\n\t        var cDec = inputValue.length - 1 - vdPos;\n\t\n\t        if (cDec <= settings.decimalPlacesOverride) {\n\t            // Check if we need to pad with zeros\n\t            ivRounded = inputValue;\n\t            if (cDec < temporaryDecimalPlacesOverride) {\n\t                if (inputValueHasADot) {\n\t                    ivRounded += settings.decimalCharacter;\n\t                }\n\t\n\t                var zeros = '000000';\n\t                while (cDec < temporaryDecimalPlacesOverride) {\n\t                    zeros = zeros.substring(0, temporaryDecimalPlacesOverride - cDec);\n\t                    ivRounded += zeros;\n\t                    cDec += zeros.length;\n\t                }\n\t            } else if (cDec > temporaryDecimalPlacesOverride) {\n\t                ivRounded = truncateZeros(ivRounded, temporaryDecimalPlacesOverride);\n\t            } else if (cDec === 0 && temporaryDecimalPlacesOverride === 0) {\n\t                ivRounded = ivRounded.replace(/\\.$/, '');\n\t            }\n\t\n\t            return Number(ivRounded) === 0 ? ivRounded : nSign + ivRounded;\n\t        }\n\t\n\t        // Rounded length of the string after rounding\n\t        var rLength = void 0;\n\t        if (inputValueHasADot) {\n\t            rLength = settings.decimalPlacesOverride - 1;\n\t        } else {\n\t            rLength = settings.decimalPlacesOverride + dPos;\n\t        }\n\t\n\t        var tRound = Number(inputValue.charAt(rLength + 1));\n\t        var odd = inputValue.charAt(rLength) === '.' ? inputValue.charAt(rLength - 1) % 2 : inputValue.charAt(rLength) % 2;\n\t        var ivArray = inputValue.substring(0, rLength + 1).split('');\n\t\n\t        if (tRound > 4 && settings.roundingMethod === 'S' || // Round half up symmetric\n\t        tRound > 4 && settings.roundingMethod === 'A' && nSign === '' || // Round half up asymmetric positive values\n\t        tRound > 5 && settings.roundingMethod === 'A' && nSign === '-' || // Round half up asymmetric negative values\n\t        tRound > 5 && settings.roundingMethod === 's' || // Round half down symmetric\n\t        tRound > 5 && settings.roundingMethod === 'a' && nSign === '' || // Round half down asymmetric positive values\n\t        tRound > 4 && settings.roundingMethod === 'a' && nSign === '-' || // Round half down asymmetric negative values\n\t        tRound > 5 && settings.roundingMethod === 'B' || // Round half even \"Banker's Rounding\"\n\t        tRound === 5 && settings.roundingMethod === 'B' && odd === 1 || // Round half even \"Banker's Rounding\"\n\t        tRound > 0 && settings.roundingMethod === 'C' && nSign === '' || // Round to ceiling toward positive infinite\n\t        tRound > 0 && settings.roundingMethod === 'F' && nSign === '-' || // Round to floor toward negative infinite\n\t        tRound > 0 && settings.roundingMethod === 'U') {\n\t            // Round up away from zero\n\t            // Round up the last digit if required, and continue until no more 9's are found\n\t            for (i = ivArray.length - 1; i >= 0; i -= 1) {\n\t                if (ivArray[i] !== '.') {\n\t                    ivArray[i] = +ivArray[i] + 1;\n\t                    if (ivArray[i] < 10) {\n\t                        break;\n\t                    }\n\t\n\t                    if (i > 0) {\n\t                        ivArray[i] = '0';\n\t                    }\n\t                }\n\t            }\n\t        }\n\t\n\t        // Reconstruct the string, converting any 10's to 0's\n\t        ivArray = ivArray.slice(0, rLength + 1);\n\t\n\t        // Return the rounded value\n\t        ivRounded = truncateZeros(ivArray.join(''), temporaryDecimalPlacesOverride);\n\t\n\t        return Number(ivRounded) === 0 ? ivRounded : nSign + ivRounded;\n\t    }\n\t\n\t    /**\r\n\t     * Truncates the decimal part of a number.\r\n\t     *\r\n\t     * @param {string} s\r\n\t     * @param {object} settings\r\n\t     * @param {boolean} isPaste\r\n\t     * @returns {*}\r\n\t     */\n\t    function truncateDecimal(s, settings, isPaste) {\n\t        s = isPaste ? roundValue(s, settings) : s;\n\t\n\t        if (settings.decimalCharacter && settings.decimalPlacesOverride) {\n\t            var _s$split3 = s.split(settings.decimalCharacter),\n\t                _s$split4 = _slicedToArray(_s$split3, 2),\n\t                integerPart = _s$split4[0],\n\t                decimalPart = _s$split4[1];\n\t\n\t            // truncate decimal part to satisfying length since we would round it anyway\n\t\n\t\n\t            if (decimalPart && decimalPart.length > settings.decimalPlacesOverride) {\n\t                if (settings.decimalPlacesOverride > 0) {\n\t                    var modifiedDecimalPart = decimalPart.substring(0, settings.decimalPlacesOverride);\n\t                    s = '' + integerPart + settings.decimalCharacter + modifiedDecimalPart;\n\t                } else {\n\t                    s = integerPart;\n\t                }\n\t            }\n\t        }\n\t\n\t        return s;\n\t    }\n\t\n\t    /**\r\n\t     * Function to parse minimumValue, maximumValue & the input value to prepare for testing to determine if the value falls within the min / max range.\r\n\t     * Return an object example: minimumValue: \"999999999999999.99\" returns the following \"{s: -1, e: 12, c: Array[15]}\".\r\n\t     *\r\n\t     * This function is adapted from Big.js https://github.com/MikeMcl/big.js/. Many thanks to Mike.\r\n\t     *\r\n\t     * @param {number|string} n A numeric value.\r\n\t     * @returns {{}}\r\n\t     */\n\t    function parseStr(n) {\n\t        var x = {}; // A Big number instance.\n\t        var e = void 0;\n\t        var i = void 0;\n\t        var nL = void 0;\n\t        var j = void 0;\n\t\n\t        // Minus zero?\n\t        if (n === 0 && 1 / n < 0) {\n\t            n = '-0';\n\t        }\n\t\n\t        // Determine sign. 1 positive, -1 negative\n\t        n = n.toString();\n\t        if (isNegativeStrict(n)) {\n\t            n = n.slice(1);\n\t            x.s = -1;\n\t        } else {\n\t            x.s = 1;\n\t        }\n\t\n\t        // Decimal point?\n\t        e = n.indexOf('.');\n\t        if (e > -1) {\n\t            n = n.replace('.', '');\n\t        }\n\t\n\t        // length of string if no decimal character\n\t        if (e < 0) {\n\t            // Integer\n\t            e = n.length;\n\t        }\n\t\n\t        // Determine leading zeros\n\t        i = n.search(/[1-9]/i) === -1 ? n.length : n.search(/[1-9]/i);\n\t        nL = n.length;\n\t        if (i === nL) {\n\t            // Zero\n\t            x.e = 0;\n\t            x.c = [0];\n\t        } else {\n\t            // Determine trailing zeros\n\t            for (j = nL - 1; n.charAt(j) === '0'; j -= 1) {\n\t                nL -= 1;\n\t            }\n\t            nL -= 1;\n\t\n\t            // Decimal location\n\t            x.e = e - i - 1;\n\t            x.c = [];\n\t\n\t            // Convert string to array of digits without leading/trailing zeros\n\t            for (e = 0; i <= nL; i += 1) {\n\t                x.c[e] = +n.charAt(i);\n\t                e += 1;\n\t            }\n\t        }\n\t\n\t        return x;\n\t    }\n\t\n\t    /**\r\n\t     * Function to test if the input value falls with the Min / Max settings.\r\n\t     * This uses the parsed strings for the above parseStr function.\r\n\t     *\r\n\t     * This function is adapted from Big.js https://github.com/MikeMcl/big.js/. Many thanks to Mike.\r\n\t     *\r\n\t     * @param {object} y Big number instance\r\n\t     * @param {object} x Big number instance\r\n\t     * @returns {*}\r\n\t     */\n\t    function testMinMax(y, x) {\n\t        var xc = x.c;\n\t        var yc = y.c;\n\t        var i = x.s;\n\t        var j = y.s;\n\t        var k = x.e;\n\t        var l = y.e;\n\t\n\t        // Either zero?\n\t        if (!xc[0] || !yc[0]) {\n\t            var _result = void 0;\n\t            if (!xc[0]) {\n\t                _result = !yc[0] ? 0 : -j;\n\t            } else {\n\t                _result = i;\n\t            }\n\t            return _result;\n\t        }\n\t\n\t        // Signs differ?\n\t        if (i !== j) {\n\t            return i;\n\t        }\n\t        var xNeg = i < 0;\n\t\n\t        // Compare exponents\n\t        if (k !== l) {\n\t            return k > l ^ xNeg ? 1 : -1;\n\t        }\n\t        i = -1;\n\t        k = xc.length;\n\t        l = yc.length;\n\t        j = k < l ? k : l;\n\t\n\t        // Compare digit by digit\n\t        for (i += 1; i < j; i += 1) {\n\t            if (xc[i] !== yc[i]) {\n\t                return xc[i] > yc[i] ^ xNeg ? 1 : -1;\n\t            }\n\t        }\n\t\n\t        // Compare lengths\n\t        var result = void 0;\n\t        if (k === l) {\n\t            result = 0;\n\t        } else {\n\t            result = k > l ^ xNeg ? 1 : -1;\n\t        }\n\t\n\t        return result;\n\t    }\n\t\n\t    /**\r\n\t     * Check that the number satisfy the format conditions\r\n\t     * and lays between settings.minimumValue and settings.maximumValue\r\n\t     * and the string length does not exceed the digits in settings.minimumValue and settings.maximumValue\r\n\t     *\r\n\t     * @param {string} s\r\n\t     * @param {object} settings\r\n\t     * @returns {*}\r\n\t     */\n\t    function checkIfInRangeWithOverrideOption(s, settings) {\n\t        s = s.toString();\n\t        s = s.replace(',', '.');\n\t        var minParse = parseStr(settings.minimumValue);\n\t        var maxParse = parseStr(settings.maximumValue);\n\t        var valParse = parseStr(s);\n\t\n\t        var result = void 0;\n\t        switch (settings.overrideMinMaxLimits) {\n\t            case 'floor':\n\t                result = [testMinMax(minParse, valParse) > -1, true];\n\t                break;\n\t            case 'ceiling':\n\t                result = [true, testMinMax(maxParse, valParse) < 1];\n\t                break;\n\t            case 'ignore':\n\t                result = [true, true];\n\t                break;\n\t            default:\n\t                result = [testMinMax(minParse, valParse) > -1, testMinMax(maxParse, valParse) < 1];\n\t        }\n\t\n\t        return result;\n\t    }\n\t\n\t    /**\r\n\t     * Thanks to Anthony & Evan C\r\n\t     *\r\n\t     * @param {Element|string} element\r\n\t     * @returns {*|jQuery|HTMLElement}\r\n\t     */\n\t    function getCurrentElement(element) {\n\t        /*\r\n\t         * If the parameter is a string (and therefore is a CSS selector), then we need to modify this string in order\r\n\t         * for jQuery to be able to parse the selector correctly.\r\n\t         * cf. http://learn.jquery.com/using-jquery-core/faq/how-do-i-select-an-element-by-an-id-that-has-characters-used-in-css-notation/\r\n\t         */\n\t        if (isString(element)) {\n\t            //TODO This block is apparently never entered. We should remove it after making sure that's 100% the case\n\t            element = '#' + element.replace(/(:|\\.|\\[|]|,|=)/g, '\\\\$1');\n\t        }\n\t\n\t        return $(element);\n\t    }\n\t\n\t    /**\r\n\t     * Function that attach the autoNumeric field properties to the DOM element via an AutoNumericHolder object.\r\n\t     *\r\n\t     * @param {object} $this jQuery-selected DOM element\r\n\t     * @param {object} settings\r\n\t     * @param {boolean} update\r\n\t     * @returns {*}\r\n\t     */\n\t    function getAutoNumericHolder($this, settings) {\n\t        var update = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\t\n\t        var data = $this.data('autoNumeric');\n\t        if (!data) {\n\t            data = {};\n\t            $this.data('autoNumeric', data);\n\t        }\n\t\n\t        var holder = data.holder;\n\t        if (update || isUndefined(holder) && settings) {\n\t            holder = new AutoNumericHolder($this.get(0), settings);\n\t            data.holder = holder;\n\t        }\n\t\n\t        return holder;\n\t    }\n\t\n\t    /**\r\n\t     * Original settings saved for use when decimalPlacesShownOnFocus & noSeparatorOnFocus options are being used.\r\n\t     * Those original settings are used exclusively in the `focusin` and `focusout` event handlers.\r\n\t     *\r\n\t     * @param {object} settings\r\n\t     */\n\t    function keepAnOriginalSettingsCopy(settings) {\n\t        //TODO Rename the old option names to the new ones\n\t        settings.oDec = settings.decimalPlacesOverride;\n\t        settings.oPad = settings.allowDecimalPadding;\n\t        settings.oBracket = settings.negativeBracketsTypeOnBlur;\n\t        settings.oSep = settings.digitGroupSeparator;\n\t        settings.oSign = settings.currencySymbol;\n\t        settings.oSuffix = settings.suffixText;\n\t    }\n\t\n\t    /**\r\n\t     * Original settings saved for use when `decimalPlacesShownOnFocus` & `noSeparatorOnFocus` options are being used.\r\n\t     * This is taken from Quirksmode.\r\n\t     *\r\n\t     * @param {string} name\r\n\t     * @returns {*}\r\n\t     */\n\t    function readCookie(name) {\n\t        var nameEQ = name + '=';\n\t        var ca = document.cookie.split(';');\n\t        var c = '';\n\t        for (var i = 0; i < ca.length; i += 1) {\n\t            c = ca[i];\n\t            while (c.charAt(0) === ' ') {\n\t                c = c.substring(1, c.length);\n\t            }\n\t            if (c.indexOf(nameEQ) === 0) {\n\t                return c.substring(nameEQ.length, c.length);\n\t            }\n\t        }\n\t\n\t        return null;\n\t    }\n\t\n\t    /**\r\n\t     * Test if sessionStorage is supported.\r\n\t     * This is taken from Modernizr.\r\n\t     *\r\n\t     * @returns {boolean}\r\n\t     */\n\t    function storageTest() {\n\t        var mod = 'modernizr';\n\t        try {\n\t            sessionStorage.setItem(mod, mod);\n\t            sessionStorage.removeItem(mod);\n\t            return true;\n\t        } catch (e) {\n\t            return false;\n\t        }\n\t    }\n\t\n\t    /**\r\n\t     * properly formats the string to a numeric when leadingZero does not 'keep'.\r\n\t     *\r\n\t     * @param {string} value\r\n\t     * @param {object} settings\r\n\t     * @returns {string}\r\n\t     */\n\t    function cleanLeadingTrailingZeros(value, settings) {\n\t        // Return the empty string is the value is already empty. This prevent converting that value to '0'.\n\t        if (value === '') {\n\t            return '';\n\t        }\n\t\n\t        // Return '0' if the value is zero\n\t        if (Number(value) === 0 && settings.leadingZero !== 'keep') {\n\t            return '0';\n\t        }\n\t\n\t        if (settings.leadingZero !== 'keep') {\n\t            // Trim leading zero's - leaves one zero to the left of the decimal point\n\t            value = value.replace(/^(-)?0+(?=\\d)/g, '$1');\n\t\n\t            //TODO remove this from that function and use `trimPaddedZerosFromDecimalPlaces()` instead. Also create a new `trailingZero` option.\n\t            if (contains(value, '.')) {\n\t                // Trims trailing zeros after the decimal point\n\t                value = value.replace(/(\\.[0-9]*?)0+$/, '$1');\n\t            }\n\t        }\n\t        // Strips trailing decimal point\n\t        value = value.replace(/\\.$/, '');\n\t\n\t        return value;\n\t    }\n\t\n\t    /**\r\n\t     * Remove the trailing zeros in the decimal part of a number.\r\n\t     *\r\n\t     * @param {string} numericString\r\n\t     * @returns {*}\r\n\t     */\n\t    function trimPaddedZerosFromDecimalPlaces(numericString) {\n\t        var _numericString$split = numericString.split('.'),\n\t            _numericString$split2 = _slicedToArray(_numericString$split, 2),\n\t            integerPart = _numericString$split2[0],\n\t            decimalPart = _numericString$split2[1];\n\t\n\t        if (isUndefinedOrNullOrEmpty(decimalPart)) {\n\t            return integerPart;\n\t        }\n\t\n\t        var trimmedDecimalPart = decimalPart.replace(/0+$/g, '');\n\t\n\t        var result = void 0;\n\t        if (trimmedDecimalPart === '') {\n\t            result = integerPart;\n\t        } else {\n\t            result = integerPart + '.' + trimmedDecimalPart;\n\t        }\n\t\n\t        return result;\n\t    }\n\t\n\t    /**\r\n\t     * Creates or removes sessionStorage or cookie depending on what the browser is supporting.\r\n\t     *\r\n\t     * @param {Element|EventTarget} element\r\n\t     * @param {object} settings\r\n\t     * @param {string} action\r\n\t     * @returns {*}\r\n\t     */\n\t    function saveValueToPersistentStorage(element, settings, action) {\n\t        if (settings.saveValueToSessionStorage) {\n\t            var storedName = element.name !== '' && !isUndefined(element.name) ? 'AUTO_' + decodeURIComponent(element.name) : 'AUTO_' + element.id;\n\t            var date = void 0;\n\t            var expires = void 0;\n\t\n\t            // Sets cookie for browser that do not support sessionStorage IE 6 & IE 7\n\t            if (storageTest() === false) {\n\t                switch (action) {\n\t                    case 'set':\n\t                        document.cookie = storedName + '=' + settings.rawValue + '; expires= ; path=/';\n\t                        break;\n\t                    case 'wipe':\n\t                        date = new Date();\n\t                        date.setTime(date.getTime() + -1 * 24 * 60 * 60 * 1000);\n\t                        expires = '; expires=' + date.toUTCString(); // Note : `toGMTString()` has been deprecated (cf. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toGMTString)\n\t                        document.cookie = storedName + '=\\'\\' ;' + expires + '; path=/';\n\t                        break;\n\t                    case 'get':\n\t                        return readCookie(storedName);\n\t                }\n\t            } else {\n\t                switch (action) {\n\t                    case 'set':\n\t                        sessionStorage.setItem(storedName, settings.rawValue);\n\t                        break;\n\t                    case 'wipe':\n\t                        sessionStorage.removeItem(storedName);\n\t                        break;\n\t                    case 'get':\n\t                        return sessionStorage.getItem(storedName);\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    /**\r\n\t     * Holder object for field properties\r\n\t     */\n\t\n\t    var AutoNumericHolder = function () {\n\t        /**\r\n\t         * Class constructor\r\n\t         *\r\n\t         * @param {HTMLElement} that - A reference to the current DOM element\r\n\t         * @param {object} settings\r\n\t         */\n\t        function AutoNumericHolder(that, settings) {\n\t            _classCallCheck(this, AutoNumericHolder);\n\t\n\t            this.settings = settings;\n\t            this.that = that;\n\t            this.$that = $(that);\n\t            this.formatted = false;\n\t            this.settingsClone = settings;\n\t            this.value = that.value;\n\t        }\n\t\n\t        /**\r\n\t         * Update the value and the selection values inside the AutoNumericHolder object.\r\n\t         * This keeps tracks of the input value, as well as the current selection.\r\n\t         * This also resets the 'processed' and 'formatted' state.\r\n\t         *\r\n\t         * Note : Those two can change between the keydown, keypress and keyup events, that's why\r\n\t         *        this function is called on each event handler.\r\n\t         *\r\n\t         * @private\r\n\t         */\n\t\n\t\n\t        _createClass(AutoNumericHolder, [{\n\t            key: '_updateAutoNumericHolderProperties',\n\t            value: function _updateAutoNumericHolderProperties() {\n\t                this.value = this.that.value;\n\t                this.selection = getElementSelection(this.that);\n\t                this.processed = false;\n\t                this.formatted = false;\n\t            }\n\t\n\t            /**\r\n\t             * Update the keycode of the key that triggered the given event.\r\n\t             * Note : e.which is sometimes different than e.keyCode during the keypress event, when entering a printable character key (ie. 't'). `e.which` equals 0 for non-printable characters.\r\n\t             *\r\n\t             * //TODO Switch to the non-deprecated e.key attribute, instead of inconsistant e.which and e.keyCode.\r\n\t             * e.key describe the key name used to trigger the event.\r\n\t             * e.keyCode being deprecated : https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode\r\n\t             * How e.key works : https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key\r\n\t             * The key list is described here\r\n\t             * @link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\r\n\t             *\r\n\t             * @param {Event} e\r\n\t             * @private\r\n\t             */\n\t\n\t        }, {\n\t            key: '_updateAutoNumericHolderEventKeycode',\n\t            value: function _updateAutoNumericHolderEventKeycode(e) {\n\t                // Note: the keypress event overwrites meaningful value of e.keyCode, hence we do not update that value on 'keypress'\n\t                this.eventKeyCode = keyCodeNumber(e);\n\t            }\n\t\n\t            /**\r\n\t             * Set the text selection inside the input with the given start and end position.\r\n\t             *\r\n\t             * @param {int} start\r\n\t             * @param {int} end\r\n\t             * @param {undefined|boolean} setReal\r\n\t             * @private\r\n\t             */\n\t\n\t        }, {\n\t            key: '_setSelection',\n\t            value: function _setSelection(start, end, setReal) {\n\t                //TODO Modify setReal to be more explicit (and a boolean)\n\t                start = Math.max(start, 0);\n\t                end = Math.min(end, this.that.value.length); //TODO Replace `this.that.value.length` with `this.value.length`\n\t                this.selection = {\n\t                    start: start,\n\t                    end: end,\n\t                    length: end - start\n\t                };\n\t\n\t                if (isUndefined(setReal) || setReal) {\n\t                    setElementSelection(this.that, start, end);\n\t                }\n\t            }\n\t\n\t            /**\r\n\t             * Set the caret position inside the input at the given position.\r\n\t             *\r\n\t             * @param {int} pos\r\n\t             * @param {undefined|boolean} setReal\r\n\t             * @private\r\n\t             */\n\t\n\t        }, {\n\t            key: '_setCaretPosition',\n\t            value: function _setCaretPosition(pos, setReal) {\n\t                //TODO Modify setReal to be more explicit (and a boolean)\n\t                this._setSelection(pos, pos, setReal);\n\t            }\n\t\n\t            /**\r\n\t             * Return an array containing the string parts located on the left and right side of the caret or selection.\r\n\t             * Those parts are left 'untouched', ie. formatted by autoNumeric.\r\n\t             *\r\n\t             * @returns {[string, string]} The parts on the left and right of the caret or selection\r\n\t             * @private\r\n\t             */\n\t\n\t        }, {\n\t            key: '_getLeftAndRightPartAroundTheSelection',\n\t            value: function _getLeftAndRightPartAroundTheSelection() {\n\t                var value = this.value;\n\t                var left = value.substring(0, this.selection.start);\n\t                var right = value.substring(this.selection.end, value.length);\n\t\n\t                return [left, right];\n\t            }\n\t\n\t            /**\r\n\t             * Return an array containing the string parts located on the left and right side of the caret or selection.\r\n\t             * Those parts are unformatted (stripped) of any non-numbers characters.\r\n\t             *\r\n\t             * @returns {[string, string]} The parts on the left and right of the caret or selection, unformatted.\r\n\t             * @private\r\n\t             */\n\t\n\t        }, {\n\t            key: '_getUnformattedLeftAndRightPartAroundTheSelection',\n\t            value: function _getUnformattedLeftAndRightPartAroundTheSelection() {\n\t                var settingsClone = this.settingsClone;\n\t\n\t                var _getLeftAndRightPartA = this._getLeftAndRightPartAroundTheSelection(),\n\t                    _getLeftAndRightPartA2 = _slicedToArray(_getLeftAndRightPartA, 2),\n\t                    left = _getLeftAndRightPartA2[0],\n\t                    right = _getLeftAndRightPartA2[1];\n\t\n\t                if (left === '' && right === '') {\n\t                    settingsClone.trailingNegative = false;\n\t                }\n\t                // if changing the sign and left is equal to the number zero - prevents stripping the leading zeros\n\t                var stripZeros = true;\n\t                if (this.eventKeyCode === keyCode.Hyphen && Number(left) === 0) {\n\t                    stripZeros = false;\n\t                }\n\t                left = stripAllNonNumberCharacters(left, this.settingsClone, stripZeros);\n\t                right = stripAllNonNumberCharacters(right, this.settingsClone, false);\n\t\n\t                if (settingsClone.trailingNegative && !isNegative(left)) {\n\t                    left = '-' + left;\n\t                    right = right === '-' ? '' : right;\n\t                    settingsClone.trailingNegative = false;\n\t                }\n\t\n\t                return [left, right];\n\t            }\n\t\n\t            /**\r\n\t             * Strip parts from excess characters and leading zeros.\r\n\t             *\r\n\t             * @param {string} left\r\n\t             * @param {string} right\r\n\t             * @returns {[*,*]}\r\n\t             * @private\r\n\t             */\n\t\n\t        }, {\n\t            key: '_normalizeParts',\n\t            value: function _normalizeParts(left, right) {\n\t                var settingsClone = this.settingsClone;\n\t\n\t                // if changing the sign and left is equal to the number zero - prevents stripping the leading zeros\n\t                var stripZeros = true;\n\t                if (this.eventKeyCode === keyCode.Hyphen && Number(left) === 0) {\n\t                    stripZeros = false;\n\t                }\n\t                left = stripAllNonNumberCharacters(left, settingsClone, stripZeros);\n\t\n\t                // If right is not empty and first character is not decimalCharacter\n\t                right = stripAllNonNumberCharacters(right, settingsClone, false);\n\t\n\t                // Prevents multiple leading zeros from being entered\n\t                if (settingsClone.leadingZero === 'deny' && (this.eventKeyCode === keyCode.num0 || this.eventKeyCode === keyCode.numpad0) && Number(left) === 0 && !contains(left, settingsClone.decimalCharacter) && right !== '') {\n\t                    left = left.substring(0, left.length - 1);\n\t                }\n\t\n\t                if (settingsClone.trailingNegative && !isNegative(left)) {\n\t                    left = '-' + left;\n\t                    settingsClone.trailingNegative = false;\n\t                }\n\t\n\t                // Insert zero if has leading dot\n\t                this.newValue = left + right;\n\t                if (settingsClone.decimalCharacter) {\n\t                    var m = this.newValue.match(new RegExp('^' + settingsClone.aNegRegAutoStrip + '\\\\' + settingsClone.decimalCharacter));\n\t                    if (m) {\n\t                        left = left.replace(m[1], m[1] + '0');\n\t                        this.newValue = left + right;\n\t                    }\n\t                }\n\t\n\t                return [left, right];\n\t            }\n\t\n\t            /**\r\n\t             * Set part of number to value while keeping the cursor position. //TODO What about the cursor selection?\r\n\t             *\r\n\t             * @param {string} left\r\n\t             * @param {string} right\r\n\t             * @param {boolean} isPaste\r\n\t             * @returns {boolean}\r\n\t             * @private\r\n\t             */\n\t\n\t        }, {\n\t            key: '_setValueParts',\n\t            value: function _setValueParts(left, right) {\n\t                var isPaste = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\t\n\t                var settingsClone = this.settingsClone;\n\t                var parts = this._normalizeParts(left, right);\n\t\n\t                var _checkIfInRangeWithOv = checkIfInRangeWithOverrideOption(this.newValue, settingsClone),\n\t                    _checkIfInRangeWithOv2 = _slicedToArray(_checkIfInRangeWithOv, 2),\n\t                    minTest = _checkIfInRangeWithOv2[0],\n\t                    maxTest = _checkIfInRangeWithOv2[1];\n\t\n\t                var position = parts[0].length;\n\t                this.newValue = parts.join('');\n\t\n\t                if (minTest && maxTest) {\n\t                    this.newValue = truncateDecimal(this.newValue, settingsClone, isPaste);\n\t                    //TODO Check if we need to replace the hard-coded ',' with settings.decimalCharacter\n\t                    var testValue = contains(this.newValue, ',') ? this.newValue.replace(',', '.') : this.newValue;\n\t                    if (testValue === '' || testValue === settingsClone.negativeSignCharacter) {\n\t                        settingsClone.rawValue = settingsClone.emptyInputBehavior === 'zero' ? '0' : '';\n\t                    } else {\n\t                        settingsClone.rawValue = cleanLeadingTrailingZeros(testValue, settingsClone);\n\t                    }\n\t\n\t                    if (position > this.newValue.length) {\n\t                        position = this.newValue.length;\n\t                    }\n\t\n\t                    // Make sure when the user enter a '0' on the far left with a leading zero option set to 'deny', that the caret does not moves since the input is dropped (fix issue #283)\n\t                    if (position === 1 && parts[0] === '0' && settingsClone.leadingZero === 'deny') {\n\t                        // If the user enter `0`, then the caret is put on the right side of it (Fix issue #299)\n\t                        if (parts[1] === '' || parts[0] === '0' && parts[1] !== '') {\n\t                            position = 1;\n\t                        } else {\n\t                            position = 0;\n\t                        }\n\t                    }\n\t\n\t                    this.value = this.newValue;\n\t                    this._setCaretPosition(position, false);\n\t\n\t                    return true;\n\t                }\n\t\n\t                if (!minTest) {\n\t                    this.$that.trigger('autoNumeric:minExceeded');\n\t                } else if (!maxTest) {\n\t                    this.$that.trigger('autoNumeric:maxExceeded');\n\t                }\n\t\n\t                return false;\n\t            }\n\t\n\t            /**\r\n\t             * Helper function for `_expandSelectionOnSign()`.\r\n\t             *\r\n\t             * @returns {*} Sign position of a formatted value\r\n\t             * @private\r\n\t             */\n\t\n\t        }, {\n\t            key: '_getSignPosition',\n\t            value: function _getSignPosition() {\n\t                var settingsClone = this.settingsClone;\n\t                var currencySymbol = settingsClone.currencySymbol;\n\t                var that = this.that;\n\t\n\t                if (currencySymbol) {\n\t                    var currencySymbolLen = currencySymbol.length;\n\t                    if (settingsClone.currencySymbolPlacement === 'p') {\n\t                        var hasNeg = settingsClone.negativeSignCharacter && that.value && that.value.charAt(0) === settingsClone.negativeSignCharacter;\n\t                        return hasNeg ? [1, currencySymbolLen + 1] : [0, currencySymbolLen];\n\t                    }\n\t                    var valueLen = that.value.length;\n\t                    return [valueLen - currencySymbolLen, valueLen];\n\t                }\n\t\n\t                return [1000, -1];\n\t            }\n\t\n\t            /**\r\n\t             * Expands selection to cover whole sign\r\n\t             * Prevents partial deletion/copying/overwriting of a sign\r\n\t             *\r\n\t             * @param {undefined|boolean} setReal\r\n\t             * @private\r\n\t             */\n\t\n\t        }, {\n\t            key: '_expandSelectionOnSign',\n\t            value: function _expandSelectionOnSign(setReal) {\n\t                //TODO Modify setReal to be more explicit (and a boolean only)\n\t                //TODO Use array destructuring here to set signPosition to more explicit variables\n\t                var signPosition = this._getSignPosition();\n\t                var selection = this.selection;\n\t\n\t                // If selection catches something except sign and catches only space from sign\n\t                if (selection.start < signPosition[1] && selection.end > signPosition[0]) {\n\t                    // Then select without empty space\n\t                    if ((selection.start < signPosition[0] || selection.end > signPosition[1]) && this.value.substring(Math.max(selection.start, signPosition[0]), Math.min(selection.end, signPosition[1])).match(/^\\s*$/)) {\n\t                        if (selection.start < signPosition[0]) {\n\t                            this._setSelection(selection.start, signPosition[0], setReal);\n\t                        } else {\n\t                            this._setSelection(signPosition[1], selection.end, setReal);\n\t                        }\n\t                    } else {\n\t                        // Else select with whole sign\n\t                        this._setSelection(Math.min(selection.start, signPosition[0]), Math.max(selection.end, signPosition[1]), setReal);\n\t                    }\n\t                }\n\t            }\n\t\n\t            /**\r\n\t             * Try to strip pasted value to digits\r\n\t             */\n\t\n\t        }, {\n\t            key: '_checkPaste',\n\t            value: function _checkPaste() {\n\t                if (!isUndefined(this.valuePartsBeforePaste)) {\n\t                    var oldParts = this.valuePartsBeforePaste;\n\t\n\t                    var _getLeftAndRightPartA3 = this._getLeftAndRightPartAroundTheSelection(),\n\t                        _getLeftAndRightPartA4 = _slicedToArray(_getLeftAndRightPartA3, 2),\n\t                        left = _getLeftAndRightPartA4[0],\n\t                        right = _getLeftAndRightPartA4[1];\n\t\n\t                    // Try to strip the pasted value first\n\t\n\t\n\t                    delete this.valuePartsBeforePaste;\n\t\n\t                    var modifiedLeftPart = left.substr(0, oldParts[0].length) + stripAllNonNumberCharacters(left.substr(oldParts[0].length), this.settingsClone, true);\n\t                    if (!this._setValueParts(modifiedLeftPart, right, true)) {\n\t                        this.value = oldParts.join('');\n\t                        this._setCaretPosition(oldParts[0].length, false);\n\t                    }\n\t                }\n\t            }\n\t\n\t            /**\r\n\t             * Process pasting, cursor moving and skipping of not interesting keys.\r\n\t             * If this function returns TRUE, then further processing is not performed.\r\n\t             *\r\n\t             * @param {Event} e\r\n\t             * @returns {boolean}\r\n\t             * @private\r\n\t             */\n\t\n\t        }, {\n\t            key: '_skipAlways',\n\t            value: function _skipAlways(e) {\n\t                // Catch the ctrl up on ctrl-v\n\t                if ((e.ctrlKey || e.metaKey) && e.type === 'keyup' && !isUndefined(this.valuePartsBeforePaste) || e.shiftKey && this.eventKeyCode === keyCode.Insert) {\n\t                    //TODO Move this test inside the `onKeyup` handler\n\t                    this._checkPaste();\n\t                    return false;\n\t                }\n\t\n\t                // Skip all function keys (F1-F12), Windows keys, tab and other special keys\n\t                if (this.eventKeyCode >= keyCode.F1 && this.eventKeyCode <= keyCode.F12 || this.eventKeyCode >= keyCode.Windows && this.eventKeyCode <= keyCode.RightClick || this.eventKeyCode >= keyCode.Tab && this.eventKeyCode < keyCode.Space ||\n\t                // `e.which` is sometimes different than `this.eventKeyCode` during the keypress event when entering a printable character key (ie. 't'). Also, `e.which` equals 0 for non-printable characters.\n\t                this.eventKeyCode < keyCode.Backspace && (e.which === 0 || e.which === this.eventKeyCode) || this.eventKeyCode === keyCode.NumLock || this.eventKeyCode === keyCode.ScrollLock || this.eventKeyCode === keyCode.Insert || this.eventKeyCode === keyCode.Command) {\n\t                    return true;\n\t                }\n\t\n\t                // If a \"Select all\" keyboard shortcut is detected (ctrl + a)\n\t                if ((e.ctrlKey || e.metaKey) && this.eventKeyCode === keyCode.a) {\n\t                    if (this.settings.selectNumberOnly) {\n\t                        // `preventDefault()` is used here to prevent the browser to first select all the input text (including the currency sign), otherwise we would see that whole selection first in a flash, then the selection with only the number part without the currency sign.\n\t                        e.preventDefault();\n\t                        var valueLen = this.that.value.length;\n\t                        var currencySymbolLen = this.settings.currencySymbol.length;\n\t                        var negLen = !isNegative(this.that.value) ? 0 : 1;\n\t                        var suffixTextLen = this.settings.suffixText.length;\n\t                        var currencySymbolPlacement = this.settings.currencySymbolPlacement;\n\t                        var negativePositiveSignPlacement = this.settings.negativePositiveSignPlacement;\n\t\n\t                        var start = void 0;\n\t                        if (currencySymbolPlacement === 's') {\n\t                            start = 0;\n\t                        } else {\n\t                            start = negativePositiveSignPlacement === 'l' && negLen === 1 && currencySymbolLen > 0 ? currencySymbolLen + 1 : currencySymbolLen;\n\t                        }\n\t\n\t                        var end = void 0;\n\t                        if (currencySymbolPlacement === 'p') {\n\t                            end = valueLen - suffixTextLen;\n\t                        } else {\n\t                            switch (negativePositiveSignPlacement) {\n\t                                case 'l':\n\t                                    end = valueLen - (suffixTextLen + currencySymbolLen);\n\t                                    break;\n\t                                case 'r':\n\t                                    end = currencySymbolLen > 0 ? valueLen - (currencySymbolLen + negLen + suffixTextLen) : valueLen - (currencySymbolLen + suffixTextLen);\n\t                                    break;\n\t                                default:\n\t                                    end = valueLen - (currencySymbolLen + suffixTextLen);\n\t                            }\n\t                        }\n\t\n\t                        setElementSelection(this.that, start, end);\n\t                    }\n\t\n\t                    return true;\n\t                }\n\t\n\t                // If a \"Copy\", \"Paste\" or \"Cut\" keyboard shortcut is detected (respectively 'ctrl + c', 'ctrl + v' or 'ctrl + x')\n\t                if ((e.ctrlKey || e.metaKey) && (this.eventKeyCode === keyCode.c || this.eventKeyCode === keyCode.v || this.eventKeyCode === keyCode.x)) {\n\t                    if (e.type === 'keydown') {\n\t                        this._expandSelectionOnSign();\n\t                    }\n\t\n\t                    // Try to prevent wrong paste\n\t                    if (this.eventKeyCode === keyCode.v || this.eventKeyCode === keyCode.Insert) {\n\t                        if (e.type === 'keydown' || e.type === 'keypress') {\n\t                            if (isUndefined(this.valuePartsBeforePaste)) {\n\t                                this.valuePartsBeforePaste = this._getLeftAndRightPartAroundTheSelection();\n\t                            }\n\t                        } else {\n\t                            this._checkPaste();\n\t                        }\n\t                    }\n\t\n\t                    return e.type === 'keydown' || e.type === 'keypress' || this.eventKeyCode === keyCode.c;\n\t                }\n\t\n\t                if (e.ctrlKey || e.metaKey) {\n\t                    return true;\n\t                }\n\t\n\t                // Jump over thousand separator\n\t                //TODO Move this test inside the `onKeydown` handler\n\t                if (this.eventKeyCode === keyCode.LeftArrow || this.eventKeyCode === keyCode.RightArrow) {\n\t                    if (e.type === 'keydown' && !e.shiftKey) {\n\t                        if (this.eventKeyCode === keyCode.LeftArrow && (this.that.value.charAt(this.selection.start - 2) === this.settingsClone.digitGroupSeparator || this.that.value.charAt(this.selection.start - 2) === this.settingsClone.decimalCharacter)) {\n\t                            this._setCaretPosition(this.selection.start - 1);\n\t                        } else if (this.eventKeyCode === keyCode.RightArrow && (this.that.value.charAt(this.selection.start + 1) === this.settingsClone.digitGroupSeparator || this.that.value.charAt(this.selection.start + 1) === this.settingsClone.decimalCharacter)) {\n\t                            this._setCaretPosition(this.selection.start + 1);\n\t                        }\n\t                    }\n\t                    return true;\n\t                }\n\t\n\t                return this.eventKeyCode >= keyCode.PageDown && this.eventKeyCode <= keyCode.DownArrow;\n\t            }\n\t\n\t            /**\r\n\t             * Process deletion of characters when the minus sign is to the right of the numeric characters.\r\n\t             *\r\n\t             * @param {string} left The part on the left of the caret or selection\r\n\t             * @param {string} right The part on the right of the caret or selection\r\n\t             * @returns {[string, string]}\r\n\t             * @private\r\n\t             */\n\t\n\t        }, {\n\t            key: '_processCharacterDeletionIfTrailingNegativeSign',\n\t            value: function _processCharacterDeletionIfTrailingNegativeSign(_ref) {\n\t                var _ref2 = _slicedToArray(_ref, 2),\n\t                    left = _ref2[0],\n\t                    right = _ref2[1];\n\t\n\t                var settingsClone = this.settingsClone;\n\t                if (settingsClone.currencySymbolPlacement === 'p' && settingsClone.negativePositiveSignPlacement === 's') {\n\t                    if (this.eventKeyCode === keyCode.Backspace) {\n\t                        settingsClone.caretFix = this.selection.start >= this.value.indexOf(settingsClone.suffixText) && settingsClone.suffixText !== '';\n\t                        if (this.value.charAt(this.selection.start - 1) === '-') {\n\t                            left = left.substring(1);\n\t                        } else if (this.selection.start <= this.value.length - settingsClone.suffixText.length) {\n\t                            left = left.substring(0, left.length - 1);\n\t                        }\n\t                    } else {\n\t                        settingsClone.caretFix = this.selection.start >= this.value.indexOf(settingsClone.suffixText) && settingsClone.suffixText !== '';\n\t                        if (this.selection.start >= this.value.indexOf(settingsClone.currencySymbol) + settingsClone.currencySymbol.length) {\n\t                            right = right.substring(1, right.length);\n\t                        }\n\t                        if (isNegative(left) && this.value.charAt(this.selection.start) === '-') {\n\t                            left = left.substring(1);\n\t                        }\n\t                    }\n\t                }\n\t\n\t                //TODO Merge the two following 'if' blocks into one `if (settingsClone.currencySymbolPlacement === 's') {` and a switch on settingsClone.negativePositiveSignPlacement\n\t                if (settingsClone.currencySymbolPlacement === 's' && settingsClone.negativePositiveSignPlacement === 'l') {\n\t                    settingsClone.caretFix = this.selection.start >= this.value.indexOf(settingsClone.negativeSignCharacter) + settingsClone.negativeSignCharacter.length;\n\t                    if (this.eventKeyCode === keyCode.Backspace) {\n\t                        if (this.selection.start === this.value.indexOf(settingsClone.negativeSignCharacter) + settingsClone.negativeSignCharacter.length && contains(this.value, settingsClone.negativeSignCharacter)) {\n\t                            left = left.substring(1);\n\t                        } else if (left !== '-' && (this.selection.start <= this.value.indexOf(settingsClone.negativeSignCharacter) || !contains(this.value, settingsClone.negativeSignCharacter))) {\n\t                            left = left.substring(0, left.length - 1);\n\t                        }\n\t                    } else {\n\t                        if (left[0] === '-') {\n\t                            right = right.substring(1);\n\t                        }\n\t                        if (this.selection.start === this.value.indexOf(settingsClone.negativeSignCharacter) && contains(this.value, settingsClone.negativeSignCharacter)) {\n\t                            left = left.substring(1);\n\t                        }\n\t                    }\n\t                }\n\t\n\t                if (settingsClone.currencySymbolPlacement === 's' && settingsClone.negativePositiveSignPlacement === 'r') {\n\t                    settingsClone.caretFix = this.selection.start >= this.value.indexOf(settingsClone.negativeSignCharacter) + settingsClone.negativeSignCharacter.length;\n\t                    if (this.eventKeyCode === keyCode.Backspace) {\n\t                        if (this.selection.start === this.value.indexOf(settingsClone.negativeSignCharacter) + settingsClone.negativeSignCharacter.length) {\n\t                            left = left.substring(1);\n\t                        } else if (left !== '-' && this.selection.start <= this.value.indexOf(settingsClone.negativeSignCharacter) - settingsClone.currencySymbol.length) {\n\t                            left = left.substring(0, left.length - 1);\n\t                        } else if (left !== '' && !contains(this.value, settingsClone.negativeSignCharacter)) {\n\t                            left = left.substring(0, left.length - 1);\n\t                        }\n\t                    } else {\n\t                        settingsClone.caretFix = this.selection.start >= this.value.indexOf(settingsClone.currencySymbol) && settingsClone.currencySymbol !== '';\n\t                        if (this.selection.start === this.value.indexOf(settingsClone.negativeSignCharacter)) {\n\t                            left = left.substring(1);\n\t                        }\n\t                        right = right.substring(1);\n\t                    }\n\t                }\n\t\n\t                return [left, right];\n\t            }\n\t\n\t            /**\r\n\t             * Process the deletion of characters.\r\n\t             */\n\t\n\t        }, {\n\t            key: '_processCharacterDeletion',\n\t            value: function _processCharacterDeletion() {\n\t                var settingsClone = this.settingsClone;\n\t\n\t                var left = void 0;\n\t                var right = void 0;\n\t\n\t                if (!this.selection.length) {\n\t                    var _getUnformattedLeftAn = this._getUnformattedLeftAndRightPartAroundTheSelection();\n\t\n\t                    var _getUnformattedLeftAn2 = _slicedToArray(_getUnformattedLeftAn, 2);\n\t\n\t                    left = _getUnformattedLeftAn2[0];\n\t                    right = _getUnformattedLeftAn2[1];\n\t\n\t                    if (left === '' && right === '') {\n\t                        settingsClone.throwInput = false;\n\t                    }\n\t\n\t                    if ((settingsClone.currencySymbolPlacement === 'p' && settingsClone.negativePositiveSignPlacement === 's' || settingsClone.currencySymbolPlacement === 's' && (settingsClone.negativePositiveSignPlacement === 'l' || settingsClone.negativePositiveSignPlacement === 'r')) && isNegative(this.value)) {\n\t                        var _processCharacterDele = this._processCharacterDeletionIfTrailingNegativeSign([left, right]); //TODO Change `this.value` to `this.that.value`?\n\t\n\t\n\t                        var _processCharacterDele2 = _slicedToArray(_processCharacterDele, 2);\n\t\n\t                        left = _processCharacterDele2[0];\n\t                        right = _processCharacterDele2[1];\n\t                    } else {\n\t                        if (this.eventKeyCode === keyCode.Backspace) {\n\t                            left = left.substring(0, left.length - 1);\n\t                        } else {\n\t                            right = right.substring(1, right.length);\n\t                        }\n\t                    }\n\t                } else {\n\t                    this._expandSelectionOnSign(false);\n\t\n\t                    var _getUnformattedLeftAn3 = this._getUnformattedLeftAndRightPartAroundTheSelection();\n\t\n\t                    var _getUnformattedLeftAn4 = _slicedToArray(_getUnformattedLeftAn3, 2);\n\t\n\t                    left = _getUnformattedLeftAn4[0];\n\t                    right = _getUnformattedLeftAn4[1];\n\t                }\n\t\n\t                this._setValueParts(left, right);\n\t            }\n\t\n\t            /**\r\n\t             * This function decides if the key pressed should be dropped or accepted, and modify the value 'on-the-fly' accordingly.\r\n\t             * Returns TRUE if the keycode is allowed.\r\n\t             * This functions also modify the value on-the-fly. //FIXME This should use another function in order to separate the test and the modification\r\n\t             *\r\n\t             * @param {Event|string} eventOrChar The event object, or the character entered (from an android device)\r\n\t             * @returns {boolean}\r\n\t             */\n\t\n\t        }, {\n\t            key: '_processCharacterInsertion',\n\t            value: function _processCharacterInsertion(eventOrChar) {\n\t                var settingsClone = this.settingsClone;\n\t\n\t                var _getUnformattedLeftAn5 = this._getUnformattedLeftAndRightPartAroundTheSelection(),\n\t                    _getUnformattedLeftAn6 = _slicedToArray(_getUnformattedLeftAn5, 2),\n\t                    left = _getUnformattedLeftAn6[0],\n\t                    right = _getUnformattedLeftAn6[1];\n\t\n\t                var eventCharacter = void 0;\n\t                if (isString(eventOrChar)) {\n\t                    // Android browsers\n\t                    eventCharacter = eventOrChar;\n\t                } else {\n\t                    // Normal browsers\n\t                    settingsClone.throwInput = true;\n\t\n\t                    // Retrieve the real character that has been entered (ie. 'a' instead of the key code)\n\t                    eventCharacter = character(eventOrChar);\n\t                }\n\t\n\t                // Start rules when the decimal character key is pressed always use numeric pad dot to insert decimal separator\n\t                // Do not allow decimal character if no decimal part allowed\n\t                if (eventCharacter === settingsClone.decimalCharacter || settingsClone.decimalCharacterAlternative && eventCharacter === settingsClone.decimalCharacterAlternative || (eventCharacter === '.' || eventCharacter === ',') && this.eventKeyCode === keyCode.DotNumpad) {\n\t                    if (!settingsClone.decimalPlacesOverride || !settingsClone.decimalCharacter) {\n\t                        return true;\n\t                    }\n\t\n\t                    // Do not allow decimal character before negativeSignCharacter character\n\t                    if (settingsClone.negativeSignCharacter && contains(right, settingsClone.negativeSignCharacter)) {\n\t                        return true;\n\t                    }\n\t\n\t                    // Do not allow decimal character if other decimal character present\n\t                    if (contains(left, settingsClone.decimalCharacter)) {\n\t                        return true;\n\t                    }\n\t\n\t                    if (right.indexOf(settingsClone.decimalCharacter) > 0) {\n\t                        return true;\n\t                    }\n\t\n\t                    if (right.indexOf(settingsClone.decimalCharacter) === 0) {\n\t                        right = right.substr(1);\n\t                    }\n\t\n\t                    this._setValueParts(left + settingsClone.decimalCharacter, right);\n\t\n\t                    return true;\n\t                }\n\t\n\t                // Prevent minus if not allowed\n\t                if ((eventCharacter === '-' || eventCharacter === '+') && settingsClone.negativeSignCharacter === '-') {\n\t                    if (!settingsClone) {\n\t                        return true;\n\t                    }\n\t\n\t                    // Caret is always after minus\n\t                    if (settingsClone.currencySymbolPlacement === 'p' && settingsClone.negativePositiveSignPlacement === 's' || settingsClone.currencySymbolPlacement === 's' && settingsClone.negativePositiveSignPlacement !== 'p') {\n\t                        if (left === '' && contains(right, settingsClone.negativeSignCharacter)) {\n\t                            left = settingsClone.negativeSignCharacter;\n\t                            right = right.substring(1, right.length);\n\t                        }\n\t\n\t                        // Change number sign, remove part if should\n\t                        if (isNegativeStrict(left) || contains(left, settingsClone.negativeSignCharacter)) {\n\t                            left = left.substring(1, left.length);\n\t                        } else {\n\t                            left = eventCharacter === '-' ? settingsClone.negativeSignCharacter + left : left;\n\t                        }\n\t                    } else {\n\t                        if (left === '' && contains(right, settingsClone.negativeSignCharacter)) {\n\t                            left = settingsClone.negativeSignCharacter;\n\t                            right = right.substring(1, right.length);\n\t                        }\n\t\n\t                        // Change number sign, remove part if should\n\t                        if (left.charAt(0) === settingsClone.negativeSignCharacter) {\n\t                            left = left.substring(1, left.length);\n\t                        } else {\n\t                            left = eventCharacter === '-' ? settingsClone.negativeSignCharacter + left : left;\n\t                        }\n\t                    }\n\t\n\t                    this._setValueParts(left, right);\n\t\n\t                    return true;\n\t                }\n\t\n\t                // If the user tries to insert digit before minus sign\n\t                var eventNumber = Number(eventCharacter);\n\t                if (eventNumber >= 0 && eventNumber <= 9) {\n\t                    if (settingsClone.negativeSignCharacter && left === '' && contains(right, settingsClone.negativeSignCharacter)) {\n\t                        left = settingsClone.negativeSignCharacter;\n\t                        right = right.substring(1, right.length);\n\t                    }\n\t\n\t                    if (settingsClone.maximumValue <= 0 && settingsClone.minimumValue < settingsClone.maximumValue && !contains(this.value, settingsClone.negativeSignCharacter) && eventCharacter !== '0') {\n\t                        left = settingsClone.negativeSignCharacter + left;\n\t                    }\n\t\n\t                    this._setValueParts(left + eventCharacter, right);\n\t\n\t                    return true;\n\t                }\n\t\n\t                // Prevent any other character\n\t                settingsClone.throwInput = false;\n\t\n\t                return false;\n\t            }\n\t\n\t            /**\r\n\t             * Formatting of just processed value while keeping the cursor position\r\n\t             *\r\n\t             * @param {Event} e\r\n\t             * @private\r\n\t             */\n\t\n\t        }, {\n\t            key: '_formatValue',\n\t            value: function _formatValue(e) {\n\t                var _this = this;\n\t\n\t                var settingsClone = this.settingsClone;\n\t                var leftLength = this.value;\n\t\n\t                var _getUnformattedLeftAn7 = this._getUnformattedLeftAndRightPartAroundTheSelection(),\n\t                    _getUnformattedLeftAn8 = _slicedToArray(_getUnformattedLeftAn7, 1),\n\t                    left = _getUnformattedLeftAn8[0];\n\t\n\t                // No grouping separator and no currency sign\n\t\n\t\n\t                if ((settingsClone.digitGroupSeparator === '' || settingsClone.digitGroupSeparator !== '' && !contains(leftLength, settingsClone.digitGroupSeparator)) && (settingsClone.currencySymbol === '' || settingsClone.currencySymbol !== '' && !contains(leftLength, settingsClone.currencySymbol))) {\n\t                    var _leftLength$split = leftLength.split(settingsClone.decimalCharacter),\n\t                        _leftLength$split2 = _slicedToArray(_leftLength$split, 1),\n\t                        subParts = _leftLength$split2[0];\n\t\n\t                    var nSign = '';\n\t                    if (isNegative(subParts)) {\n\t                        nSign = '-';\n\t                        subParts = subParts.replace('-', '');\n\t                        left = left.replace('-', '');\n\t                    }\n\t\n\t                    // Strip leading zero on positive value if needed\n\t                    if (nSign === '' && subParts.length > settingsClone.mIntPos && left.charAt(0) === '0') {\n\t                        left = left.slice(1);\n\t                    }\n\t\n\t                    // Strip leading zero on negative value if needed\n\t                    if (nSign === '-' && subParts.length > settingsClone.mIntNeg && left.charAt(0) === '0') {\n\t                        left = left.slice(1);\n\t                    }\n\t\n\t                    left = nSign + left;\n\t                }\n\t\n\t                var value = addGroupSeparators(this.value, this.settingsClone);\n\t                var position = value.length;\n\t                if (value) {\n\t                    // Prepare regexp which searches for cursor position from unformatted left part\n\t                    var leftAr = left.split('');\n\t\n\t                    // Fixes caret position with trailing minus sign\n\t                    if ((settingsClone.negativePositiveSignPlacement === 's' || settingsClone.currencySymbolPlacement === 's' && settingsClone.negativePositiveSignPlacement !== 'p') && leftAr[0] === '-' && settingsClone.negativeSignCharacter !== '') {\n\t                        leftAr.shift();\n\t\n\t                        if ((this.eventKeyCode === keyCode.Backspace || this.eventKeyCode === keyCode.Delete) && settingsClone.caretFix) {\n\t                            if (settingsClone.currencySymbolPlacement === 's' && settingsClone.negativePositiveSignPlacement === 'l') {\n\t                                leftAr.push('-');\n\t                                settingsClone.caretFix = e.type === 'keydown';\n\t                            }\n\t\n\t                            if (settingsClone.currencySymbolPlacement === 'p' && settingsClone.negativePositiveSignPlacement === 's') {\n\t                                leftAr.push('-');\n\t                                settingsClone.caretFix = e.type === 'keydown';\n\t                            }\n\t\n\t                            if (settingsClone.currencySymbolPlacement === 's' && settingsClone.negativePositiveSignPlacement === 'r') {\n\t                                (function () {\n\t                                    var signParts = settingsClone.currencySymbol.split('');\n\t                                    var escapeChr = ['\\\\', '^', '$', '.', '|', '?', '*', '+', '(', ')', '['];\n\t                                    var escapedParts = [];\n\t                                    $.each(signParts, function (i, miniParts) {\n\t                                        miniParts = signParts[i];\n\t                                        if (isInArray(miniParts, escapeChr)) {\n\t                                            escapedParts.push('\\\\' + miniParts);\n\t                                        } else {\n\t                                            escapedParts.push(miniParts);\n\t                                        }\n\t                                    });\n\t\n\t                                    if (_this.eventKeyCode === keyCode.Backspace) {\n\t                                        escapedParts.push('-');\n\t                                    }\n\t\n\t                                    // Pushing the escaped sign\n\t                                    leftAr.push(escapedParts.join(''));\n\t                                    settingsClone.caretFix = e.type === 'keydown';\n\t                                })();\n\t                            }\n\t                        }\n\t                    }\n\t\n\t                    for (var i = 0; i < leftAr.length; i++) {\n\t                        if (!leftAr[i].match('\\\\d')) {\n\t                            leftAr[i] = '\\\\' + leftAr[i];\n\t                        }\n\t                    }\n\t\n\t                    var leftReg = new RegExp('^.*?' + leftAr.join('.*?'));\n\t\n\t                    // Search cursor position in formatted value\n\t                    var newLeft = value.match(leftReg);\n\t                    if (newLeft) {\n\t                        position = newLeft[0].length;\n\t\n\t                        // If the positive sign is shown, calculate the caret position accordingly\n\t                        if (settingsClone.showPositiveSign) {\n\t                            if (position === 0 && newLeft.input.charAt(0) === settingsClone.positiveSignCharacter) {\n\t                                position = newLeft.input.indexOf(settingsClone.currencySymbol) === 1 ? settingsClone.currencySymbol.length + 1 : 1;\n\t                            }\n\t\n\t                            if (position === 0 && newLeft.input.charAt(settingsClone.currencySymbol.length) === settingsClone.positiveSignCharacter) {\n\t                                position = settingsClone.currencySymbol.length + 1;\n\t                            }\n\t                        }\n\t\n\t                        // If we are just before the sign which is in prefix position\n\t                        if ((position === 0 && value.charAt(0) !== settingsClone.negativeSignCharacter || position === 1 && value.charAt(0) === settingsClone.negativeSignCharacter) && settingsClone.currencySymbol && settingsClone.currencySymbolPlacement === 'p') {\n\t                            // Place caret after prefix sign\n\t                            //TODO Should the test be 'isNegative' instead of 'isNegativeStrict' in order to search for '-' everywhere in the string?\n\t                            position = this.settingsClone.currencySymbol.length + (isNegativeStrict(value) ? 1 : 0);\n\t                        }\n\t                    } else {\n\t                        if (settingsClone.currencySymbol && settingsClone.currencySymbolPlacement === 's') {\n\t                            // If we could not find a place for cursor and have a sign as a suffix\n\t                            // Place caret before suffix currency sign\n\t                            position -= settingsClone.currencySymbol.length;\n\t                        }\n\t\n\t                        if (settingsClone.suffixText) {\n\t                            // If we could not find a place for cursor and have a suffix\n\t                            // Place caret before suffix\n\t                            position -= settingsClone.suffixText.length;\n\t                        }\n\t                    }\n\t                }\n\t\n\t                // Only update the value if it has changed. This prevents modifying the selection, if any.\n\t                if (value !== this.that.value || value === this.that.value && (this.eventKeyCode === keyCode.num0 || this.eventKeyCode === keyCode.numpad0)) {\n\t                    this.that.value = value;\n\t                    this._setCaretPosition(position);\n\t                }\n\t\n\t                if (settingsClone.androidSelectionStart !== null) {\n\t                    // If an Android browser is detected, fix the caret position\n\t                    // Unfortunately this does not fix all android browsers, only Android Chrome currently.\n\t                    // This is due to the fact those provide different order of events and/or keycodes thrown (this is a real mess :|).\n\t                    this._setCaretPosition(settingsClone.androidSelectionStart);\n\t                }\n\t\n\t                this.formatted = true; //TODO Rename `this.formatted` to `this._formatExecuted`, since it's possible this function does not need to format anything (in the case where the keycode is dropped for instance)\n\t            }\n\t        }]);\n\t\n\t        return AutoNumericHolder;\n\t    }();\n\t\n\t    /**\r\n\t     * This function factorise the `getString()` and `getArray()` functions since they share quite a lot of code.\r\n\t     *\r\n\t     * The \"getString\" method uses jQuery's .serialize() method that creates a text string in standard URL-encoded notation.\r\n\t     * The \"getArray\" method on the other hand uses jQuery's .serializeArray() method that creates array or objects that can be encoded as a JSON string.\r\n\t     *\r\n\t     * It then loops through the string and un-formats the inputs with autoNumeric.\r\n\t     * By defaults values returned as ISO numeric string \"1234.56\" or \"-1234.56\" where the decimal character is a period\r\n\t     * Locale formats are supported \"1234.56-\" or \"1234,56\" or \"-1234,56 or \"1234,56-\", or even plain numbers => please see option \"outputFormat\" for more details\r\n\t     *\r\n\t     * @param {boolean} getArrayBehavior - If set to TRUE, then this function behave like `getArray()`, otherwise if set to FALSE, it behave like `getString()`\r\n\t     * @param {HTMLElement} that - A reference to the current DOM element\r\n\t     * @returns {*}\r\n\t     * @private\r\n\t     */\n\t\n\t\n\t    function _getStringOrArray() {\n\t        var getArrayBehavior = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\t        var that = arguments[1];\n\t\n\t        var $this = getCurrentElement(that);\n\t        var formIndex = $('form').index($this);\n\t        var allFormElements = $('form:eq(' + formIndex + ')')[0];\n\t        var aiIndex = [];\n\t\n\t        // all input index\n\t        var scIndex = [];\n\t\n\t        // successful control index\n\t        var rSubmitterTypes = /^(?:submit|button|image|reset|file)$/i;\n\t\n\t        // from jQuery serialize method\n\t        var rSubmittable = /^(?:input|select|textarea|keygen)/i;\n\t\n\t        // from jQuery serialize method\n\t        var rCheckableType = /^(?:checkbox|radio)$/i;\n\t        var rNonAutoNumericTypes = /^(?:button|checkbox|color|date|datetime|datetime-local|email|file|image|month|number|password|radio|range|reset|search|submit|time|url|week)/i;\n\t\n\t        var count = 0;\n\t\n\t        // index of successful elements\n\t        $.each(allFormElements, function (i, field) {\n\t            if (field.name !== '' && rSubmittable.test(field.localName) && !rSubmitterTypes.test(field.type) && !field.disabled && (field.checked || !rCheckableType.test(field.type))) {\n\t                scIndex.push(count);\n\t                count++;\n\t            } else {\n\t                scIndex.push(-1);\n\t            }\n\t        });\n\t\n\t        // index of all inputs tags except checkbox\n\t        count = 0;\n\t        $.each(allFormElements, function (i, field) {\n\t            if (field.localName === 'input' && (field.type === '' || field.type === 'text' || field.type === 'hidden' || field.type === 'tel')) {\n\t                aiIndex.push(count);\n\t                count++;\n\t            } else {\n\t                aiIndex.push(-1);\n\t                if (field.localName === 'input' && rNonAutoNumericTypes.test(field.type)) {\n\t                    count++;\n\t                }\n\t            }\n\t        });\n\t\n\t        if (getArrayBehavior) {\n\t            var formFields = $this.serializeArray();\n\t\n\t            $.each(formFields, function (i, field) {\n\t                var scElement = scIndex.indexOf(i);\n\t\n\t                if (scElement > -1 && aiIndex[scElement] > -1) {\n\t                    var testInput = $('form:eq(' + formIndex + ') input:eq(' + aiIndex[scElement] + ')');\n\t                    var settings = testInput.data('autoNumeric');\n\t\n\t                    if ((typeof settings === 'undefined' ? 'undefined' : _typeof(settings)) === 'object') {\n\t                        field.value = testInput.autoNumeric('getLocalized').toString();\n\t                    }\n\t                }\n\t            });\n\t\n\t            return formFields;\n\t        } else {\n\t            var _ret2 = function () {\n\t                // getString() behavior\n\t                var formFields = $this.serialize();\n\t                var formParts = formFields.split('&');\n\t\n\t                $.each(formParts, function (i) {\n\t                    var _formParts$i$split = formParts[i].split('='),\n\t                        _formParts$i$split2 = _slicedToArray(_formParts$i$split, 2),\n\t                        inputName = _formParts$i$split2[0],\n\t                        inputValue = _formParts$i$split2[1];\n\t\n\t                    var scElement = scIndex.indexOf(i);\n\t\n\t                    // If the current element is a valid element\n\t                    if (scElement > -1 && aiIndex[scElement] > -1) {\n\t                        var testInput = $('form:eq(' + formIndex + ') input:eq(' + aiIndex[scElement] + ')');\n\t                        var settings = testInput.data('autoNumeric');\n\t\n\t                        if ((typeof settings === 'undefined' ? 'undefined' : _typeof(settings)) === 'object') {\n\t                            if (inputValue !== null) {\n\t                                var modifiedInputValue = testInput.autoNumeric('getLocalized').toString();\n\t                                formParts[i] = inputName + '=' + modifiedInputValue;\n\t                            }\n\t                        }\n\t                    }\n\t                });\n\t\n\t                return {\n\t                    v: formParts.join('&')\n\t                };\n\t            }();\n\t\n\t            if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === \"object\") return _ret2.v;\n\t        }\n\t    }\n\t\n\t    /**\r\n\t     * Handler for 'focusin' events\r\n\t     *\r\n\t     * @param {object} $this jQuery-selected DOM element\r\n\t     * @param {AutoNumericHolder} holder\r\n\t     * @param {Event} e\r\n\t     */\n\t    function onFocusInAndMouseEnter($this, holder, e) {\n\t        var settings = holder.settingsClone;\n\t\n\t        if (e.type === 'focusin' || e.type === 'mouseenter' && !$this.is(':focus') && settings.emptyInputBehavior === 'focus') {\n\t            settings.hasFocus = true;\n\t\n\t            if (settings.negativeBracketsTypeOnBlur !== null && settings.negativeSignCharacter !== '') {\n\t                jQueryOriginalVal.call($this, toggleNegativeBracket(e.target.value, settings));\n\t            }\n\t\n\t            // clean the value to compare to rawValue\n\t            var result = stripAllNonNumberCharacters(e.target.value, settings, true);\n\t            result = convertToNumericString(result, settings);\n\t            result = cleanLeadingTrailingZeros(result, settings);\n\t            if (settings.trailingNegative) {\n\t                result = '-' + result;\n\t            }\n\t\n\t            var roundedValue = void 0;\n\t            if (settings.decimalPlacesShownOnFocus) {\n\t                settings.decimalPlacesOverride = settings.decimalPlacesShownOnFocus;\n\t                roundedValue = roundValue(settings.rawValue, settings);\n\t                jQueryOriginalVal.call($this, addGroupSeparators(roundedValue, settings));\n\t            } else if (settings.scaleDivisor) {\n\t                settings.decimalPlacesOverride = Number(settings.oDec);\n\t                roundedValue = roundValue(settings.rawValue, settings);\n\t                jQueryOriginalVal.call($this, addGroupSeparators(roundedValue, settings));\n\t            } else if (settings.noSeparatorOnFocus) {\n\t                settings.digitGroupSeparator = '';\n\t                settings.currencySymbol = '';\n\t                settings.suffixText = '';\n\t                roundedValue = roundValue(settings.rawValue, settings);\n\t                jQueryOriginalVal.call($this, addGroupSeparators(roundedValue, settings));\n\t            } else if (result !== settings.rawValue) {\n\t                // updates the rawValue\n\t                $this.autoNumeric('set', result);\n\t            }\n\t\n\t            // In order to send a 'native' change event when blurring the input, we need to first store the initial input value on focus.\n\t            holder.valueOnFocus = e.target.value;\n\t            holder.lastVal = holder.valueOnFocus;\n\t            var onEmpty = checkEmpty(holder.valueOnFocus, settings, true);\n\t            if (onEmpty !== null && onEmpty !== '' && settings.emptyInputBehavior === 'focus') {\n\t                jQueryOriginalVal.call($this, onEmpty);\n\t                if (onEmpty === settings.currencySymbol && settings.currencySymbolPlacement === 's') {\n\t                    setElementSelection(e.target, 0, 0);\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    /**\r\n\t     * Handler for 'keydown' events.\r\n\t     * The user just started pushing any key, hence one event is sent.\r\n\t     *\r\n\t     * Note :\r\n\t     * By default a 'normal' input output those events in the right order when inputting a character key (ie. 'a') :\r\n\t     * - keydown\r\n\t     * - keypress\r\n\t     * - input\r\n\t     * - keyup\r\n\t     *\r\n\t     * ...when inputting a modifier key (ie. 'ctrl') :\r\n\t     * - keydown\r\n\t     * - keyup\r\n\t     *\r\n\t     * If 'delete' or 'backspace' is entered, the following events are sent :\r\n\t     * - keydown\r\n\t     * - input\r\n\t     * - keyup\r\n\t     *\r\n\t     * If 'enter' is entered and the value has not changed, the following events are sent :\r\n\t     * - keydown\r\n\t     * - keypress\r\n\t     * - keyup\r\n\t     *\r\n\t     * If 'enter' is entered and the value has been changed, the following events are sent :\r\n\t     * - keydown\r\n\t     * - keypress\r\n\t     * - change\r\n\t     * - keyup\r\n\t     *\r\n\t     * When a paste is done, the following events are sent :\r\n\t     * - input (if paste is done with the mouse)\r\n\t     *\r\n\t     * - keydown (if paste is done with ctrl+v)\r\n\t     * - keydown\r\n\t     * - input\r\n\t     * - keyup\r\n\t     * - keyup\r\n\t     *\r\n\t     * @param {AutoNumericHolder} holder\r\n\t     * @param {Event} e\r\n\t     */\n\t    function onKeydown(holder, e) {\n\t        //TODO Create a function that retrieve the element value (either by using `e.target.value` when the element is an <input>, or by using `element.textContent` when the element as its `contenteditable` set to true)\n\t        holder._updateAutoNumericHolderEventKeycode(e);\n\t        holder.initialValueOnKeydown = e.target.value; // This is needed in `onKeyup()` to check if the value as changed during the key press\n\t\n\t        if (holder.that.readOnly) {\n\t            holder.processed = true;\n\t\n\t            return;\n\t        }\n\t\n\t        // The \"enter\" key throws a `change` event if the value has changed since the `focus` event\n\t        if (holder.eventKeyCode === keyCode.Enter && holder.valueOnFocus !== e.target.value) {\n\t            triggerEvent('change', e.target);\n\t            holder.valueOnFocus = e.target.value;\n\t        }\n\t\n\t        holder._updateAutoNumericHolderProperties(e);\n\t\n\t        if (holder._skipAlways(e)) {\n\t            holder.processed = true;\n\t\n\t            return;\n\t        }\n\t\n\t        // Check if the key is a delete/backspace key\n\t        if (holder.eventKeyCode === keyCode.Backspace || holder.eventKeyCode === keyCode.Delete) {\n\t            holder._processCharacterDeletion(); // Because backspace and delete only triggers keydown and keyup events, not keypress\n\t            holder.processed = true;\n\t            holder._formatValue(e);\n\t\n\t            // If and only if the resulting value has changed after that backspace/delete, then we have to send an 'input' event like browsers normally do.\n\t            if (e.target.value !== holder.lastVal && holder.settingsClone.throwInput) {\n\t                // Throw an input event when a character deletion is detected\n\t                triggerEvent('input', e.target);\n\t                e.preventDefault(); // ...and immediately prevent the browser to delete a second character\n\t            }\n\t\n\t            holder.lastVal = e.target.value;\n\t            holder.settingsClone.throwInput = true;\n\t\n\t            return;\n\t        }\n\t\n\t        holder.formatted = false; //TODO Is this line needed?\n\t    }\n\t\n\t    /**\r\n\t     * Handler for 'keypress' events.\r\n\t     * The user is still pressing the key, which will output a character (ie. '2') continuously until it releases the key.\r\n\t     * Note: 'keypress' events are not sent for delete keys like Backspace/Delete.\r\n\t     *\r\n\t     * @param {AutoNumericHolder} holder\r\n\t     * @param {Event} e\r\n\t     */\n\t    function onKeypress(holder, e) {\n\t        // Retrieve the real character that has been entered (ie. 'a' instead of the key code)\n\t        var eventCharacter = character(e);\n\t\n\t        // Firefox generate a 'keypress' event (e.keyCode === 0) for the keys that do not print a character (ie. 'Insert', 'Delete', 'Fn' keys, 'PageUp', 'PageDown' etc.). 'Shift' on the other hand does not generate a keypress event.\n\t        if (eventCharacter === keyName.Insert) {\n\t            return;\n\t        }\n\t\n\t        var processed = holder.processed;\n\t        holder._updateAutoNumericHolderProperties(e);\n\t\n\t        if (holder._skipAlways(e)) {\n\t            return;\n\t        }\n\t\n\t        if (processed) {\n\t            e.preventDefault();\n\t\n\t            return;\n\t        }\n\t\n\t        var isCharacterInsertionAllowed = holder._processCharacterInsertion(e);\n\t        if (isCharacterInsertionAllowed) {\n\t            holder._formatValue(e);\n\t            if (e.target.value !== holder.lastVal && holder.settingsClone.throwInput) {\n\t                // Throws input event on adding a character\n\t                triggerEvent('input', e.target);\n\t                e.preventDefault(); // ...and immediately prevent the browser to add a second character\n\t            } else {\n\t                if ((eventCharacter === holder.settings.decimalCharacter || eventCharacter === holder.settings.decimalCharacterAlternative) && getElementSelection(e.target).start === getElementSelection(e.target).end && getElementSelection(e.target).start === e.target.value.indexOf(holder.settings.decimalCharacter)) {\n\t                    var position = getElementSelection(e.target).start + 1;\n\t                    setElementSelection(e.target, position, position);\n\t                }\n\t                e.preventDefault();\n\t            }\n\t\n\t            holder.lastVal = e.target.value;\n\t            holder.settingsClone.throwInput = true;\n\t\n\t            return;\n\t        }\n\t\n\t        e.preventDefault();\n\t\n\t        holder.formatted = false;\n\t    }\n\t\n\t    /**\r\n\t     * Handler for 'input' events.\r\n\t     * added to support android devices with mobile chrome browsers and others\r\n\t     * Has the potential to replace the keypress event.\r\n\t     *\r\n\t     * @param {AutoNumericHolder} holder\r\n\t     * @param {Event} e\r\n\t     */\n\t    function onInput(holder, e) {\n\t        var value = e.target.value;\n\t\n\t        // Fix the caret position on keyup in the `_formatValue()` function\n\t        holder.settings.androidSelectionStart = null;\n\t\n\t        if (holder.eventKeyCode === keyCode.AndroidDefault) {\n\t            // The keyCode is equal to the default Android Chrome one (which is always equal to `keyCode.AndroidDefault`)\n\t            if (value.length > holder.lastVal.length || value.length >= holder.lastVal.length - holder.selection.length) {\n\t                // Determine the keycode of the character that was entered, and overwrite the faulty `eventKeyCode` info with it\n\t                holder.eventKeyCode = value.charCodeAt(holder.selection.start);\n\t\n\t                // Capture the actual character entered\n\t                var androidCharEntered = value.charAt(holder.selection.start);\n\t\n\t                // Check if the given character should be inserted, and if so, do insert it into the current element value\n\t                var isCharacterInsertionAllowed = holder._processCharacterInsertion(androidCharEntered);\n\t\n\t                if (isCharacterInsertionAllowed) {\n\t                    // Allowed character entered (number, decimal or plus/minus sign)\n\t                    holder._formatValue(e);\n\t\n\t                    // Capture the new caret position. This is required because on keyup, `_updateAutoNumericHolderEventKeycode()` captures the old caret position\n\t                    //TODO Check if this is an Android bug or an autoNumeric one\n\t                    holder.settings.androidSelectionStart = holder.selection.start;\n\t\n\t                    var decimalCharacterPosition = e.target.value.indexOf(holder.settings.decimalCharacter);\n\t                    var hasDecimalCharacter = decimalCharacterPosition === -1;\n\t\n\t                    // Move the caret to the right if the `androidCharEntered` is the decimal character or if it's on the left of the caret position\n\t                    if (androidCharEntered === holder.settings.decimalCharacter || !hasDecimalCharacter && decimalCharacterPosition < holder.settings.androidSelectionStart) {\n\t                        holder.settings.androidSelectionStart = holder.selection.start + 1;\n\t                    }\n\t\n\t                    if (e.target.value.length > value.length) {\n\t                        // Position the caret right now before the 'keyup' event in order to prevent the caret from jumping around\n\t                        setElementSelection(e.target, holder.settings.androidSelectionStart, holder.settings.androidSelectionStart);\n\t                    }\n\t\n\t                    holder.lastVal = e.target.value;\n\t\n\t                    return;\n\t                } else {\n\t                    // The entered character is not allowed ; overwrite the new invalid value with the previous valid one, and set back the caret/selection\n\t                    e.target.value = holder.lastVal;\n\t                    setElementSelection(e.target, holder.selection.start, holder.selection.end);\n\t                    holder.settings.androidSelectionStart = holder.selection.start;\n\t                }\n\t\n\t                e.preventDefault(); //FIXME How does that affects the normal trigger of the input event?\n\t\n\t                holder.formatted = false;\n\t            } else {\n\t                // Character deleted\n\t                //TODO What about the `Delete` key?\n\t                holder.eventKeyCode = keyCode.Backspace;\n\t            }\n\t        }\n\t    }\n\t\n\t    /**\r\n\t     * Handler for 'keyup' events.\r\n\t     * The user just released any key, hence one event is sent.\r\n\t     *\r\n\t     * @param {AutoNumericHolder} holder\r\n\t     * @param {object} settings\r\n\t     * @param {Event} e\r\n\t     */\n\t    function onKeyup(holder, settings, e) {\n\t        holder._updateAutoNumericHolderProperties(e);\n\t\n\t        var skip = holder._skipAlways(e);\n\t        delete holder.valuePartsBeforePaste;\n\t        var isOnAndroid = holder.settingsClone.androidSelectionStart !== null;\n\t        if (skip && !isOnAndroid || e.target.value === '') {\n\t            return;\n\t        }\n\t\n\t        // Added to properly place the caret when only the currency sign is present\n\t        if (e.target.value === holder.settingsClone.currencySymbol) {\n\t            if (holder.settingsClone.currencySymbolPlacement === 's') {\n\t                setElementSelection(e.target, 0, 0);\n\t            } else {\n\t                setElementSelection(e.target, holder.settingsClone.currencySymbol.length, holder.settingsClone.currencySymbol.length);\n\t            }\n\t        } else if (holder.eventKeyCode === keyCode.Tab) {\n\t            setElementSelection(e.target, 0, e.target.value.length);\n\t        }\n\t\n\t        if (e.target.value === holder.settingsClone.suffixText || holder.settingsClone.rawValue === '' && holder.settingsClone.currencySymbol !== '' && holder.settingsClone.suffixText !== '') {\n\t            setElementSelection(e.target, 0, 0);\n\t        }\n\t\n\t        // Saves the extended decimal to preserve the data when navigating away from the page\n\t        if (holder.settingsClone.decimalPlacesShownOnFocus !== null && holder.settingsClone.saveValueToSessionStorage) {\n\t            saveValueToPersistentStorage(e.target, settings, 'set');\n\t        }\n\t\n\t        if (!holder.formatted) {\n\t            holder._formatValue(e);\n\t        }\n\t\n\t        // If the input value has changed during the key press event chain, an event is sent to alert that a formatting has been done (cf. Issue #187)\n\t        if (e.target.value !== holder.initialValueOnKeydown) {\n\t            triggerEvent('autoNumeric:formatted', e.target);\n\t        }\n\t    }\n\t\n\t    /**\r\n\t     * Handler for 'focusout' events\r\n\t     *\r\n\t     * @param {object} $this jQuery-selected DOM element\r\n\t     * @param {AutoNumericHolder} holder\r\n\t     * @param {Event} e\r\n\t     */\n\t    function onFocusOutAndMouseLeave($this, holder, e) {\n\t        if (!$this.is(':focus')) {\n\t            var value = e.target.value;\n\t            var origValue = value;\n\t            var settings = holder.settingsClone;\n\t            settings.hasFocus = false;\n\t\n\t            if (settings.saveValueToSessionStorage) {\n\t                saveValueToPersistentStorage(e.target, settings, 'set');\n\t            }\n\t\n\t            if (settings.noSeparatorOnFocus === true) {\n\t                settings.digitGroupSeparator = settings.oSep;\n\t                settings.currencySymbol = settings.oSign;\n\t                settings.suffixText = settings.oSuffix;\n\t            }\n\t\n\t            if (settings.decimalPlacesShownOnFocus !== null) {\n\t                settings.decimalPlacesOverride = settings.oDec;\n\t                settings.allowDecimalPadding = settings.oPad;\n\t                settings.negativeBracketsTypeOnBlur = settings.oBracket;\n\t            }\n\t\n\t            value = stripAllNonNumberCharacters(value, settings, true);\n\t\n\t            if (value !== '') {\n\t                if (settings.trailingNegative && !isNegative(value)) {\n\t                    value = '-' + value;\n\t                    settings.trailingNegative = false;\n\t                }\n\t\n\t                var _checkIfInRangeWithOv3 = checkIfInRangeWithOverrideOption(value, settings),\n\t                    _checkIfInRangeWithOv4 = _slicedToArray(_checkIfInRangeWithOv3, 2),\n\t                    minTest = _checkIfInRangeWithOv4[0],\n\t                    maxTest = _checkIfInRangeWithOv4[1];\n\t\n\t                if (checkEmpty(value, settings, false) === null && minTest && maxTest) {\n\t                    value = modifyNegativeSignAndDecimalCharacterForRawValue(value, settings);\n\t                    settings.rawValue = cleanLeadingTrailingZeros(value, settings);\n\t\n\t                    if (settings.scaleDivisor) {\n\t                        value = value / settings.scaleDivisor;\n\t                        value = value.toString();\n\t                    }\n\t\n\t                    settings.decimalPlacesOverride = settings.scaleDivisor && settings.scaleDecimalPlaces ? Number(settings.scaleDecimalPlaces) : settings.decimalPlacesOverride;\n\t                    value = roundValue(value, settings);\n\t                    value = modifyNegativeSignAndDecimalCharacterForFormattedValue(value, settings);\n\t                } else {\n\t                    if (!minTest) {\n\t                        $this.trigger('autoNumeric:minExceeded');\n\t                    }\n\t                    if (!maxTest) {\n\t                        $this.trigger('autoNumeric:maxExceeded');\n\t                    }\n\t\n\t                    value = settings.rawValue;\n\t                }\n\t            } else {\n\t                if (settings.emptyInputBehavior === 'zero') {\n\t                    settings.rawValue = '0';\n\t                    value = roundValue('0', settings);\n\t                } else {\n\t                    settings.rawValue = '';\n\t                }\n\t            }\n\t\n\t            var groupedValue = checkEmpty(value, settings, false);\n\t            if (groupedValue === null) {\n\t                groupedValue = addGroupSeparators(value, settings);\n\t            }\n\t\n\t            if (groupedValue !== origValue) {\n\t                groupedValue = settings.scaleSymbol ? groupedValue + settings.scaleSymbol : groupedValue;\n\t                jQueryOriginalVal.call($this, groupedValue);\n\t            }\n\t\n\t            if (groupedValue !== holder.valueOnFocus) {\n\t                $this.change();\n\t                delete holder.valueOnFocus;\n\t            }\n\t        }\n\t    }\n\t\n\t    /**\r\n\t     * Handler for 'paste' events\r\n\t     *\r\n\t     * @param {object} $this jQuery-selected DOM element\r\n\t     * @param {AutoNumericHolder} holder\r\n\t     * @param {Event} e\r\n\t     */\n\t    function onPaste($this, holder, e) {\n\t        //TODO Using ctrl+z after a paste should cancel it -> How would that affect other frameworks/component built with that feature in mind though?\n\t        //FIXME When pasting '000' on a thousand group selection, the whole selection gets deleted, and only one '0' is pasted (cf. issue #302)\n\t        // The event is prevented by default, since otherwise the user would be able to paste invalid characters into the input\n\t        e.preventDefault();\n\t\n\t        var rawPastedText = e.clipboardData.getData('text/plain');\n\t\n\t        // 0. Special case if the user has selected all the input text before pasting\n\t        var initialFormattedValue = e.target.value;\n\t        var selectionStart = e.target.selectionStart || 0;\n\t        var selectionEnd = e.target.selectionEnd || 0;\n\t        var selectionSize = selectionEnd - selectionStart;\n\t        var isAllInputTextSelected = false;\n\t\n\t        if (selectionSize === initialFormattedValue.length) {\n\t            isAllInputTextSelected = true;\n\t        }\n\t\n\t        // 1. Check if the paste has a negative sign (only if it's the first character), and store that information for later use\n\t        var isPasteNegative = isNegativeStrict(rawPastedText);\n\t        if (isPasteNegative) {\n\t            // 1a. Remove the negative sign from the pasted text\n\t            rawPastedText = rawPastedText.slice(1, rawPastedText.length);\n\t        }\n\t\n\t        // 2. Strip all thousand separators, brackets and currency sign, and convert the decimal character to a dot\n\t        var untranslatedPastedText = preparePastedText(rawPastedText, holder);\n\t\n\t        var pastedText = void 0;\n\t        if (untranslatedPastedText === '.') {\n\t            // Special case : If the user tries to paste a single decimal character (that has been translated to '.' already)\n\t            pastedText = '.';\n\t        } else {\n\t            // Normal case\n\t            // Allow pasting arabic numbers\n\t            pastedText = arabicToLatinNumbers(untranslatedPastedText, false, false, false);\n\t        }\n\t\n\t        // 3. Test if the paste is valid (only has numbers and eventually a decimal character). If it's not valid, stop here.\n\t        if (pastedText !== '.' && (!isNumber(pastedText) || pastedText === '')) {\n\t            if (holder.settings.onInvalidPaste === 'error') {\n\t                //TODO Should we send a warning instead of throwing an error?\n\t                throwError('The pasted value \\'' + rawPastedText + '\\' is not a valid paste content.');\n\t            }\n\t\n\t            return;\n\t        }\n\t\n\t        // 4. Calculate the paste result\n\t        var caretPositionOnInitialTextAfterPasting = void 0;\n\t        var initialUnformattedNumber = void 0;\n\t        if (e.target.value === '') {\n\t            // autoNumeric 'get' returns '0.00' if the input is empty, hence we need to store the 'real' empty initial value when needed\n\t            //FIXME This has been fixed in a previous commit, get should return '' on an empty input. Remove this unneeded 'if'\n\t            initialUnformattedNumber = '';\n\t        } else {\n\t            initialUnformattedNumber = $this.autoNumeric('get');\n\t        }\n\t        var isInitialValueNegative = isNegativeStrict(initialUnformattedNumber);\n\t        var isPasteNegativeAndInitialValueIsPositive = void 0;\n\t        var result = void 0;\n\t\n\t        // If the pasted content is negative, then the result will be negative too\n\t        if (isPasteNegative && !isInitialValueNegative) {\n\t            initialUnformattedNumber = '-' + initialUnformattedNumber;\n\t            isInitialValueNegative = true;\n\t            isPasteNegativeAndInitialValueIsPositive = true;\n\t        } else {\n\t            isPasteNegativeAndInitialValueIsPositive = false;\n\t        }\n\t\n\t        var leftPartContainedADot = false;\n\t        var leftPart = void 0;\n\t        var rightPart = void 0;\n\t        switch (holder.settings.onInvalidPaste) {\n\t            /* 4a. Truncate paste behavior:\r\n\t             * Insert as many numbers as possible on the right hand side of the caret from the pasted text content, until the input reach its range limit.\r\n\t             * If there is more characters in the clipboard once a limit is reached, drop the extraneous characters.\r\n\t             * Otherwise paste all the numbers in the clipboard.\r\n\t             * While doing so, we check if the result is within the minimum and maximum values allowed, and stop as soon as we encounter one of those.\r\n\t             *\r\n\t             * 4b. Replace paste behavior:\r\n\t             * Idem than the 'truncate' paste behavior, except that when a range limit is hit, we try to replace the subsequent initial numbers with the pasted ones, until we hit the range limit a second (and last) time, or we run out of numbers to paste\r\n\t             */\n\t            /* eslint no-case-declarations: 0 */\n\t            case 'truncate':\n\t            case 'replace':\n\t                var leftFormattedPart = initialFormattedValue.slice(0, selectionStart);\n\t                var rightFormattedPart = initialFormattedValue.slice(selectionEnd, initialFormattedValue.length);\n\t\n\t                if (selectionStart !== selectionEnd) {\n\t                    // a. If there is a selection, remove the selected part, and return the left and right part\n\t                    result = preparePastedText(leftFormattedPart + rightFormattedPart, holder);\n\t                } else {\n\t                    // b. Else if this is only one caret (and therefore no selection), then return the left and right part\n\t                    result = preparePastedText(initialFormattedValue, holder);\n\t                }\n\t\n\t                // Add back the negative sign if needed\n\t                if (isInitialValueNegative) {\n\t                    result = setRawNegativeSign(result);\n\t                }\n\t\n\t                // Build the unformatted result string\n\t                caretPositionOnInitialTextAfterPasting = convertCharacterCountToIndexPosition(countNumberCharactersOnTheCaretLeftSide(initialFormattedValue, selectionStart, holder.settings.decimalCharacter));\n\t                if (isPasteNegativeAndInitialValueIsPositive) {\n\t                    // If the initial paste is negative and the initial value is not, then I must offset the caret position by one place to the right to take the additional hyphen into account\n\t                    caretPositionOnInitialTextAfterPasting++;\n\t                    //TODO Quid if the negative sign is not on the left (negativePositiveSignPlacement and currencySymbolPlacement)?\n\t                }\n\t\n\t                leftPart = result.slice(0, caretPositionOnInitialTextAfterPasting);\n\t                rightPart = result.slice(caretPositionOnInitialTextAfterPasting, result.length);\n\t                if (pastedText === '.') {\n\t                    if (contains(leftPart, '.')) {\n\t                        // If I remove a dot here, then I need to update the caret position (decrement it by 1) when positioning it\n\t                        // To do so, we keep that info in order to modify the caret position later\n\t                        leftPartContainedADot = true;\n\t                        leftPart = leftPart.replace('.', '');\n\t                    }\n\t                    rightPart = rightPart.replace('.', '');\n\t                }\n\t                // -- Here, we are good to go to continue on the same basis\n\t\n\t                // c. Add numbers one by one at the caret position, while testing if the result is valid and within the range of the minimum and maximum value\n\t                //    Continue until you either run out of numbers to paste, or that you get out of the range limits\n\t                var minParse = parseStr(holder.settings.minimumValue);\n\t                var maxParse = parseStr(holder.settings.maximumValue);\n\t                var lastGoodKnownResult = result; // This is set as the default, in case we do not add even one number\n\t                var pastedTextIndex = 0;\n\t                var modifiedLeftPart = leftPart;\n\t\n\t                while (pastedTextIndex < pastedText.length) {\n\t                    // Modify the result with another pasted character\n\t                    modifiedLeftPart += pastedText[pastedTextIndex];\n\t                    result = modifiedLeftPart + rightPart;\n\t\n\t                    // Check the range limits\n\t                    if (!checkIfInRange(result, minParse, maxParse)) {\n\t                        // The result is out of the range limits, stop the loop here\n\t                        break;\n\t                    }\n\t\n\t                    // Save the last good known result\n\t                    lastGoodKnownResult = result;\n\t\n\t                    // Update the local variables for the next loop\n\t                    pastedTextIndex++;\n\t                }\n\t\n\t                // Update the last caret position where to insert a new number\n\t                caretPositionOnInitialTextAfterPasting += pastedTextIndex;\n\t\n\t                //XXX Here we have the result for the `truncate` option\n\t                if (holder.settings.onInvalidPaste === 'truncate') {\n\t                    //TODO If the user as defined a truncate callback and there are still some numbers (that will be dropped), then call this callback with the initial paste as well as the remaining numbers\n\t                    result = lastGoodKnownResult;\n\t\n\t                    if (leftPartContainedADot) {\n\t                        // If a dot has been removed for the part on the left of the caret, we decrement the caret index position\n\t                        caretPositionOnInitialTextAfterPasting--;\n\t                    }\n\t                    break;\n\t                }\n\t                //XXX ...else we need to continue modifying the result for the 'replace' option\n\t\n\t                // d. Until there are numbers to paste, replace the initial numbers one by one, and still do the range test.\n\t                //    Stop when you have no more numbers to paste, or if you are out of the range limits.\n\t                //    If you do get to the range limits, use the previous known good value within those limits.\n\t                //    Note: The numbers are replaced one by one, in the integer then decimal part, while ignoring the decimal character\n\t                //TODO What should happen if the user try to paste a decimal number? Should we override the current initial decimal character in favor of this new one? If we do, then we have to recalculate the vMin/vMax from the start in order to take into account this new decimal character position..\n\t                var lastGoodKnownResultIndex = caretPositionOnInitialTextAfterPasting;\n\t                var lastGoodKnownResultSize = lastGoodKnownResult.length;\n\t\n\t                while (pastedTextIndex < pastedText.length && lastGoodKnownResultIndex < lastGoodKnownResultSize) {\n\t                    if (lastGoodKnownResult[lastGoodKnownResultIndex] === '.') {\n\t                        // We skip the decimal character 'replacement'. That way, we do not change the decimal character position regarding the remaining numbers.\n\t                        lastGoodKnownResultIndex++;\n\t                        continue;\n\t                    }\n\t\n\t                    // This replace one character at a time\n\t                    result = replaceCharAt(lastGoodKnownResult, lastGoodKnownResultIndex, pastedText[pastedTextIndex]);\n\t\n\t                    // Check the range limits\n\t                    if (!checkIfInRange(result, minParse, maxParse)) {\n\t                        // The result is out of the range limits, stop the loop here\n\t                        break;\n\t                    }\n\t\n\t                    // Save the last good known result\n\t                    lastGoodKnownResult = result;\n\t\n\t                    // Update the local variables for the next loop\n\t                    pastedTextIndex++;\n\t                    lastGoodKnownResultIndex++;\n\t                }\n\t\n\t                // Update the last caret position where to insert a new number\n\t                caretPositionOnInitialTextAfterPasting = lastGoodKnownResultIndex;\n\t\n\t                if (leftPartContainedADot) {\n\t                    // If a dot has been removed for the part on the left of the caret, we decrement the caret index position\n\t                    caretPositionOnInitialTextAfterPasting--;\n\t                }\n\t\n\t                result = lastGoodKnownResult;\n\t\n\t                break;\n\t            /* 4c. Normal paste behavior:\r\n\t             * Insert the pasted number inside the current unformatted text, at the right caret position or selection\r\n\t             */\n\t            case 'error':\n\t            case 'ignore':\n\t            case 'clamp':\n\t            default:\n\t                // 1. Generate the unformatted result\n\t                var leftFormattedPart2 = initialFormattedValue.slice(0, selectionStart);\n\t                var rightFormattedPart2 = initialFormattedValue.slice(selectionEnd, initialFormattedValue.length);\n\t\n\t                if (selectionStart !== selectionEnd) {\n\t                    // a. If there is a selection, remove the selected part, and return the left and right part\n\t                    result = preparePastedText(leftFormattedPart2 + rightFormattedPart2, holder);\n\t                } else {\n\t                    // b. Else if this is only one caret (and therefore no selection), then return the left and right part\n\t                    result = preparePastedText(initialFormattedValue, holder);\n\t                }\n\t\n\t                // Add back the negative sign if needed\n\t                if (isInitialValueNegative) {\n\t                    result = setRawNegativeSign(result);\n\t                }\n\t\n\t                // Build the unformatted result string\n\t                caretPositionOnInitialTextAfterPasting = convertCharacterCountToIndexPosition(countNumberCharactersOnTheCaretLeftSide(initialFormattedValue, selectionStart, holder.settings.decimalCharacter));\n\t                if (isPasteNegativeAndInitialValueIsPositive) {\n\t                    // If the initial paste is negative and the initial value is not, then I must offset the caret position by one place to the right to take the additional hyphen into account\n\t                    caretPositionOnInitialTextAfterPasting++;\n\t                    //TODO Quid if the negative sign is not on the left (negativePositiveSignPlacement and currencySymbolPlacement)?\n\t                }\n\t\n\t                leftPart = result.slice(0, caretPositionOnInitialTextAfterPasting);\n\t                rightPart = result.slice(caretPositionOnInitialTextAfterPasting, result.length);\n\t                if (pastedText === '.') {\n\t                    // If the user only paste a single decimal character, then we remove the previously existing one (if any)\n\t                    if (contains(leftPart, '.')) {\n\t                        // If I remove a dot here, then I need to update the caret position (decrement it by 1) when positioning it\n\t                        // To do so, we keep that info in order to modify the caret position later\n\t                        leftPartContainedADot = true;\n\t                        leftPart = leftPart.replace('.', '');\n\t                    }\n\t                    rightPart = rightPart.replace('.', '');\n\t                }\n\t                // -- Here, we are good to go to continue on the same basis\n\t\n\t                // Generate the unformatted result\n\t                result = '' + leftPart + pastedText + rightPart;\n\t\n\t                // 2. Calculate the caret position in the unformatted value, for later use\n\t                if (selectionStart === selectionEnd) {\n\t                    // There is no selection, then the caret position is set after the pasted text\n\t                    var indexWherePastedTextHasBeenInserted = convertCharacterCountToIndexPosition(countNumberCharactersOnTheCaretLeftSide(initialFormattedValue, selectionStart, holder.settings.decimalCharacter));\n\t                    caretPositionOnInitialTextAfterPasting = indexWherePastedTextHasBeenInserted + pastedText.length; // I must not count the characters that have been removed from the pasted text (ie. '.')\n\t                } else {\n\t                    if (isAllInputTextSelected) {\n\t                        // Special case when all the input text is selected before pasting, which means we'll completely erase its content and paste only the clipboard content\n\t                        caretPositionOnInitialTextAfterPasting = result.length;\n\t                    } else if (rightPart === '') {\n\t                        // If the user selected from the caret position to the end of the input (on the far right)\n\t                        caretPositionOnInitialTextAfterPasting = convertCharacterCountToIndexPosition(countNumberCharactersOnTheCaretLeftSide(initialFormattedValue, selectionStart, holder.settings.decimalCharacter)) + pastedText.length;\n\t                    } else {\n\t                        // Normal case\n\t                        var indexSelectionEndInRawValue = convertCharacterCountToIndexPosition(countNumberCharactersOnTheCaretLeftSide(initialFormattedValue, selectionEnd, holder.settings.decimalCharacter));\n\t\n\t                        // Here I must not count the characters that have been removed from the pasted text (ie. '.'), or the thousand separators in the initial selected text\n\t                        var selectedText = e.target.value.slice(selectionStart, selectionEnd);\n\t                        caretPositionOnInitialTextAfterPasting = indexSelectionEndInRawValue - selectionSize + countCharInText(holder.settings.digitGroupSeparator, selectedText) + pastedText.length;\n\t                    }\n\t                }\n\t\n\t                // Modify the caret position for special cases, only if the whole input has not been selected\n\t                if (!isAllInputTextSelected) {\n\t                    if (isPasteNegativeAndInitialValueIsPositive) {\n\t                        // If the pasted value has a '-' sign, but the initial value does not, offset the index by one\n\t                        caretPositionOnInitialTextAfterPasting++;\n\t                    }\n\t\n\t                    if (leftPartContainedADot) {\n\t                        // If a dot has been removed for the part on the left of the caret, we decrement the caret index position\n\t                        caretPositionOnInitialTextAfterPasting--;\n\t                    }\n\t                }\n\t        }\n\t\n\t        // 5. Check if the result is a valid number, if not, drop the paste and do nothing.\n\t        if (!isNumber(result) || result === '') {\n\t            if (holder.settings.onInvalidPaste === 'error') {\n\t                throwError('The pasted value \\'' + rawPastedText + '\\' would result into an invalid content \\'' + result + '\\'.'); //TODO Should we send a warning instead of throwing an error?\n\t                //TODO This is not DRY ; refactor with above\n\t            }\n\t            return;\n\t        }\n\t\n\t        // 6. If it's a valid number, check if it falls inside the minimum and maximum value. If this fails, modify the value following this procedure :\n\t        /*\r\n\t         * If 'error' (this is the default) :\r\n\t         *      - Normal paste behavior.\r\n\t         *      - Try to set the new value, if it fails, then throw an error in the console.\r\n\t         *      - Do not change the input value, do not change the current selection.\r\n\t         * If 'ignore' :\r\n\t         *      - Normal paste behavior.\r\n\t         *      - Try to set the new value, if it fails, do nothing more.\r\n\t         *      - Do not change the input value, do not change the current selection.\r\n\t         * If 'clamp' :\r\n\t         *      - Normal paste behavior.\r\n\t         *      - Try to set the new value, if it fails, set the value to the minimum or maximum limit, whichever is closest to the\r\n\t         *        paste result.\r\n\t         *      - Change the caret position to be positioned on the left hand side of the decimal character.\r\n\t         * If 'truncate' :\r\n\t         *      - Truncate paste behavior.\r\n\t         *      - Try to set the new value, until it fails (if the result is out of the min and max value limits).\r\n\t         *      - Drop the remaining non-pasted numbers, and keep the last known non-failing result.\r\n\t         *      - Change the caret position to be positioned after the last pasted character.\r\n\t         * If 'replace' :\r\n\t         *      - Replace paste behavior.\r\n\t         *      - Try to set the new value, until it fails (if the result is out of the min and max value limits).\r\n\t         *     - Then try to replace as many numbers as possible with the pasted ones. Once it fails, keep the last known non-failing result.\r\n\t         *      - Change the caret position to be positioned after the last pasted character.\r\n\t         */\n\t        var valueHasBeenSet = false;\n\t        var valueHasBeenClamped = false;\n\t        try {\n\t            $this.autoNumeric('set', result);\n\t            valueHasBeenSet = true;\n\t        } catch (error) {\n\t            var clampedValue = void 0;\n\t            switch (holder.settings.onInvalidPaste) {\n\t                case 'clamp':\n\t                    clampedValue = clampToRangeLimits(result, holder.settings);\n\t                    try {\n\t                        $this.autoNumeric('set', clampedValue);\n\t                    } catch (error) {\n\t                        throwError('Fatal error: Unable to set the clamped value \\'' + clampedValue + '\\'.');\n\t                    }\n\t\n\t                    valueHasBeenClamped = true;\n\t                    valueHasBeenSet = true;\n\t                    result = clampedValue; // This is used only for setting the caret position later\n\t                    break;\n\t                case 'error':\n\t                case 'truncate':\n\t                case 'replace':\n\t                    // Throw an error message\n\t                    throwError('The pasted value \\'' + rawPastedText + '\\' results in a value \\'' + result + '\\' that is outside of the minimum [' + holder.settings.minimumValue + '] and maximum [' + holder.settings.maximumValue + '] value range.');\n\t                // falls through\n\t                case 'ignore':\n\t                // Do nothing\n\t                // falls through\n\t                default:\n\t                    return; // ...and nothing else should be changed\n\t            }\n\t        }\n\t\n\t        // 7. Then lastly, set the caret position at the right logical place\n\t        var caretPositionInFormattedNumber = void 0;\n\t        if (valueHasBeenSet) {\n\t            switch (holder.settings.onInvalidPaste) {\n\t                case 'clamp':\n\t                    if (valueHasBeenClamped) {\n\t                        if (holder.settings.currencySymbolPlacement === 's') {\n\t                            setElementSelection(e.target, e.target.value.length - holder.settings.currencySymbol.length); // This puts the caret on the right of the last decimal place\n\t                        } else {\n\t                            setElementSelection(e.target, e.target.value.length); // ..and this on the far right\n\t                        }\n\t\n\t                        break;\n\t                    } // else if the value has not been clamped, the default behavior is used...\n\t                // falls through\n\t                case 'error':\n\t                case 'ignore':\n\t                case 'truncate':\n\t                case 'replace':\n\t                default:\n\t                    // Whenever one or multiple characters are pasted, this means we have to manage the potential thousand separators that could be added by the formatting\n\t                    caretPositionInFormattedNumber = findCaretPositionInFormattedNumber(result, caretPositionOnInitialTextAfterPasting, e.target.value, holder.settings.decimalCharacter);\n\t                    setElementSelection(e.target, caretPositionInFormattedNumber);\n\t            }\n\t        }\n\t\n\t        // 8. We make sure we send an input event only if the result is different than the initial value before the paste\n\t        if (valueHasBeenSet && initialFormattedValue !== e.target.value) {\n\t            // On a 'normal' non-autoNumeric input, an `input` event is sent when a paste is done. We mimic that.\n\t            triggerEvent('input', e.target);\n\t        }\n\t    }\n\t\n\t    /**\r\n\t     * When focusing out of the input, we check if the value has changed, and if it has, then we send a `change` event (since the native one would have been prevented by `e.preventDefault()` called in the other event listeners).\r\n\t     *\r\n\t     * @param {AutoNumericHolder} holder\r\n\t     * @param {Event} e\r\n\t     */\n\t    function onBlur(holder, e) {\n\t        if (e.target.value !== holder.valueOnFocus) {\n\t            triggerEvent('change', e.target);\n\t            // e.preventDefault(); // ...and immediately prevent the browser to send a second change event (that somehow gets picked up by jQuery, but not by `addEventListener()` //FIXME KNOWN BUG : This does not prevent the second change event to be picked up by jQuery, which adds '.00' at the end of an integer\n\t        }\n\t    }\n\t\n\t    /**\r\n\t     * Handler for 'submit' events\r\n\t     *\r\n\t     * @param {object} $this jQuery-selected DOM element\r\n\t     * @param {AutoNumericHolder} holder\r\n\t     */\n\t    function onSubmit($this, holder) {\n\t        $this.closest('form').on('submit.autoNumeric', function () {\n\t            if (holder) {\n\t                var $settings = holder.settingsClone;\n\t\n\t                if ($settings.unformatOnSubmit) {\n\t                    jQueryOriginalVal.call($this, $settings.rawValue);\n\t                }\n\t            }\n\t        });\n\t    }\n\t\n\t    /**\r\n\t     * Return the jQuery selected input if the tag and type are supported by autoNumeric.\r\n\t     *\r\n\t     * @param {object} $this jQuery-selected DOM element\r\n\t     * @returns {boolean|*}\r\n\t     */\n\t    function getInputIfSupportedTagAndType($this) {\n\t        // Supported input type\n\t        var $input = $this.is('input[type=text], input[type=hidden], input[type=tel], input:not([type])');\n\t\n\t        // Checks for non-supported input types\n\t        if (!$input && $this.prop('tagName').toLowerCase() === 'input') {\n\t            throwError('The input type \"' + $this.prop('type') + '\" is not supported by autoNumeric');\n\t        }\n\t\n\t        // Checks for non-supported tags\n\t        var currentElementTag = $this.prop('tagName').toLowerCase();\n\t        if (currentElementTag !== 'input' && !isInArray(currentElementTag, allowedTagList)) {\n\t            throwError('The <' + currentElementTag + '> tag is not supported by autoNumeric');\n\t        }\n\t\n\t        return $input;\n\t    }\n\t\n\t    /**\r\n\t     * Formats the default value on page load.\r\n\t     * This is called only if the `formatOnPageLoad` option is set to `true`.\r\n\t     *\r\n\t     * @param {object} settings\r\n\t     * @param {object} $input jQuery-selected <input> element\r\n\t     * @param {object} $this jQuery-selected DOM element\r\n\t     */\n\t    function formatDefaultValueOnPageLoad(settings, $input, $this) {\n\t        var setValue = true;\n\t\n\t        if ($input) {\n\t            var currentValue = jQueryOriginalVal.call($this);\n\t            /*\r\n\t             * If the input value has been set by the dev, but not directly as an attribute in the html, then it takes\r\n\t             * precedence and should get formatted on init (if this input value is a valid number and that the\r\n\t             * developer wants it formatted on init (cf. `settings.formatOnPageLoad`)).\r\n\t             * Note; this is true whatever the developer has set for `data-an-default` in the html (asp.net users).\r\n\t             *\r\n\t             * In other words : if `defaultValueOverride` is not null, it means the developer is trying to prevent postback problems.\r\n\t             * But if `input.value` is set to a number, and `$this.attr('value')` is not set, then it means the dev has\r\n\t             * changed the input value, and then it means we should not overwrite his own decision to do so.\r\n\t             * Hence, if `defaultValueOverride` is not null, but `input.value` is a number and `$this.attr('value')` is not set,\r\n\t             * we should ignore `defaultValueOverride` altogether.\r\n\t             */\n\t            var unLocalizedCurrentValue = toNumericValue(currentValue, settings); // This allows to use a localized value on startup oDec\n\t            if (settings.formatOnPageLoad && currentValue !== '' && isUndefinedOrNullOrEmpty($this.attr('value'))) {\n\t                // Check if the `value` is valid or not\n\t                if (!isNaN(unLocalizedCurrentValue) && Infinity !== unLocalizedCurrentValue) {\n\t                    $this.autoNumeric('set', unLocalizedCurrentValue);\n\t                    setValue = false;\n\t                } else {\n\t                    // If not, inform the developer that nothing usable has been provided\n\t                    throwError('The value [' + currentValue + '] used in the input is not a valid value autoNumeric can work with.');\n\t                }\n\t            } else {\n\t                /* Checks for :\r\n\t                 * - page reload from back button, and\r\n\t                 * - ASP.net form post back\r\n\t                 *      The following HTML data attribute is REQUIRED (data-an-default=\"same value as the value attribute\")\r\n\t                 *      example: <asp:TextBox runat=\"server\" id=\"someID\" text=\"1234.56\" data-an-default=\"1234.56\">\r\n\t                 */\n\t                if (settings.defaultValueOverride !== null && settings.defaultValueOverride.toString() !== currentValue || settings.defaultValueOverride === null && currentValue !== '' && currentValue !== $this.attr('value') || currentValue !== '' && $this.attr('type') === 'hidden' && !isNumber(unLocalizedCurrentValue)) {\n\t                    if (settings.decimalPlacesShownOnFocus !== null && settings.saveValueToSessionStorage || settings.scaleDivisor && settings.saveValueToSessionStorage) {\n\t                        settings.rawValue = saveValueToPersistentStorage($this[0], settings, 'get');\n\t                    }\n\t\n\t                    // If the decimalPlacesShownOnFocus value should NOT be saved in sessionStorage\n\t                    if (!settings.saveValueToSessionStorage) {\n\t                        var toStrip = void 0;\n\t\n\t                        if (settings.negativeBracketsTypeOnBlur !== null && settings.negativeSignCharacter !== '') {\n\t                            settings.hasFocus = true;\n\t                            toStrip = toggleNegativeBracket(currentValue, settings);\n\t                        } else {\n\t                            toStrip = currentValue;\n\t                        }\n\t\n\t                        if ((settings.negativePositiveSignPlacement === 's' || settings.negativePositiveSignPlacement !== 'p' && settings.currencySymbolPlacement === 's') && settings.negativeSignCharacter !== '' && isNegative(currentValue)) {\n\t                            settings.rawValue = settings.negativeSignCharacter + stripAllNonNumberCharacters(toStrip, settings, true);\n\t                        } else {\n\t                            settings.rawValue = stripAllNonNumberCharacters(toStrip, settings, true);\n\t                        }\n\t                    }\n\t\n\t                    setValue = false;\n\t                }\n\t            }\n\t\n\t            if (currentValue === '') {\n\t                switch (settings.emptyInputBehavior) {\n\t                    case 'focus':\n\t                        setValue = false;\n\t                        break;\n\t                    case 'always':\n\t                        jQueryOriginalVal.call($this, settings.currencySymbol);\n\t                        setValue = false;\n\t                        break;\n\t                    case 'zero':\n\t                        $this.autoNumeric('set', '0');\n\t                        setValue = false;\n\t                        break;\n\t                    default:\n\t                    //\n\t                }\n\t            } else if (setValue && currentValue === $this.attr('value')) {\n\t                $this.autoNumeric('set', currentValue);\n\t            }\n\t        }\n\t\n\t        if (isInArray($this.prop('tagName').toLowerCase(), settings.tagList) && $this.text() !== '') {\n\t            if (settings.defaultValueOverride !== null) {\n\t                if (settings.defaultValueOverride === $this.text()) {\n\t                    $this.autoNumeric('set', $this.text());\n\t                }\n\t            } else {\n\t                $this.autoNumeric('set', $this.text());\n\t            }\n\t        }\n\t    }\n\t\n\t    /**\r\n\t     * Enhance the user experience by modifying the default `negativePositiveSignPlacement` option depending on `currencySymbol` and `currencySymbolPlacement`.\r\n\t     *\r\n\t     * If the user has not set the placement of the negative sign (`negativePositiveSignPlacement`), but has set a currency symbol (`currencySymbol`),\r\n\t     * then we modify the default value of `negativePositiveSignPlacement` in order to keep the resulting output logical by default :\r\n\t     * - \"$-1,234.56\" instead of \"-$1,234.56\" ({currencySymbol: \"$\", negativePositiveSignPlacement: \"r\"})\r\n\t     * - \"-1,234.56$\" instead of \"1,234.56-$\" ({currencySymbol: \"$\", currencySymbolPlacement: \"s\", negativePositiveSignPlacement: \"p\"})\r\n\t     *\r\n\t     * @param {object} settings\r\n\t     */\n\t    function correctNegativePositiveSignPlacementOption(settings) {\n\t        // If negativePositiveSignPlacement is already set, we do not overwrite it\n\t        if (!isNull(settings.negativePositiveSignPlacement)) {\n\t            return;\n\t        }\n\t\n\t        if (!isUndefined(settings) && isUndefinedOrNullOrEmpty(settings.negativePositiveSignPlacement) && !isUndefinedOrNullOrEmpty(settings.currencySymbol)) {\n\t            switch (settings.currencySymbolPlacement) {\n\t                case 's':\n\t                    settings.negativePositiveSignPlacement = 'p'; // Default -1,234.56 €\n\t                    break;\n\t                case 'p':\n\t                    settings.negativePositiveSignPlacement = 'l'; // Default -$1,234.56\n\t                    break;\n\t                default:\n\t                //\n\t            }\n\t        } else {\n\t            // Sets the default value if `negativePositiveSignPlacement` is `null`\n\t            settings.negativePositiveSignPlacement = 'l';\n\t        }\n\t    }\n\t\n\t    /**\r\n\t     * Analyze and save the minimumValue and maximumValue integer size for later uses\r\n\t     *\r\n\t     * @param {object} settings\r\n\t     */\n\t    function calculateVMinAndVMaxIntegerSizes(settings) {\n\t        var _settings$maximumValu = settings.maximumValue.toString().split('.'),\n\t            _settings$maximumValu2 = _slicedToArray(_settings$maximumValu, 1),\n\t            maximumValueIntegerPart = _settings$maximumValu2[0];\n\t\n\t        var _ref3 = !settings.minimumValue && settings.minimumValue !== 0 ? [] : settings.minimumValue.toString().split('.'),\n\t            _ref4 = _slicedToArray(_ref3, 1),\n\t            minimumValueIntegerPart = _ref4[0];\n\t\n\t        maximumValueIntegerPart = maximumValueIntegerPart.replace('-', '');\n\t        minimumValueIntegerPart = minimumValueIntegerPart.replace('-', '');\n\t\n\t        settings.mIntPos = Math.max(maximumValueIntegerPart.length, 1);\n\t        settings.mIntNeg = Math.max(minimumValueIntegerPart.length, 1);\n\t    }\n\t\n\t    /**\r\n\t     * Modify `decimalPlacesOverride` as needed\r\n\t     *\r\n\t     * @param {object} settings\r\n\t     */\n\t    function correctDecimalPlacesOverrideOption(settings) {\n\t        if (isNull(settings.decimalPlacesOverride)) {\n\t            settings.decimalPlacesOverride = maximumVMinAndVMaxDecimalLength(settings.minimumValue, settings.maximumValue);\n\t        }\n\t        settings.oDec = String(settings.decimalPlacesOverride);\n\t\n\t        // Most calculus assume `decimalPlacesOverride` is an integer, the following statement makes it clear (otherwise having it as a string leads to problems in rounding for instance)\n\t        settings.decimalPlacesOverride = Number(settings.decimalPlacesOverride);\n\t    }\n\t\n\t    /**\r\n\t     * Sets the alternative decimal separator key.\r\n\t     *\r\n\t     * @param {object} settings\r\n\t     */\n\t    function setsAlternativeDecimalSeparatorCharacter(settings) {\n\t        if (isNull(settings.decimalCharacterAlternative) && Number(settings.decimalPlacesOverride) > 0) {\n\t            if (settings.decimalCharacter === '.' && settings.digitGroupSeparator !== ',') {\n\t                settings.decimalCharacterAlternative = ',';\n\t            } else if (settings.decimalCharacter === ',' && settings.digitGroupSeparator !== '.') {\n\t                settings.decimalCharacterAlternative = '.';\n\t            }\n\t        }\n\t    }\n\t\n\t    /**\r\n\t     * Caches regular expressions for stripAllNonNumberCharacters\r\n\t     *\r\n\t     * @param {object} settings\r\n\t     */\n\t    function cachesUsualRegularExpressions(settings) {\n\t        var allNumbersReg = '[0-9]';\n\t        var noAllNumbersReg = '[^0-9]';\n\t\n\t        // Test if there is a negative character in the string\n\t        var aNegReg = settings.negativeSignCharacter ? '([-\\\\' + settings.negativeSignCharacter + ']?)' : '(-?)';\n\t        settings.aNegRegAutoStrip = aNegReg;\n\t\n\t        var negativeSignRegPart = void 0;\n\t        if (settings.negativeSignCharacter) {\n\t            negativeSignRegPart = '\\\\' + settings.negativeSignCharacter;\n\t        } else {\n\t            negativeSignRegPart = '';\n\t        }\n\t        settings.skipFirstAutoStrip = new RegExp(aNegReg + '[^-' + negativeSignRegPart + '\\\\' + settings.decimalCharacter + allNumbersReg + '].*?(' + allNumbersReg + '|\\\\' + settings.decimalCharacter + allNumbersReg + ')');\n\t        settings.skipLastAutoStrip = new RegExp('(' + allNumbersReg + '\\\\' + settings.decimalCharacter + '?)[^\\\\' + settings.decimalCharacter + allNumbersReg + ']' + noAllNumbersReg + '*$');\n\t\n\t        var allowed = '-0123456789\\\\' + settings.decimalCharacter;\n\t        settings.allowedAutoStrip = new RegExp('[^' + allowed + ']', 'g');\n\t        settings.numRegAutoStrip = new RegExp(aNegReg + '(?:\\\\' + settings.decimalCharacter + '?(' + allNumbersReg + '+\\\\' + settings.decimalCharacter + allNumbersReg + '+)|(' + allNumbersReg + '*(?:\\\\' + settings.decimalCharacter + allNumbersReg + '*)?))');\n\t\n\t        // Using this regex version `^${settings.aNegRegAutoStrip}0*(\\\\d|$)` entirely clear the input on blur\n\t        settings.stripReg = new RegExp('^' + settings.aNegRegAutoStrip + '0*(' + allNumbersReg + ')');\n\t    }\n\t\n\t    /**\r\n\t     * Modify the user settings to make them 'exploitable' later.\r\n\t     *\r\n\t     * @param {object} settings\r\n\t     */\n\t    function transformOptionsValuesToDefaultTypes(settings) {\n\t        $.each(settings, function (key, value) {\n\t            // Convert the string 'true' and 'false' to real Boolean\n\t            if (value === 'true' || value === 'false') {\n\t                settings[key] = value === 'true';\n\t            }\n\t\n\t            // Convert numbers in options to strings\n\t            //TODO if a value is already of type 'Number', shouldn't we keep it as a number for further manipulation, instead of using a string?\n\t            if (typeof value === 'number' && key !== 'aScale') {\n\t                settings[key] = value.toString();\n\t            }\n\t        });\n\t    }\n\t\n\t    /**\r\n\t     * Convert the old settings options name to new ones.\r\n\t     *\r\n\t     * @param {object} options\r\n\t     */\n\t    function convertOldOptionsToNewOnes(options) {\n\t        //TODO Delete this function once the old options are not used anymore\n\t        var oldOptionsConverter = {\n\t            // Old option name, with their corresponding new option\n\t            aSep: 'digitGroupSeparator',\n\t            nSep: 'noSeparatorOnFocus',\n\t            dGroup: 'digitalGroupSpacing',\n\t            aDec: 'decimalCharacter',\n\t            altDec: 'decimalCharacterAlternative',\n\t            aSign: 'currencySymbol',\n\t            pSign: 'currencySymbolPlacement',\n\t            pNeg: 'negativePositiveSignPlacement',\n\t            aSuffix: 'suffixText',\n\t            oLimits: 'overrideMinMaxLimits',\n\t            vMax: 'maximumValue',\n\t            vMin: 'minimumValue',\n\t            mDec: 'decimalPlacesOverride',\n\t            eDec: 'decimalPlacesShownOnFocus',\n\t            scaleDecimal: 'scaleDecimalPlaces',\n\t            aStor: 'saveValueToSessionStorage',\n\t            mRound: 'roundingMethod',\n\t            aPad: 'allowDecimalPadding',\n\t            nBracket: 'negativeBracketsTypeOnBlur',\n\t            wEmpty: 'emptyInputBehavior',\n\t            lZero: 'leadingZero',\n\t            aForm: 'formatOnPageLoad',\n\t            sNumber: 'selectNumberOnly',\n\t            anDefault: 'defaultValueOverride',\n\t            unSetOnSubmit: 'unformatOnSubmit',\n\t            outputType: 'outputFormat',\n\t            debug: 'showWarnings',\n\t            // Current options :\n\t            digitGroupSeparator: true,\n\t            noSeparatorOnFocus: true,\n\t            digitalGroupSpacing: true,\n\t            decimalCharacter: true,\n\t            decimalCharacterAlternative: true,\n\t            currencySymbol: true,\n\t            currencySymbolPlacement: true,\n\t            negativePositiveSignPlacement: true,\n\t            showPositiveSign: true,\n\t            suffixText: true,\n\t            overrideMinMaxLimits: true,\n\t            maximumValue: true,\n\t            minimumValue: true,\n\t            decimalPlacesOverride: true,\n\t            decimalPlacesShownOnFocus: true,\n\t            scaleDivisor: true,\n\t            scaleDecimalPlaces: true,\n\t            scaleSymbol: true,\n\t            saveValueToSessionStorage: true,\n\t            onInvalidPaste: true,\n\t            roundingMethod: true,\n\t            allowDecimalPadding: true,\n\t            negativeBracketsTypeOnBlur: true,\n\t            emptyInputBehavior: true,\n\t            leadingZero: true,\n\t            formatOnPageLoad: true,\n\t            selectNumberOnly: true,\n\t            defaultValueOverride: true,\n\t            unformatOnSubmit: true,\n\t            outputFormat: true,\n\t            showWarnings: true,\n\t            failOnUnknownOption: true,\n\t            //FIXME Find a way to exclude those internal data from the settings object (ideally by using another object, or better yet, class attributes) -->\n\t            hasFocus: true,\n\t            runOnce: true,\n\t            rawValue: true,\n\t            trailingNegative: true,\n\t            caretFix: true,\n\t            throwInput: true,\n\t            strip: true,\n\t            tagList: true,\n\t            negativeSignCharacter: true,\n\t            positiveSignCharacter: true,\n\t            mIntPos: true,\n\t            mIntNeg: true,\n\t            oDec: true,\n\t            oPad: true,\n\t            oBracket: true,\n\t            oSep: true,\n\t            oSign: true,\n\t            oSuffix: true,\n\t            aNegRegAutoStrip: true,\n\t            skipFirstAutoStrip: true,\n\t            skipLastAutoStrip: true,\n\t            allowedAutoStrip: true,\n\t            numRegAutoStrip: true,\n\t            stripReg: true,\n\t            holder: true\n\t        };\n\t\n\t        for (var option in options) {\n\t            if (options.hasOwnProperty(option)) {\n\t                if (oldOptionsConverter[option] === true) {\n\t                    // If the option is a 'new' option, we continue looping\n\t                    continue;\n\t                }\n\t\n\t                if (oldOptionsConverter.hasOwnProperty(option)) {\n\t                    // Else we have an 'old' option name\n\t                    warning('You are using the deprecated option name \\'' + option + '\\'. Please use \\'' + oldOptionsConverter[option] + '\\' instead from now on. The old option name will be dropped soon.', true);\n\t\n\t                    // Then we modify the initial option object to use the new options instead of the old ones\n\t                    options[oldOptionsConverter[option]] = options[option];\n\t                    delete options[option];\n\t                } else if (options.failOnUnknownOption) {\n\t                    // ...or the option name is unknown. This means there is a problem with the options object, therefore we throw an error.\n\t                    throwError('Option name \\'' + option + '\\' is unknown. Please fix the options passed to autoNumeric');\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    /**\r\n\t     * Analyse the settings/options passed by the user, validate and clean them, then return them.\r\n\t     * Note: This returns `null` if somehow the settings returned by jQuery is not an object.\r\n\t     *\r\n\t     * @param {object} options\r\n\t     * @param {object} $this jQuery-selected DOM element\r\n\t     * @param {boolean} update - If TRUE, then the settings already exists and this function only updates them instead of recreating them from scratch\r\n\t     * @returns {object|null}\r\n\t     */\n\t    function getInitialSettings(options, $this) {\n\t        var update = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\t\n\t        // Attempt to grab \"autoNumeric\" settings. If they do not exist, it returns \"undefined\".\n\t        var settings = $this.data('autoNumeric');\n\t\n\t        // If the user used old options, we convert them to new ones\n\t        if (update || !isNull(options)) {\n\t            convertOldOptionsToNewOnes(options);\n\t        }\n\t\n\t        if (update || isUndefined(settings)) {\n\t            if (update) {\n\t                // The settings are updated\n\t                settings = $.extend(settings, options);\n\t            } else {\n\t                // If we couldn't grab any settings, create them from the default ones and combine them with the options passed\n\t                // The settings are generated for the first time\n\t                // This also attempt to grab the HTML5 data. If it doesn't exist, we'll get \"undefined\"\n\t                var tagData = $this.data();\n\t                settings = $.extend({}, defaultSettings, tagData, options, {\n\t                    hasFocus: false,\n\t                    runOnce: false,\n\t                    rawValue: '',\n\t                    trailingNegative: false,\n\t                    caretFix: false,\n\t                    androidSelectionStart: null,\n\t                    throwInput: true, // Throw input event\n\t                    strip: true,\n\t                    tagList: allowedTagList\n\t                });\n\t            }\n\t\n\t            // Modify the user settings to make them 'exploitable'\n\t            transformOptionsValuesToDefaultTypes(settings);\n\t\n\t            // Improve the `negativePositiveSignPlacement` option if needed\n\t            correctNegativePositiveSignPlacementOption(settings);\n\t\n\t            // Set the negative and positive signs, as needed\n\t            settings.negativeSignCharacter = settings.minimumValue < 0 ? '-' : '';\n\t            settings.positiveSignCharacter = settings.maximumValue >= 0 ? '+' : '';\n\t\n\t            // Additional changes to the settings object (from the original autoCode() function)\n\t            runCallbacksFoundInTheSettingsObject($this, settings);\n\t            calculateVMinAndVMaxIntegerSizes(settings);\n\t            correctDecimalPlacesOverrideOption(settings);\n\t            setsAlternativeDecimalSeparatorCharacter(settings);\n\t            cachesUsualRegularExpressions(settings);\n\t\n\t            // Validate the settings\n\t            validate(settings, false); // Throws if necessary\n\t\n\t            // Original settings saved for use when decimalPlacesShownOnFocus, scaleDivisor & noSeparatorOnFocus options are being used\n\t            keepAnOriginalSettingsCopy(settings);\n\t\n\t            // Save our new settings\n\t            $this.data('autoNumeric', settings);\n\t\n\t            return settings;\n\t        } else {\n\t            return null;\n\t        }\n\t    }\n\t\n\t    /**\r\n\t     * Convert the `value` parameter that can either be :\r\n\t     * - a real number,\r\n\t     * - a string representing a real number, or\r\n\t     * - a string representing a localized number (with specific group separators and decimal character),\r\n\t     * ...to a string representing a real 'javascript' number (ie. '1234' or '1234.567').\r\n\t     *\r\n\t     * This function returns `NaN` if such conversion fails.\r\n\t     *\r\n\t     * @param {int|float|string} value\r\n\t     * @param {object} settings\r\n\t     * @returns {string|NaN}\r\n\t     */\n\t    function toNumericValue(value, settings) {\n\t        var result = void 0;\n\t        if (isNumber(Number(value))) {\n\t            // The value has either already been stripped, or a 'real' javascript number is passed as a parameter\n\t            result = value;\n\t        } else {\n\t            // Else if it's a string that `Number()` cannot typecast, then we try to convert the localized numeric string to a numeric one\n\t            // Convert the value to a numeric string, stripping unnecessary characters in the process\n\t            result = convertToNumericString(value.toString(), settings);\n\t\n\t            // If the result is still not a numeric string, then we throw a warning\n\t            if (!isNumber(Number(result))) {\n\t                warning('The value \"' + value + '\" being \"set\" is not numeric and therefore cannot be used appropriately.', settings.showWarnings);\n\t                result = NaN;\n\t            }\n\t        }\n\t\n\t        return result;\n\t    }\n\t\n\t    /**\r\n\t     * Methods supported by autoNumeric\r\n\t     */\n\t    var methods = {\n\t        /**\r\n\t         * Method to initialize autoNumeric and attach the settings (options can be passed as a parameter)\r\n\t         * The options passed as a parameter is an object that contains the settings (ie. {digitGroupSeparator: \".\", decimalCharacter: \",\", currencySymbol: '€ '})\r\n\t         *\r\n\t         * @example\r\n\t         * $(someSelector).autoNumeric('init');            // Initiate autoNumeric with defaults\r\n\t         * $(someSelector).autoNumeric();                  // Initiate autoNumeric with defaults\r\n\t         * $(someSelector).autoNumeric('init', {options}); // Initiate autoNumeric with options\r\n\t         * $(someSelector).autoNumeric({options});         // Initiate autoNumeric with options\r\n\t         *\r\n\t         * @param {object} options\r\n\t         * @returns {*|{statements, branches, lines, functions, excludes, overrides}|{statements, branches, lines, functions, excludes}|{statements, lines, branches, functions, excludes}}\r\n\t         */\n\t        init: function init(options) {\n\t            return this.each(function () {\n\t                var $this = $(this);\n\t                var $input = getInputIfSupportedTagAndType($this);\n\t\n\t                var settings = getInitialSettings(options, $this, false);\n\t                if (isNull(settings)) {\n\t                    return this;\n\t                }\n\t\n\t                // Create the AutoNumericHolder object that store the field properties\n\t                var holder = getAutoNumericHolder($this, settings, false);\n\t\n\t                if (!settings.runOnce && settings.formatOnPageLoad) {\n\t                    formatDefaultValueOnPageLoad(settings, $input, $this);\n\t                }\n\t\n\t                settings.runOnce = true;\n\t\n\t                // Add the events listeners to supported input types (\"text\", \"hidden\", \"tel\" and no type)\n\t                if ($input) {\n\t                    this.addEventListener('focusin', function (e) {\n\t                        onFocusInAndMouseEnter($this, holder, e);\n\t                    }, false);\n\t                    this.addEventListener('mouseenter', function (e) {\n\t                        onFocusInAndMouseEnter($this, holder, e);\n\t                    }, false);\n\t                    this.addEventListener('blur', function (e) {\n\t                        onFocusOutAndMouseLeave($this, holder, e);\n\t                    }, false);\n\t                    this.addEventListener('mouseleave', function (e) {\n\t                        onFocusOutAndMouseLeave($this, holder, e);\n\t                    }, false);\n\t                    this.addEventListener('keydown', function (e) {\n\t                        onKeydown(holder, e);\n\t                    }, false);\n\t                    this.addEventListener('keypress', function (e) {\n\t                        onKeypress(holder, e);\n\t                    }, false);\n\t                    this.addEventListener('input', function (e) {\n\t                        onInput(holder, e);\n\t                    }, false);\n\t                    this.addEventListener('keyup', function (e) {\n\t                        onKeyup(holder, settings, e);\n\t                    }, false);\n\t                    this.addEventListener('blur', function (e) {\n\t                        onBlur(holder, e);\n\t                    }, false);\n\t                    this.addEventListener('paste', function (e) {\n\t                        onPaste($this, holder, e);\n\t                    }, false);\n\t                    onSubmit($this, holder); //TODO Switch to `addEventListener'\n\t                }\n\t            });\n\t        },\n\t\n\t\n\t        /**\r\n\t         * Method to stop and remove autoNumeric for the current element.\r\n\t         * Note: this does not remove the formatting.\r\n\t         *\r\n\t         * @example $(someSelector).autoNumeric(\"destroy\"); // Destroys autoNumeric on this selected element\r\n\t         *\r\n\t         * @returns {*|jQuery}\r\n\t         */\n\t        destroy: function destroy() {\n\t            return $(this).each(function () {\n\t                var $this = getCurrentElement(this);\n\t                var settings = $this.data('autoNumeric');\n\t                if ((typeof settings === 'undefined' ? 'undefined' : _typeof(settings)) === 'object') {\n\t                    jQueryOriginalVal.call($this, '');\n\t                    saveValueToPersistentStorage($this[0], settings, 'wipe');\n\t                    $this.removeData('autoNumeric');\n\t                    $this.off('.autoNumeric');\n\t                }\n\t            });\n\t        },\n\t\n\t\n\t        /**\r\n\t         * Method to clear the value from sessionStorage (or cookie, depending on browser supports).\r\n\t         *\r\n\t         * @example $(someSelector).autoNumeric(\"wipe\"); // Removes session storage and cookies from memory\r\n\t         *\r\n\t         * @returns {*|jQuery}\r\n\t         */\n\t        wipe: function wipe() {\n\t            return $(this).each(function () {\n\t                var $this = getCurrentElement(this);\n\t                var settings = $this.data('autoNumeric');\n\t                if ((typeof settings === 'undefined' ? 'undefined' : _typeof(settings)) === 'object') {\n\t                    jQueryOriginalVal.call($this, '');\n\t                    settings.rawValue = '';\n\t                    saveValueToPersistentStorage($this[0], settings, 'wipe');\n\t                }\n\t            });\n\t        },\n\t\n\t\n\t        /**\r\n\t         * Method that updates the autoNumeric settings.\r\n\t         * It can be called multiple times if needed.\r\n\t         * The options passed as a parameter is an object that contains the settings (ie. {digitGroupSeparator: \".\", decimalCharacter: \",\", currencySymbol: '€ '}).\r\n\t         *\r\n\t         * @example $(someSelector).autoNumeric(\"update\", {options}); // Updates the settings\r\n\t         *\r\n\t         * @param {object} options\r\n\t         * @returns {*|jQuery}\r\n\t         */\n\t        update: function update(options) {\n\t            return $(this).each(function () {\n\t                // Retrieve the current unformatted input value\n\t                var $this = getCurrentElement(this);\n\t                var strip = $this.autoNumeric('get');\n\t\n\t                // Update the settings\n\t                var settings = getInitialSettings(options, $this, true);\n\t\n\t                // Update the AutoNumericHolder object that store the field properties\n\t                getAutoNumericHolder($this, settings, true);\n\t\n\t                // Reformat the input value with the new settings\n\t                if (jQueryOriginalVal.call($this) !== '' || $this.text() !== '') {\n\t                    return $this.autoNumeric('set', strip);\n\t                }\n\t            });\n\t        },\n\t\n\t\n\t        /**\r\n\t         * Method to format the value passed as a parameter.\r\n\t         * If the value is passed as a string, it can be an integer '1234' or a double '1234.56789'\r\n\t         * and must contain only numbers and one decimal (period) character\r\n\t         *\r\n\t         * @example $(someSelector).autoNumeric('set', '12345.67'); // Formats the value being passed as the second parameter\r\n\t         *\r\n\t         * @param {*} newValue\r\n\t         * @returns {*|jQuery}\r\n\t         */\n\t        set: function set(newValue) {\n\t            return $(this).each(function () {\n\t                if (newValue === null || isUndefined(newValue)) {\n\t                    return;\n\t                }\n\t\n\t                //TODO This looks a lot like `getInputIfSupportedTagAndType()`. Is that necessary? Can the input element be changed since autoNumeric has been initialized?\n\t                var $this = getCurrentElement(this);\n\t                var settings = $this.data('autoNumeric');\n\t                if ((typeof settings === 'undefined' ? 'undefined' : _typeof(settings)) !== 'object') {\n\t                    throwError('Initializing autoNumeric is required prior to calling the \"set\" method.');\n\t                }\n\t                // Reset the trailing negative settings, since it's possible the previous value was negative, but not the newly set one\n\t                settings.trailingNegative = false;\n\t\n\t                var $input = $this.is('input[type=text], input[type=hidden], input[type=tel], input:not([type])');\n\t\n\t                var value = toNumericValue(newValue, settings);\n\t                if (isNaN(value)) {\n\t                    return jQueryOriginalVal.call($this, '');\n\t                }\n\t\n\t                if (value !== '') {\n\t                    var _checkIfInRangeWithOv5 = checkIfInRangeWithOverrideOption(value, settings),\n\t                        _checkIfInRangeWithOv6 = _slicedToArray(_checkIfInRangeWithOv5, 2),\n\t                        minTest = _checkIfInRangeWithOv6[0],\n\t                        maxTest = _checkIfInRangeWithOv6[1];\n\t                    // This test is needed by the showPositiveSign option\n\t\n\t\n\t                    var isZero = isZeroOrHasNoValue(value);\n\t                    if (isZero) {\n\t                        value = '0';\n\t                    }\n\t\n\t                    if (minTest && maxTest) {\n\t                        if ($input || isInArray($this.prop('tagName').toLowerCase(), settings.tagList)) {\n\t                            // to ensure rounding does not happen twice\n\t                            var hasBeenRounded = false;\n\t\n\t                            // rounds the the extended decimal places\n\t                            var tempDecimal = void 0;\n\t                            if (settings.decimalPlacesShownOnFocus) {\n\t                                tempDecimal = settings.decimalPlacesOverride;\n\t                                settings.decimalPlacesOverride = Number(settings.decimalPlacesShownOnFocus);\n\t                                value = roundValue(value, settings);\n\t                                hasBeenRounded = true;\n\t                                settings.decimalPlacesOverride = tempDecimal;\n\t                            }\n\t\n\t                            if (settings.scaleDivisor && !settings.onOff) {\n\t                                value = roundValue(value, settings);\n\t                                settings.rawValue = cleanLeadingTrailingZeros(value.replace(settings.decimalCharacter, '.'), settings);\n\t                                value = toNumericValue(value, settings);\n\t                                value = value / settings.scaleDivisor;\n\t                                value = value.toString();\n\t                                if (settings.scaleDecimalPlaces) {\n\t                                    tempDecimal = settings.decimalPlacesOverride;\n\t                                    settings.decimalPlacesOverride = Number(settings.scaleDecimalPlaces);\n\t                                    value = roundValue(value, settings);\n\t                                    hasBeenRounded = true;\n\t                                }\n\t                            }\n\t\n\t                            // Rounds if this has not been done already\n\t                            if (!hasBeenRounded) {\n\t                                value = roundValue(value, settings);\n\t                            }\n\t\n\t                            // Stores rawValue including the decimalPlacesShownOnFocus\n\t                            if (!settings.scaleDivisor) {\n\t                                settings.rawValue = cleanLeadingTrailingZeros(value.replace(settings.decimalCharacter, '.'), settings);\n\t                            }\n\t\n\t                            value = modifyNegativeSignAndDecimalCharacterForFormattedValue(value, settings);\n\t                            value = addGroupSeparators(value, settings);\n\t\n\t                            if (settings.scaleDivisor && settings.scaleDecimalPlaces && !settings.onOff) {\n\t                                settings.decimalPlacesOverride = tempDecimal;\n\t                            }\n\t                        }\n\t\n\t                        if (settings.saveValueToSessionStorage && (settings.decimalPlacesShownOnFocus || settings.scaleDivisor)) {\n\t                            saveValueToPersistentStorage($this[0], settings, 'set');\n\t                        }\n\t                    } else {\n\t                        settings.rawValue = '';\n\t                        saveValueToPersistentStorage($this[0], settings, 'wipe');\n\t                        var attemptedValue = value;\n\t                        value = '';\n\t                        if (!minTest) {\n\t                            $this.trigger('autoNumeric:minExceeded');\n\t                        }\n\t\n\t                        if (!maxTest) {\n\t                            $this.trigger('autoNumeric:maxExceeded');\n\t                        }\n\t\n\t                        throwError('The value [' + attemptedValue + '] being set falls outside of the minimumValue [' + settings.minimumValue + '] and maximumValue [' + settings.maximumValue + '] range set for this element');\n\t\n\t                        return jQueryOriginalVal.call($this, '');\n\t                    }\n\t                } else {\n\t                    return jQueryOriginalVal.call($this, '');\n\t                }\n\t\n\t                if (!settings.hasFocus && settings.scaleSymbol) {\n\t                    value = value + settings.scaleSymbol;\n\t                }\n\t\n\t                if ($input) {\n\t                    return jQueryOriginalVal.call($this, value);\n\t                }\n\t\n\t                if (isInArray($this.prop('tagName').toLowerCase(), settings.tagList)) {\n\t                    return $this.text(value);\n\t                }\n\t\n\t                return false;\n\t            });\n\t        },\n\t\n\t\n\t        /**\r\n\t         * Method to un-format inputs.\r\n\t         * This is handy to use right before form submission.\r\n\t         *\r\n\t         * By default, values are returned as ISO numeric strings (ie. \"1234.56\" or \"-1234.56\"), where the decimal character is a period.\r\n\t         * Locale formats are supported \"1234.56-\" or \"1234,56\" or \"-1234,56 or \"1234,56-\", or even plain numbers.\r\n\t         * Please see option \"outputFormat\" for more details\r\n\t         *\r\n\t         * @example $(someSelector).autoNumeric('unSet');\r\n\t         *\r\n\t         * @returns {*|jQuery}\r\n\t         */\n\t        unSet: function unSet() {\n\t            return $(this).each(function () {\n\t                var $this = getCurrentElement(this);\n\t                var settings = $this.data('autoNumeric');\n\t                if ((typeof settings === 'undefined' ? 'undefined' : _typeof(settings)) === 'object') {\n\t                    settings.hasFocus = true;\n\t                    jQueryOriginalVal.call($this, $this.autoNumeric('getLocalized'));\n\t                }\n\t            });\n\t        },\n\t\n\t\n\t        /**\r\n\t         * Method to re-format inputs.\r\n\t         * This is handy to use right after form submission.\r\n\t         *\r\n\t         * This is called after the 'unSet' method to reformat the input\r\n\t         *\r\n\t         * @example $(someSelector).autoNumeric('reSet');\r\n\t         *\r\n\t         * @returns {*|jQuery}\r\n\t         */\n\t        reSet: function reSet() {\n\t            return $(this).each(function () {\n\t                var $this = getCurrentElement(this);\n\t                var settings = $this.data('autoNumeric');\n\t                if ((typeof settings === 'undefined' ? 'undefined' : _typeof(settings)) === 'object') {\n\t                    $this.autoNumeric('set', jQueryOriginalVal.call($this));\n\t                }\n\t            });\n\t        },\n\t\n\t\n\t        /**\r\n\t         * Return the unformatted value as a string.\r\n\t         *\r\n\t         * @usage $(someSelector).autoNumeric('get');\r\n\t         *\r\n\t         * @returns {string}\r\n\t         */\n\t        get: function get() {\n\t            //TODO Why would we need to get a new reference to $this since it has been done in `init()`?\n\t            var $this = getCurrentElement(this);\n\t            //TODO This looks a lot like `getInputIfSupportedTagAndType()`. Is that necessary? Can the input element be changed since autoNumeric has been initialized?\n\t            var $input = $this.is('input[type=text], input[type=hidden], input[type=tel], input:not([type])');\n\t            var settings = $this.data('autoNumeric');\n\t            if ((typeof settings === 'undefined' ? 'undefined' : _typeof(settings)) !== 'object') {\n\t                throwError('Initializing autoNumeric is required prior to calling the \"get\" method.');\n\t            }\n\t\n\t            // determine the element type then use .eq(0) selector to grab the value of the first element in selector\n\t            var value = '';\n\t            if ($input) {\n\t                value = jQueryOriginalVal.call($this.eq(0));\n\t            } else if (isInArray($this.prop('tagName').toLowerCase(), settings.tagList)) {\n\t                value = $this.eq(0).text();\n\t            } else {\n\t                throwError('The \"<' + $this.prop('tagName').toLowerCase() + '>\" tag is not supported by autoNumeric');\n\t            }\n\t\n\t            if (settings.decimalPlacesShownOnFocus || settings.scaleDivisor) {\n\t                value = settings.rawValue;\n\t            } else {\n\t                // Test if the value is negative\n\t                var isValueNegative = isNegative(value);\n\t\n\t                if (!/\\d/.test(value) && settings.emptyInputBehavior === 'focus') {\n\t                    return '';\n\t                }\n\t\n\t                if (value !== '' && settings.negativeBracketsTypeOnBlur !== null) {\n\t                    settings.hasFocus = true;\n\t                    value = toggleNegativeBracket(value, settings);\n\t                }\n\t\n\t                if (settings.runOnce || settings.formatOnPageLoad === false) {\n\t                    // Strips trailing negative symbol\n\t                    value = stripAllNonNumberCharacters(value, settings, true);\n\t                    // Trims leading and trailing zeros when leadingZero does NOT equal \"keep\".\n\t                    value = cleanLeadingTrailingZeros(value.replace(settings.decimalCharacter, '.'), settings);\n\t\n\t                    // Places the negative symbol in front of the trailing negative\n\t                    if (settings.trailingNegative && isValueNegative && !isNegative(value) && Number(value) !== 0) {\n\t                        value = '-' + value;\n\t                    }\n\t                }\n\t\n\t                if (value !== '' || value === '' && settings.emptyInputBehavior === 'zero') {\n\t                    value = modifyNegativeSignAndDecimalCharacterForRawValue(value, settings);\n\t                }\n\t            }\n\t\n\t            // Always return a numeric string\n\t            // This gets rid of the trailing zeros in the decimal places since `get` does not pad decimals\n\t            return trimPaddedZerosFromDecimalPlaces(value);\n\t        },\n\t\n\t\n\t        /**\r\n\t         * Returns the unformatted value, but following the `outputFormat` setting, which means the output can either be :\r\n\t         * - a string (that could or could not represent a number (ie. \"12345,67-\")), or\r\n\t         * - a plain number (if the setting 'number' is used).\r\n\t         *\r\n\t         * By default the returned values are an ISO numeric string \"1234.56\" or \"-1234.56\" where the decimal character is a period.\r\n\t         * Check the \"outputFormat\" option definition for more details.\r\n\t         *\r\n\t         * @usage $(someSelector).autoNumeric('getLocalized');\r\n\t         *\r\n\t         * @returns {*}\r\n\t         */\n\t        getLocalized: function getLocalized() {\n\t            var $this = getCurrentElement(this);\n\t            var value = $this.autoNumeric('get');\n\t            var settings = $this.data('autoNumeric');\n\t\n\t            if (Number(value) === 0 && settings.leadingZero !== 'keep') {\n\t                value = '0';\n\t            }\n\t\n\t            return toLocale(value, settings.outputFormat);\n\t        },\n\t\n\t\n\t        /**\r\n\t         * Return the input unformatted value as a real Javascript number.\r\n\t         *\r\n\t         * @usage $(someSelector).autoNumeric('getNumber');\r\n\t         *\r\n\t         * @returns {number}\r\n\t         */\n\t        getNumber: function getNumber() {\n\t            var $this = getCurrentElement(this);\n\t            var value = $this.autoNumeric('get');\n\t\n\t            return toLocale(value, 'number');\n\t        },\n\t\n\t\n\t        /**\r\n\t         * Return the current formatted value of the autoNumeric element.\r\n\t         * @usage aNInput.autoNumeric('getFormatted'))\r\n\t         *\r\n\t         * @returns {string}\r\n\t         */\n\t        getFormatted: function getFormatted() {\n\t            // Make sure `this[0]` exists as well as `.value` before trying to access that property\n\t            if (!this.hasOwnProperty('0') || !('value' in this[0])) {\n\t                throwError('Unable to get the formatted string from the element.');\n\t            }\n\t\n\t            return this[0].value;\n\t        },\n\t\n\t\n\t        /**\r\n\t         * The \"getString\" method uses jQuery's .serialize() method that creates a text string in standard URL-encoded notation.\r\n\t         *\r\n\t         * It then loops through the string and un-formats the inputs with autoNumeric.\r\n\t         * By defaults values returned as ISO numeric string \"1234.56\" or \"-1234.56\" where the decimal character is a period\r\n\t         * Locale formats are supported \"1234.56-\" or \"1234,56\" or \"-1234,56 or \"1234,56-\" or plain numbers => please see option \"outputFormat\" for details\r\n\t         *\r\n\t         * @returns {string}\r\n\t         */\n\t        getString: function getString() {\n\t            return _getStringOrArray(false, this);\n\t        },\n\t\n\t\n\t        /**\r\n\t         * The \"getArray\" method on the other hand uses jQuery's .serializeArray() method that creates array or objects that can be encoded as a JSON string.\r\n\t         *\r\n\t         * It then loops through the string and un-formats the inputs with autoNumeric.\r\n\t         * By defaults values returned as ISO numeric string \"1234.56\" or \"-1234.56\" where the decimal character is a period\r\n\t         * Locale formats are supported \"1234.56-\" or \"1234,56\" or \"-1234,56 or \"1234,56-\" or plain numbers => please see option \"outputFormat\" for details\r\n\t         *\r\n\t         * @returns {{}|[]}\r\n\t         */\n\t        getArray: function getArray() {\n\t            return _getStringOrArray(true, this);\n\t        },\n\t\n\t\n\t        /**\r\n\t         * The 'getSettings' function returns an object containing all the current autoNumeric settings.\r\n\t         *\r\n\t         * @example\r\n\t         * $(someSelector).autoNumeric('getSettings');\r\n\t         * $(someSelector).autoNumeric('getSettings').decimalCharacter; // Return the decimalCharacter setting as a string - any valid option name can be used\r\n\t         *\r\n\t         * @returns {object}\r\n\t         */\n\t        getSettings: function getSettings() {\n\t            //TODO Add an option argument `optionName` to this function so that it return only the value of that option, not the entire settings object\n\t            return this.data('autoNumeric');\n\t        }\n\t    };\n\t\n\t    /**\r\n\t     * The autoNumeric function accepts methods names (in string format) and those method parameters if needed.\r\n\t     * It initialize autoNumeric on the given element.\r\n\t     *\r\n\t     * @param {string} method The method name (ie. 'set', 'get', etc.)\r\n\t     * @param {*} args\r\n\t     * @returns {*}\r\n\t     */\n\t    $.fn.autoNumeric = function (method) {\n\t        if (methods[method]) {\n\t            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t                args[_key - 1] = arguments[_key];\n\t            }\n\t\n\t            return methods[method].apply(this, args);\n\t        }\n\t\n\t        if ((typeof method === 'undefined' ? 'undefined' : _typeof(method)) === 'object' || !method) {\n\t            // The options have been passed directly, without using a named method\n\t            return methods.init.apply(this, [method]);\n\t        }\n\t\n\t        throwError('Method \"' + method + '\" is not supported by autoNumeric');\n\t    };\n\t\n\t    /**\r\n\t     * Return the default autoNumeric settings.\r\n\t     *\r\n\t     * @returns {object}\r\n\t     */\n\t    getDefaultConfig = function getDefaultConfig() {\n\t        return defaultSettings;\n\t    };\n\t\n\t    $.fn.autoNumeric.defaults = defaultSettings; // Make those settings public via jQuery too.\n\t\n\t    /**\r\n\t     * Return all the predefined language options in one object.\r\n\t     * You can also access a specific language object directly by using `an.getLanguages().French` for instance.\r\n\t     *\r\n\t     * @returns {object}\r\n\t     */\n\t    getLanguages = function getLanguages() {\n\t        return languageOption;\n\t    };\n\t\n\t    $.fn.autoNumeric.lang = languageOption; // Make those predefined language options public via jQuery too.\n\t\n\t    /**\r\n\t     * Public function that allows formatting without an element trigger.\r\n\t     *\r\n\t     * @param {number|string} value A number, or a string that represent a javascript number\r\n\t     * @param {object|null} options\r\n\t     * @returns {*}\r\n\t     */\n\t    autoFormat = function autoFormat(value) {\n\t        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\t\n\t        if (isUndefined(value) || value === null) {\n\t            return null;\n\t        }\n\t\n\t        if (!isString(value) && !isNumber(value)) {\n\t            throwError('The value \"' + value + '\" being \"set\" is not numeric and therefore cannot be used appropriately.');\n\t        }\n\t\n\t        // Initiate a very basic settings object\n\t        var settings = $.extend({}, defaultSettings, { strip: false }, options);\n\t        if (value < 0) {\n\t            settings.negativeSignCharacter = '-';\n\t        }\n\t\n\t        if (isNull(settings.decimalPlacesOverride)) {\n\t            settings.decimalPlacesOverride = maximumVMinAndVMaxDecimalLength(settings.minimumValue, settings.maximumValue);\n\t        }\n\t\n\t        // Check the validity of the `value` parameter\n\t        // Convert the value to a numeric string, stripping unnecessary characters in the process\n\t        var valueString = toNumericValue(value, settings);\n\t        if (isNaN(valueString)) {\n\t            throwError('The value [' + valueString + '] that you are trying to format is not a recognized number.');\n\t        }\n\t\n\t        // Basic tests to check if the given valueString is valid\n\t\n\t        var _checkIfInRangeWithOv7 = checkIfInRangeWithOverrideOption(valueString, settings),\n\t            _checkIfInRangeWithOv8 = _slicedToArray(_checkIfInRangeWithOv7, 2),\n\t            minTest = _checkIfInRangeWithOv8[0],\n\t            maxTest = _checkIfInRangeWithOv8[1];\n\t\n\t        if (!minTest || !maxTest) {\n\t            // Throw a custom event\n\t            triggerEvent('autoFormat.autoNumeric', document, 'Range test failed');\n\t            throwError('The value [' + valueString + '] being set falls outside of the minimumValue [' + settings.minimumValue + '] and maximumValue [' + settings.maximumValue + '] range set for this element');\n\t        }\n\t\n\t        // Everything is ok, proceed to rounding, formatting and grouping\n\t        valueString = roundValue(valueString, settings);\n\t        valueString = modifyNegativeSignAndDecimalCharacterForFormattedValue(valueString, settings);\n\t        valueString = addGroupSeparators(valueString, settings);\n\t\n\t        return valueString;\n\t    };\n\t\n\t    $.fn.autoFormat = autoFormat; // The jQuery export\n\t\n\t    /**\r\n\t     * Public function that allows unformatting without an element.\r\n\t     *\r\n\t     * @param {string|number} value\r\n\t     * @param {object} options\r\n\t     * @returns {*}\r\n\t     */\n\t    autoUnFormat = function autoUnFormat(value, options) {\n\t        if (isUndefined(value) || value === null) {\n\t            return null;\n\t        }\n\t\n\t        // Giving an unformatted value should return the same unformatted value, whatever the options passed as a parameter\n\t        if (isNumber(value)) {\n\t            return Number(value);\n\t        }\n\t\n\t        if (isArray(value) || isObject(value)) {\n\t            //TODO Complete the test to throw when given a wrongly formatted number (ie. 'foobar')\n\t            // Check the validity of the `value` parameter\n\t            throwError('A number or a string representing a number is needed to be able to unformat it, [' + value + '] given.');\n\t        }\n\t\n\t        var settings = $.extend({}, defaultSettings, { strip: false }, options);\n\t        var allowed = '-0123456789\\\\' + settings.decimalCharacter;\n\t        var autoStrip = new RegExp('[^' + allowed + ']', 'gi');\n\t        value = value.toString();\n\t\n\t        // This checks is a negative sign is anywhere in the `value`, not just on the very first character (ie. '12345.67-')\n\t        if (isNegative(value)) {\n\t            settings.negativeSignCharacter = '-';\n\t        } else if (settings.negativeBracketsTypeOnBlur && settings.negativeBracketsTypeOnBlur.split(',')[0] === value.charAt(0)) {\n\t            settings.negativeSignCharacter = '-';\n\t            settings.hasFocus = true;\n\t            value = toggleNegativeBracket(value, settings);\n\t        }\n\t\n\t        value = value.replace(autoStrip, '');\n\t        value = value.replace(settings.decimalCharacter, '.');\n\t        value = toLocale(value, settings.outputFormat);\n\t\n\t        return value;\n\t    };\n\t\n\t    $.fn.autoUnformat = autoUnFormat; // The jQuery export\n\t\n\t    /**\r\n\t     * Validate the given option object.\r\n\t     * If the options are valid, this function returns nothing, otherwise if the options are invalid, this function throws an error.\r\n\t     *\r\n\t     * This tests if the options are not conflicting and are well formatted.\r\n\t     * This function is lenient since it only tests the settings properties ; it ignores any other properties the options object could have.\r\n\t     *\r\n\t     * @param {*} userOptions\r\n\t     * @param {Boolean} shouldExtendDefaultOptions If TRUE, then this function will extends the `userOptions` passed by the user, with the default options.\r\n\t     * @throws Error\r\n\t     */\n\t    validate = function validate(userOptions) {\n\t        var shouldExtendDefaultOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\t\n\t        if (isUndefinedOrNullOrEmpty(userOptions) || !isObject(userOptions) || isEmptyObj(userOptions)) {\n\t            throwError('The userOptions are invalid ; it should be a valid object, [' + userOptions + '] given.');\n\t        }\n\t\n\t        // If the user used old options, we convert them to new ones\n\t        if (!isNull(userOptions)) {\n\t            convertOldOptionsToNewOnes(userOptions);\n\t        }\n\t\n\t        // The user can choose if the `userOptions` has already been extended with the default options, or not\n\t        var options = void 0;\n\t        if (shouldExtendDefaultOptions) {\n\t            options = $.extend({}, defaultSettings, userOptions);\n\t        } else {\n\t            options = userOptions;\n\t        }\n\t\n\t        // First things first, we test that the `showWarnings` option is valid\n\t        if (!isTrueOrFalseString(options.showWarnings) && !isBoolean(options.showWarnings)) {\n\t            throwError('The debug option \\'showWarnings\\' is invalid ; it should be either \\'false\\' or \\'true\\', [' + options.showWarnings + '] given.');\n\t        }\n\t\n\t        // Define the regular expressions needed for the following tests\n\t        var testPositiveInteger = /^[0-9]+$/;\n\t        var testNumericalCharacters = /[0-9]+/;\n\t        // const testFloatAndPossibleNegativeSign = /^-?[0-9]+(\\.?[0-9]+)$/;\n\t        var testFloatOrIntegerAndPossibleNegativeSign = /^-?[0-9]+(\\.?[0-9]+)?$/;\n\t        var testPositiveFloatOrInteger = /^[0-9]+(\\.?[0-9]+)?$/;\n\t\n\t        // Then tests the options individually\n\t        if (!isInArray(options.digitGroupSeparator, [',', // Comma\n\t        '.', // Dot\n\t        ' ', // Normal space\n\t        '\\u2009', // Thin-space\n\t        '\\u202F', // Narrow no-break space\n\t        '\\xA0', // No-break space\n\t        '', // No separator\n\t        \"'\", // Apostrophe\n\t        '٬', // Arabic thousands separator\n\t        '˙'])) {\n\t            throwError('The thousand separator character option \\'digitGroupSeparator\\' is invalid ; it should be \\',\\', \\'.\\', \\'\\u066C\\', \\'\\u02D9\\', \"\\'\", \\' \\', \\'\\u2009\\', \\'\\u202F\\', \\'\\xA0\\' or empty (\\'\\'), [' + options.digitGroupSeparator + '] given.');\n\t        }\n\t\n\t        if (!isTrueOrFalseString(options.noSeparatorOnFocus) && !isBoolean(options.noSeparatorOnFocus)) {\n\t            throwError('The \\'noSeparatorOnFocus\\' option is invalid ; it should be either \\'false\\' or \\'true\\', [' + options.noSeparatorOnFocus + '] given.');\n\t        }\n\t\n\t        if (!testPositiveInteger.test(options.digitalGroupSpacing)) {\n\t            throwError('The digital grouping for thousand separator option \\'digitalGroupSpacing\\' is invalid ; it should be a positive integer, [' + options.digitalGroupSpacing + '] given.');\n\t        }\n\t\n\t        if (!isInArray(options.decimalCharacter, [',', // Comma\n\t        '.', // Dot\n\t        '·', // Middle-dot\n\t        '٫', // Arabic decimal separator\n\t        '⎖'])) {\n\t            throwError('The decimal separator character option \\'decimalCharacter\\' is invalid ; it should be \\'.\\', \\',\\', \\'\\xB7\\', \\'\\u2396\\' or \\'\\u066B\\', [' + options.decimalCharacter + '] given.');\n\t        }\n\t\n\t        // Checks if the decimal and thousand characters are the same\n\t        if (options.decimalCharacter === options.digitGroupSeparator) {\n\t            throwError('autoNumeric will not function properly when the decimal character \\'decimalCharacter\\' [' + options.decimalCharacter + '] and the thousand separator \\'digitGroupSeparator\\' [' + options.digitGroupSeparator + '] are the same character.');\n\t        }\n\t\n\t        if (!isNull(options.decimalCharacterAlternative) && !isString(options.decimalCharacterAlternative)) {\n\t            throwError('The alternate decimal separator character option \\'decimalCharacterAlternative\\' is invalid ; it should be a string, [' + options.decimalCharacterAlternative + '] given.');\n\t        }\n\t\n\t        if (options.currencySymbol !== '' && !isString(options.currencySymbol)) {\n\t            throwError('The currency symbol option \\'currencySymbol\\' is invalid ; it should be a string, [' + options.currencySymbol + '] given.');\n\t        }\n\t\n\t        if (!isInArray(options.currencySymbolPlacement, ['p', 's'])) {\n\t            throwError('The placement of the currency sign option \\'currencySymbolPlacement\\' is invalid ; it should either be \\'p\\' (prefix) or \\'s\\' (suffix), [' + options.currencySymbolPlacement + '] given.');\n\t        }\n\t\n\t        if (!isInArray(options.negativePositiveSignPlacement, ['p', 's', 'l', 'r', null])) {\n\t            throwError('The placement of the negative sign option \\'negativePositiveSignPlacement\\' is invalid ; it should either be \\'p\\' (prefix), \\'s\\' (suffix), \\'l\\' (left), \\'r\\' (right) or \\'null\\', [' + options.negativePositiveSignPlacement + '] given.');\n\t        }\n\t\n\t        if (!isTrueOrFalseString(options.showPositiveSign) && !isBoolean(options.showPositiveSign)) {\n\t            throwError('The show positive sign option \\'showPositiveSign\\' is invalid ; it should be either \\'false\\' or \\'true\\', [' + options.showPositiveSign + '] given.');\n\t        }\n\t\n\t        if (!isString(options.suffixText) || options.suffixText !== '' && (isNegative(options.suffixText) || testNumericalCharacters.test(options.suffixText))) {\n\t            throwError('The additional suffix option \\'suffixText\\' is invalid ; it should not contains the negative sign \\'-\\' nor any numerical characters, [' + options.suffixText + '] given.');\n\t        }\n\t\n\t        if (!isNull(options.overrideMinMaxLimits) && !isInArray(options.overrideMinMaxLimits, ['ceiling', 'floor', 'ignore'])) {\n\t            throwError('The override min & max limits option \\'overrideMinMaxLimits\\' is invalid ; it should either be \\'ceiling\\', \\'floor\\' or \\'ignore\\', [' + options.overrideMinMaxLimits + '] given.');\n\t        }\n\t\n\t        if (!isString(options.maximumValue) || !testFloatOrIntegerAndPossibleNegativeSign.test(options.maximumValue)) {\n\t            throwError('The maximum possible value option \\'maximumValue\\' is invalid ; it should be a string that represents a positive or negative number, [' + options.maximumValue + '] given.');\n\t        }\n\t\n\t        if (!isString(options.minimumValue) || !testFloatOrIntegerAndPossibleNegativeSign.test(options.minimumValue)) {\n\t            throwError('The minimum possible value option \\'minimumValue\\' is invalid ; it should be a string that represents a positive or negative number, [' + options.minimumValue + '] given.');\n\t        }\n\t\n\t        if (parseFloat(options.minimumValue) > parseFloat(options.maximumValue)) {\n\t            throwError('The minimum possible value option is greater than the maximum possible value option ; \\'minimumValue\\' [' + options.minimumValue + '] should be smaller than \\'maximumValue\\' [' + options.maximumValue + '].');\n\t        }\n\t\n\t        if (!(isNull(options.decimalPlacesOverride) || isInt(options.decimalPlacesOverride) && options.decimalPlacesOverride >= 0 || // If integer option\n\t        isString(options.decimalPlacesOverride) && testPositiveInteger.test(options.decimalPlacesOverride)) // If string option\n\t        ) {\n\t                throwError('The maximum number of decimal places option \\'decimalPlacesOverride\\' is invalid ; it should be a positive integer, [' + options.decimalPlacesOverride + '] given.');\n\t            }\n\t\n\t        // Write a warning message in the console if the number of decimal in minimumValue/maximumValue is overridden by decimalPlacesOverride (and not if decimalPlacesOverride is equal to the number of decimal used in minimumValue/maximumValue)\n\t        var vMinAndVMaxMaximumDecimalPlaces = maximumVMinAndVMaxDecimalLength(options.minimumValue, options.maximumValue);\n\t        if (!isNull(options.decimalPlacesOverride) && vMinAndVMaxMaximumDecimalPlaces !== Number(options.decimalPlacesOverride)) {\n\t            warning('Setting \\'decimalPlacesOverride\\' to [' + options.decimalPlacesOverride + '] will override the decimals declared in \\'minimumValue\\' [' + options.minimumValue + '] and \\'maximumValue\\' [' + options.maximumValue + '].', options.showWarnings);\n\t        }\n\t\n\t        if (!options.allowDecimalPadding && !isNull(options.decimalPlacesOverride)) {\n\t            warning('Setting \\'allowDecimalPadding\\' to [false] will override the current \\'decimalPlacesOverride\\' setting [' + options.decimalPlacesOverride + '].', options.showWarnings);\n\t        }\n\t\n\t        if (!isNull(options.decimalPlacesShownOnFocus) && (!isString(options.decimalPlacesShownOnFocus) || !testPositiveInteger.test(options.decimalPlacesShownOnFocus))) {\n\t            throwError('The number of expanded decimal places option \\'decimalPlacesShownOnFocus\\' is invalid ; it should be a positive integer, [' + options.decimalPlacesShownOnFocus + '] given.');\n\t        }\n\t\n\t        // Checks if the extended decimal places \"decimalPlacesShownOnFocus\" is greater than the normal decimal places \"decimalPlacesOverride\"\n\t        if (!isNull(options.decimalPlacesShownOnFocus) && !isNull(options.decimalPlacesOverride) && Number(options.decimalPlacesOverride) > Number(options.decimalPlacesShownOnFocus)) {\n\t            warning('The extended decimal places \\'decimalPlacesShownOnFocus\\' [' + options.decimalPlacesShownOnFocus + '] should be greater than the \\'decimalPlacesOverride\\' [' + options.decimalPlacesOverride + '] value. Currently, this will limit the ability of your client to manually change some of the decimal places. Do you really want to do that?', options.showWarnings);\n\t        }\n\t\n\t        if (!isNull(options.scaleDivisor) && !testPositiveFloatOrInteger.test(options.scaleDivisor)) {\n\t            throwError('The scale divisor option \\'scaleDivisor\\' is invalid ; it should be a positive number, preferably an integer, [' + options.scaleDivisor + '] given.');\n\t        }\n\t\n\t        if (!isNull(options.scaleDecimalPlaces) && !testPositiveInteger.test(options.scaleDecimalPlaces)) {\n\t            throwError('The scale number of decimals option \\'scaleDecimalPlaces\\' is invalid ; it should be a positive integer, [' + options.scaleDecimalPlaces + '] given.');\n\t        }\n\t\n\t        if (!isNull(options.scaleSymbol) && !isString(options.scaleSymbol)) {\n\t            throwError('The scale symbol option \\'scaleSymbol\\' is invalid ; it should be a string, [' + options.scaleSymbol + '] given.');\n\t        }\n\t\n\t        if (!isTrueOrFalseString(options.saveValueToSessionStorage) && !isBoolean(options.saveValueToSessionStorage)) {\n\t            throwError('The save to session storage option \\'saveValueToSessionStorage\\' is invalid ; it should be either \\'false\\' or \\'true\\', [' + options.saveValueToSessionStorage + '] given.');\n\t        }\n\t\n\t        if (!isInArray(options.onInvalidPaste, ['error', 'ignore', 'clamp', 'truncate', 'replace'])) {\n\t            throwError('The paste behavior option \\'onInvalidPaste\\' is invalid ; it should either be \\'error\\', \\'ignore\\', \\'clamp\\', \\'truncate\\' or \\'replace\\' (cf. documentation), [' + options.onInvalidPaste + '] given.');\n\t        }\n\t\n\t        if (!isInArray(options.roundingMethod, ['S', 'A', 's', 'a', 'B', 'U', 'D', 'C', 'F', 'N05', 'CHF', 'U05', 'D05'])) {\n\t            throwError('The rounding method option \\'roundingMethod\\' is invalid ; it should either be \\'S\\', \\'A\\', \\'s\\', \\'a\\', \\'B\\', \\'U\\', \\'D\\', \\'C\\', \\'F\\', \\'N05\\', \\'CHF\\', \\'U05\\' or \\'D05\\' (cf. documentation), [' + options.roundingMethod + '] given.');\n\t        }\n\t\n\t        if (!isTrueOrFalseString(options.allowDecimalPadding) && !isBoolean(options.allowDecimalPadding)) {\n\t            throwError('The control decimal padding option \\'allowDecimalPadding\\' is invalid ; it should be either \\'false\\' or \\'true\\', [' + options.allowDecimalPadding + '] given.');\n\t        }\n\t\n\t        if (!isNull(options.negativeBracketsTypeOnBlur) && !isInArray(options.negativeBracketsTypeOnBlur, ['(,)', '[,]', '<,>', '{,}'])) {\n\t            throwError('The brackets for negative values option \\'negativeBracketsTypeOnBlur\\' is invalid ; it should either be \\'(,)\\', \\'[,]\\', \\'<,>\\' or \\'{,}\\', [' + options.negativeBracketsTypeOnBlur + '] given.');\n\t        }\n\t\n\t        if (!isInArray(options.emptyInputBehavior, ['focus', 'press', 'always', 'zero'])) {\n\t            throwError('The display on empty string option \\'emptyInputBehavior\\' is invalid ; it should either be \\'focus\\', \\'press\\', \\'always\\' or \\'zero\\', [' + options.emptyInputBehavior + '] given.');\n\t        }\n\t\n\t        if (!isInArray(options.leadingZero, ['allow', 'deny', 'keep'])) {\n\t            throwError('The leading zero behavior option \\'leadingZero\\' is invalid ; it should either be \\'allow\\', \\'deny\\' or \\'keep\\', [' + options.leadingZero + '] given.');\n\t        }\n\t\n\t        if (!isTrueOrFalseString(options.formatOnPageLoad) && !isBoolean(options.formatOnPageLoad)) {\n\t            throwError('The format on initialization option \\'formatOnPageLoad\\' is invalid ; it should be either \\'false\\' or \\'true\\', [' + options.formatOnPageLoad + '] given.');\n\t        }\n\t\n\t        if (!isTrueOrFalseString(options.selectNumberOnly) && !isBoolean(options.selectNumberOnly)) {\n\t            throwError('The select number only option \\'selectNumberOnly\\' is invalid ; it should be either \\'false\\' or \\'true\\', [' + options.selectNumberOnly + '] given.');\n\t        }\n\t\n\t        if (!isNull(options.defaultValueOverride) && options.defaultValueOverride !== '' && !testFloatOrIntegerAndPossibleNegativeSign.test(options.defaultValueOverride)) {\n\t            throwError('The unformatted default value option \\'defaultValueOverride\\' is invalid ; it should be a string that represents a positive or negative number, [' + options.defaultValueOverride + '] given.');\n\t        }\n\t\n\t        if (!isTrueOrFalseString(options.unformatOnSubmit) && !isBoolean(options.unformatOnSubmit)) {\n\t            throwError('The remove formatting on submit option \\'unformatOnSubmit\\' is invalid ; it should be either \\'false\\' or \\'true\\', [' + options.unformatOnSubmit + '] given.');\n\t        }\n\t\n\t        if (!isNull(options.outputFormat) && !isInArray(options.outputFormat, ['string', 'number', '.', '-.', ',', '-,', '.-', ',-'])) {\n\t            throwError('The custom locale format option \\'outputFormat\\' is invalid ; it should either be null, \\'string\\', \\'number\\', \\'.\\', \\'-.\\', \\',\\', \\'-,\\', \\'.-\\' or \\',-\\', [' + options.outputFormat + '] given.');\n\t        }\n\t\n\t        if (!isTrueOrFalseString(options.failOnUnknownOption) && !isBoolean(options.failOnUnknownOption)) {\n\t            throwError('The debug option \\'failOnUnknownOption\\' is invalid ; it should be either \\'false\\' or \\'true\\', [' + options.failOnUnknownOption + '] given.');\n\t        }\n\t    };\n\t\n\t    $.fn.autoValidate = validate;\n\t\n\t    /**\r\n\t     * Return TRUE is the settings/options are valid, FALSE otherwise.\r\n\t     *\r\n\t     * @param {object} options\r\n\t     * @returns {boolean}\r\n\t     */\n\t    areSettingsValid = function areSettingsValid(options) {\n\t        var isValid = true;\n\t        try {\n\t            validate(options);\n\t        } catch (error) {\n\t            isValid = false;\n\t        }\n\t\n\t        return isValid;\n\t    };\n\t\n\t    /**\r\n\t     * Take an arabic number as a string and return a javascript number.\r\n\t     * By default, this function does not try to convert the arabic decimal and thousand separator characters.\r\n\t     * This returns `NaN` is the conversion is not possible.\r\n\t     * Based on http://stackoverflow.com/a/17025392/2834898\r\n\t     *\r\n\t     * @param {string} arabicNumbers\r\n\t     * @param {boolean} returnANumber If `true`, return a Number, otherwise return a String\r\n\t     * @param {boolean} parseDecimalCharacter\r\n\t     * @param {boolean} parseThousandSeparator\r\n\t     * @returns {string|number|NaN}\r\n\t     */\n\t    function arabicToLatinNumbers(arabicNumbers) {\n\t        var returnANumber = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\t        var parseDecimalCharacter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\t        var parseThousandSeparator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\t\n\t        var result = arabicNumbers.toString();\n\t        if (result === '' || result.match(/[٠١٢٣٤٥٦٧٨٩۴۵۶]/g) === null) {\n\t            // If no Arabic/Persian numbers are found, return the numeric string directly\n\t            return arabicNumbers;\n\t        }\n\t\n\t        if (parseDecimalCharacter) {\n\t            result = result.replace(/٫/, '.'); // Decimal character\n\t        }\n\t\n\t        if (parseThousandSeparator) {\n\t            result = result.replace(/٬/g, ''); // Thousand separator\n\t        }\n\t\n\t        // Replace the numbers only\n\t        result = result.replace(/[٠١٢٣٤٥٦٧٨٩]/g, function (d) {\n\t            return d.charCodeAt(0) - 1632;\n\t        }) // Arabic numbers\n\t        .replace(/[۰۱۲۳۴۵۶۷۸۹]/g, function (d) {\n\t            return d.charCodeAt(0) - 1776;\n\t        }); // Persian numbers\n\t\n\t        // `NaN` has precedence over the string `'NaN'`\n\t        var resultAsNumber = Number(result);\n\t        if (isNaN(resultAsNumber)) {\n\t            return resultAsNumber;\n\t        }\n\t\n\t        if (returnANumber) {\n\t            result = resultAsNumber;\n\t        }\n\t\n\t        return result;\n\t    }\n\t\n\t    /**\r\n\t     * Create a custom event and immediately sent it from the given element.\r\n\t     * By default, if no element is given, the event is thrown from `document`.\r\n\t     *\r\n\t     * @param {string} eventName\r\n\t     * @param {Element} element\r\n\t     * @param {object} detail\r\n\t     */\n\t    function triggerEvent(eventName) {\n\t        var element = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;\n\t        var detail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\t\n\t        var event = void 0;\n\t        if (window.CustomEvent) {\n\t            event = new CustomEvent(eventName, { detail: detail, bubbles: false, cancelable: false }); // This is not supported by default by IE ; We use the polyfill for IE9 and later.\n\t        } else {\n\t            event = document.createEvent('CustomEvent');\n\t            event.initCustomEvent(eventName, true, true, { detail: detail });\n\t        }\n\t\n\t        element.dispatchEvent(event);\n\t    }\n\t\n\t    /**\r\n\t     * Polyfill from https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent for obsolete browsers (IE)\r\n\t     */\n\t    (function () {\n\t        if (typeof window.CustomEvent === 'function') {\n\t            return false;\n\t        }\n\t\n\t        function CustomEvent(event, params) {\n\t            params = params || { bubbles: false, cancelable: false, detail: void 0 };\n\t            var evt = document.createEvent('CustomEvent');\n\t            evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n\t            return evt;\n\t        }\n\t\n\t        CustomEvent.prototype = window.Event.prototype;\n\t        window.CustomEvent = CustomEvent;\n\t    })();\n\t\n\t    jQuery.extend(true, defaultSettings, jQuery.fn.autoNumeric.lang.Turkish, { currencySymbol: '' });\n\t\n\t    // Hijack the original val fn in order to\n\t    // use $autoNumeric.val() and be able to get/set\n\t    // the unmasked value.\n\t    jQuery.fn.val = function (value) {\n\t        var me = this,\n\t            $me = $(me);\n\t\n\t        // If we're not dealing with an instance of autoNumeric,\n\t        // simply call the original jQuery.fn.val\n\t        if ($me.data('autoNumeric') === undefined) {\n\t            return jQueryOriginalVal.apply(me, arguments);\n\t        }\n\t\n\t        if (!arguments.length) {\n\t            // We're trying to read the numeric value\n\t            return $me.autoNumeric('get');\n\t        } else {\n\t            // We're trying to set a value\n\t            var originalVal = value;\n\t            var numericValue = void 0;\n\t\n\t            if (typeof value === 'string') {\n\t                value = value.replace(',', '.');\n\t                numericValue = parseFloat(value, 10);\n\t\n\t                if (isNaN(numericValue)) {\n\t                    throw '\"' + originalVal + '\" is not a number.';\n\t                }\n\t            } else if (typeof value !== 'number') {\n\t                throw 'The type \"' + (typeof value === 'undefined' ? 'undefined' : _typeof(value)) + '\" is not supported.';\n\t            } else {\n\t                numericValue = value;\n\t            }\n\t\n\t            return $me.autoNumeric('set', numericValue);\n\t        }\n\t    };\n\t});\n\t\n\t/**\r\n\t * This exports the interface for the autoNumeric object\r\n\t */\n\texports.default = {\n\t    format: autoFormat,\n\t    unFormat: autoUnFormat,\n\t    getDefaultConfig: getDefaultConfig,\n\t    getLanguages: getLanguages,\n\t    validate: validate, // an.validate(options) : throws if necessary\n\t    areSettingsValid: areSettingsValid };\n\t}.call(window));\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// autoNumeric.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 0baa34994e52e3ca2108","/**\r\n *               autoNumeric.js\r\n *\r\n * @version      2.0.12\r\n * @date         2017-04-07 UTC 07:00\r\n *\r\n * @author       Bob Knothe\r\n * @contributors Alexandre Bonneau, Sokolov Yura and other Github users,\r\n *               cf. AUTHORS.md.\r\n * @copyright    2009 Robert J. Knothe http://www.decorplanit.com/plugin/\r\n * @since        2009-08-09\r\n *\r\n * @summary      autoNumeric is a library that provides live as-you-type\r\n *               formatting for international numbers and currencies.\r\n *\r\n *               Note : Some functions are borrowed from big.js\r\n * @link         https://github.com/MikeMcl/big.js/\r\n *\r\n * Please report any bugs to https://github.com/autoNumeric/autoNumeric\r\n *\r\n * @license      Released under the MIT License\r\n * @link         http://www.opensource.org/licenses/mit-license.php\r\n *\r\n * Permission is hereby granted, free of charge, to any person\r\n * obtaining a copy of this software and associated documentation\r\n * files (the \"Software\"), to deal in the Software without\r\n * restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sub license, and/or sell\r\n * copies of the Software, and to permit persons to whom the\r\n * Software is furnished to do so, subject to the following\r\n * conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\r\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\r\n * OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\n\r\n/* global module, require, define */\r\n\r\nconst jQueryOriginalVal = jQuery.fn.val;\r\n\r\n// Functions names for ES6 exports\r\nlet autoFormat;\r\nlet autoUnFormat;\r\nlet getDefaultConfig;\r\nlet getLanguages;\r\nlet validate;\r\nlet areSettingsValid;\r\n\r\n// AutoNumeric default settings\r\n/**\r\n * List of allowed tag on which autoNumeric can be used.\r\n */\r\nconst allowedTagList = [\r\n    'b',\r\n    'caption',\r\n    'cite',\r\n    'code',\r\n    'const',\r\n    'dd',\r\n    'del',\r\n    'div',\r\n    'dfn',\r\n    'dt',\r\n    'em',\r\n    'h1',\r\n    'h2',\r\n    'h3',\r\n    'h4',\r\n    'h5',\r\n    'h6',\r\n    'ins',\r\n    'kdb',\r\n    'label',\r\n    'li',\r\n    'option',\r\n    'output',\r\n    'p',\r\n    'q',\r\n    's',\r\n    'sample',\r\n    'span',\r\n    'strong',\r\n    'td',\r\n    'th',\r\n    'u',\r\n];\r\n\r\n/**\r\n * Defaults options are public - these can be overridden by the following method:\r\n * - HTML5 data attributes (ie. `<input type=\"text\" data-currency-symbol=\" €\">`)\r\n * - Options passed by the 'init' or 'update' methods (ie. `aNInput.autoNumeric('update', { currencySymbol: ' €' });`)\r\n * - Use jQuery's `$.extend` method for global changes - also a great way to pass ASP.NET current culture settings\r\n */\r\nconst defaultSettings = {\r\n    /* Allowed thousand grouping separator characters :\r\n     * ','      // Comma\r\n     * '.'      // Dot\r\n     * ' '      // Normal space\r\n     * '\\u2009' // Thin-space\r\n     * '\\u202f' // Narrow no-break space\r\n     * '\\u00a0' // No-break space\r\n     * ''       // No separator\r\n     * \"'\"      // Apostrophe\r\n     * '٬'      // Arabic thousands separator\r\n     * '˙'      // Dot above\r\n     * Deprecated older option name : aSep\r\n     */\r\n    digitGroupSeparator: ',',\r\n\r\n    /* Remove the thousand separator on focus, currency symbol and suffix on focus\r\n     * example if the input value \"$ 1,999.88 suffix\"\r\n     * on \"focusin\" it becomes \"1999.88\" and back to \"$ 1,999.88 suffix\" on focus out.\r\n     * Deprecated older option name : nSep\r\n     */\r\n    noSeparatorOnFocus: false,\r\n\r\n    /* Digital grouping for the thousand separator used in Format\r\n     * digitalGroupSpacing: \"2\", results in 99,99,99,999 India's lakhs\r\n     * digitalGroupSpacing: \"2s\", results in 99,999,99,99,999 India's lakhs scaled\r\n     * digitalGroupSpacing: \"3\", results in 999,999,999 default\r\n     * digitalGroupSpacing: \"4\", results in 9999,9999,9999 used in some Asian countries\r\n     * Deprecated older option name : dGroup\r\n     */\r\n    digitalGroupSpacing: '3',\r\n\r\n    /* Allowed decimal separator characters :\r\n     * ',' : Comma\r\n     * '.' : Dot\r\n     * '·' : Middle-dot\r\n     * '٫' : Arabic decimal separator\r\n     * '⎖' : Decimal separator key symbol\r\n     * Deprecated older option name : aDec\r\n     */\r\n    decimalCharacter: '.',\r\n\r\n    /* Allow to declare an alternative decimal separator which is automatically replaced by `decimalCharacter` when typed.\r\n     * This is used by countries that use a comma \",\" as the decimal character and have keyboards\\numeric pads that have\r\n     * a period 'full stop' as the decimal characters (France or Spain for instance).\r\n     * Deprecated older option name : altDec\r\n     */\r\n    decimalCharacterAlternative: null,\r\n\r\n    /* currencySymbol = allowed currency symbol\r\n     * Must be in quotes currencySymbol: \"$\"\r\n     * space to the right of the currency symbol currencySymbol: '$ '\r\n     * space to the left of the currency symbol currencySymbol: ' $'\r\n     * Deprecated older option name : aSign\r\n     */\r\n    currencySymbol: '',\r\n\r\n    /* currencySymbolPlacement = placement of currency sign as a p=prefix or s=suffix\r\n     * for prefix currencySymbolPlacement: \"p\" (default)\r\n     * for suffix currencySymbolPlacement: \"s\"\r\n     * Deprecated older option name : pSign\r\n     */\r\n    //TODO Rename the options to more explicit names ('p' => 'prefix', etc.)\r\n    currencySymbolPlacement: 'p',\r\n\r\n    /* Placement of negative/positive sign relative to the currencySymbol option l=left, r=right, p=prefix & s=suffix\r\n     * -1,234.56  => default no options required\r\n     * -$1,234.56 => {currencySymbol: \"$\"} or {currencySymbol: \"$\", negativePositiveSignPlacement: \"l\"}\r\n     * $-1,234.56 => {currencySymbol: \"$\", negativePositiveSignPlacement: \"r\"} // Default if negativePositiveSignPlacement is 'null' and currencySymbol is not empty\r\n     * -1,234.56$ => {currencySymbol: \"$\", currencySymbolPlacement: \"s\", negativePositiveSignPlacement: \"p\"} // Default if negativePositiveSignPlacement is 'null' and currencySymbol is not empty\r\n     * 1,234.56-  => {negativePositiveSignPlacement: \"s\"}\r\n     * $1,234.56- => {currencySymbol: \"$\", negativePositiveSignPlacement: \"s\"}\r\n     * 1,234.56-$ => {currencySymbol: \"$\", currencySymbolPlacement: \"s\"}\r\n     * 1,234.56$- => {currencySymbol: \"$\", currencySymbolPlacement: \"s\", negativePositiveSignPlacement: \"r\"}\r\n     * Deprecated older option name : pNeg\r\n     */\r\n    //TODO Rename the options to more explicit names ('p' => 'prefix', etc.)\r\n    negativePositiveSignPlacement: null,\r\n\r\n\r\n    /* Allow the positive sign symbol `+` to be displayed for positive numbers.\r\n     * By default, this positive sign is not shown.\r\n     * The sign placement is controlled by the 'negativePositiveSignPlacement' option, mimicking the negative sign placement rules.\r\n     */\r\n    showPositiveSign: false,\r\n\r\n    /* Additional suffix\r\n     * Must be in quotes suffixText: 'gross', a space is allowed suffixText: ' dollars'\r\n     * Numeric characters and negative sign not allowed'\r\n     * Deprecated older option name : aSuffix\r\n     */\r\n    suffixText: '',\r\n\r\n    /* Override min max limits\r\n     * overrideMinMaxLimits: \"ceiling\" adheres to maximumValue and ignores minimumValue settings\r\n     * overrideMinMaxLimits: \"floor\" adheres to minimumValue and ignores maximumValue settings\r\n     * overrideMinMaxLimits: \"ignore\" ignores both minimumValue & maximumValue\r\n     * Deprecated older option name : oLimits\r\n     */\r\n    overrideMinMaxLimits: null,\r\n\r\n    /* Maximum possible value\r\n     * value must be enclosed in quotes and use the period for the decimal point\r\n     * value must be larger than minimumValue\r\n     * Deprecated older option name : vMax\r\n     */\r\n    maximumValue: '9999999999999.99', // 9.999.999.999.999,99 ~= 10000 billions\r\n\r\n    /* Minimum possible value\r\n     * value must be enclosed in quotes and use the period for the decimal point\r\n     * value must be smaller than maximumValue\r\n     * Deprecated older option name : vMin\r\n     */\r\n    minimumValue: '-9999999999999.99', // -9.999.999.999.999,99 ~= 10000 billions\r\n\r\n    /* Maximum number of decimal places = used to override decimal places set by the minimumValue & maximumValue values\r\n     * Deprecated older option name : mDec\r\n     */\r\n    decimalPlacesOverride: null,\r\n\r\n    /* Expanded decimal places visible when input has focus - example:\r\n     * {decimalPlacesShownOnFocus: \"5\"} and the default 2 decimal places with focus \"1,000.12345\" without focus \"1,000.12\" the results depends on the rounding method used\r\n     * the \"get\" method returns the extended decimal places\r\n     * Deprecated older option name : eDec\r\n     */\r\n    decimalPlacesShownOnFocus: null,\r\n\r\n    /* The next three options (scaleDivisor, scaleDecimalPlaces & scaleSymbol) handle scaling of the input when the input does not have focus\r\n     * Please note that the non-scaled value is held in data and it is advised that you use the \"saveValueToSessionStorage\" option to ensure retaining the value\r\n     * [\"divisor\", \"decimal places\", \"symbol\"]\r\n     * Example: with the following options set {scaleDivisor: '1000', scaleDecimalPlaces: '1', scaleSymbol: ' K'}\r\n     * Example: focusin value \"1,111.11\" focusout value \"1.1 K\"\r\n     */\r\n\r\n    /* The `scaleDivisor` decides the on focus value and places the result in the input on focusout\r\n     * Example {scaleDivisor: '1000'} or <input data-scale-divisor=\"1000\">\r\n     * The divisor value - does not need to be whole number but please understand that Javascript has limited accuracy in math\r\n     * The \"get\" method returns the full value, including the 'hidden' decimals.\r\n     */\r\n    scaleDivisor: null,\r\n\r\n    /*\r\n     * The `scaleDecimalPlaces` option is the number of decimal place when not in focus - for this to work, `scaledDivisor` must not be `null`.\r\n     * This is optional ; if omitted the decimal places will be the same when the input has the focus.\r\n     * Deprecated older option name : scaleDecimal\r\n     */\r\n    scaleDecimalPlaces: null,\r\n\r\n    /*\r\n     * The `scaleSymbol` option is a symbol placed as a suffix when not in focus.\r\n     * This is optional too.\r\n     */\r\n    scaleSymbol: null,\r\n\r\n    /* Set to true to allow the decimalPlacesShownOnFocus value to be saved with sessionStorage\r\n     * if ie 6 or 7 the value will be saved as a session cookie\r\n     * Deprecated older option name : aStor\r\n     */\r\n    saveValueToSessionStorage: false,\r\n\r\n    /*\r\n     * Manage how autoNumeric react when the user tries to paste an invalid number.\r\n     * - 'error'    : (This is the default behavior) The input value is not changed and an error is output in the console.\r\n     * - 'ignore'   : idem than 'error', but fail silently without outputting any error/warning in the console.\r\n     * - 'clamp'    : if the pasted value is either too small or too big regarding the minimumValue and maximumValue range, then the result is clamped to those limits.\r\n     * - 'truncate' : autoNumeric will insert as many pasted numbers it can at the initial caret/selection, until everything is pasted, or the range limit is hit.\r\n     *                The non-pasted numbers are dropped and therefore not used at all.\r\n     * - 'replace'  : autoNumeric will first insert as many pasted numbers it can at the initial caret/selection, then if the range limit is hit, it will try\r\n     *                to replace one by one the remaining initial numbers (on the right side of the caret) with the rest of the pasted numbers.\r\n     *\r\n     * Note 1 : A paste content starting with a negative sign '-' will be accepted anywhere in the input, and will set the resulting value as a negative number\r\n     * Note 2 : A paste content starting with a number will be accepted, even if the rest is gibberish (ie. '123foobar456').\r\n     *          Only the first number will be used (here '123').\r\n     * Note 3 : The paste event works with the `decimalPlacesShownOnFocus` option too.\r\n     */\r\n    //TODO Shouldn't we use `truncate` as the default value?\r\n    onInvalidPaste: 'error',\r\n\r\n    /* method used for rounding\r\n     * roundingMethod: \"S\", Round-Half-Up Symmetric (default)\r\n     * roundingMethod: \"A\", Round-Half-Up Asymmetric\r\n     * roundingMethod: \"s\", Round-Half-Down Symmetric (lower case s)\r\n     * roundingMethod: \"a\", Round-Half-Down Asymmetric (lower case a)\r\n     * roundingMethod: \"B\", Round-Half-Even \"Bankers Rounding\"\r\n     * roundingMethod: \"U\", Round Up \"Round-Away-From-Zero\"\r\n     * roundingMethod: \"D\", Round Down \"Round-Toward-Zero\" - same as truncate\r\n     * roundingMethod: \"C\", Round to Ceiling \"Toward Positive Infinity\"\r\n     * roundingMethod: \"F\", Round to Floor \"Toward Negative Infinity\"\r\n     * roundingMethod: \"N05\" Rounds to the nearest .05 => same as \"CHF\" used in 1.9X and still valid\r\n     * roundingMethod: \"U05\" Rounds up to next .05\r\n     * roundingMethod: \"D05\" Rounds down to next .05\r\n     * Deprecated older option name : mRound\r\n     */\r\n    //TODO Rename the options to more explicit names ('S' => 'RoundHalfUpSymmetric', etc.)\r\n    //TODO Add an `an.roundingMethod` object that enum those options clearly\r\n    roundingMethod: 'S',\r\n\r\n    /* Allow padding the decimal places with zeros\r\n     * allowDecimalPadding: true - always Pad decimals with zeros\r\n     * allowDecimalPadding: false - does not pad with zeros.\r\n     * Note: setting allowDecimalPadding to 'false' will override the 'decimalPlacesOverride' setting.\r\n     *\r\n     * thanks to Jonas Johansson for the suggestion\r\n     * Deprecated older option name : aPad\r\n     */\r\n    allowDecimalPadding: true,\r\n\r\n    /* Adds brackets on negative values (ie. transforms '-$ 999.99' to '(999.99)')\r\n     * Those brackets are visible only when the field does NOT have the focus.\r\n     * The left and right symbols should be enclosed in quotes and separated by a comma\r\n     * This option can be of the following values :\r\n     * null, // This is the default value, which deactivate this feature\r\n     * '(,)',\r\n     * '[,]',\r\n     * '<,>' or\r\n     * '{,}'\r\n     * Deprecated older option name : nBracket\r\n     */\r\n    //TODO Rename the options to more explicit names ('(,)' => 'parentheses', etc.)\r\n    negativeBracketsTypeOnBlur: null,\r\n\r\n    /* Displayed on empty string \"\"\r\n     * emptyInputBehavior: \"focus\" - (default) currency sign displayed and the input receives focus\r\n     * emptyInputBehavior: \"press\" - currency sign displays on any key being pressed\r\n     * emptyInputBehavior: \"always\" - always displays the currency sign only\r\n     * emptyInputBehavior: \"zero\" - if the input has no value on focus out displays a zero \"rounded\" with or without a currency sign\r\n     * Deprecated older option name : wEmpty\r\n     */\r\n    emptyInputBehavior: 'focus',\r\n\r\n    /* Controls leading zero behavior\r\n     * leadingZero: \"allow\", - allows leading zeros to be entered. Zeros will be truncated when entering additional digits. On focusout zeros will be deleted.\r\n     * leadingZero: \"deny\", - allows only one leading zero on values less than one\r\n     * leadingZero: \"keep\", - allows leading zeros to be entered. on focusout zeros will be retained.\r\n     * Deprecated older option name : lZero\r\n     */\r\n    leadingZero: 'deny',\r\n\r\n    /* Determine if the default value will be formatted on initialization.\r\n     * true = automatically formats the default value on initialization\r\n     * false = will not format the default value on initialization\r\n     * Deprecated older option name : aForm\r\n     */\r\n    formatOnPageLoad: true,\r\n\r\n    /* Determine if the select all keyboard command will select the complete input text, or only the input numeric value\r\n     * Note : If the currency symbol is between the numeric value and the negative sign, only the numeric value will selected\r\n     * Deprecated older option name : sNumber\r\n     */\r\n    selectNumberOnly: false,\r\n\r\n    /* Helper option for ASP.NET postback\r\n     * should be the value of the unformatted default value\r\n     * examples:\r\n     * no default value=\"\" {defaultValueOverride: \"\"}\r\n     * value=1234.56 {defaultValueOverride: '1234.56'}\r\n     * Deprecated older option name : anDefault\r\n     */\r\n    defaultValueOverride: null,\r\n\r\n    /* Removes formatting on submit event\r\n     * this output format: positive nnnn.nn, negative -nnnn.nn\r\n     * review the 'unSet' method for other formats\r\n     * Deprecated older option name : unSetOnSubmit\r\n     */\r\n    unformatOnSubmit: false,\r\n\r\n    /* Allows the output to be in the locale format via the \"get\", \"getString\" & \"getArray\" methods\r\n     * null or 'string' => 'nnnn.nn' or '-nnnn.nn' as text type. This is the default behavior.\r\n     * 'number'         => nnnn.nn or -nnnn.nn as a Number (Warning: this works only for integers inferior to Number.MAX_SAFE_INTEGER)\r\n     * ',' or '-,'      => 'nnnn,nn' or '-nnnn,nn'\r\n     * '.-'             => 'nnnn.nn' or 'nnnn.nn-'\r\n     * ',-'             => 'nnnn,nn' or 'nnnn,nn-'\r\n     * Deprecated older option name : outputType\r\n     */\r\n    outputFormat: null,\r\n\r\n    /* Defines if warnings should be shown\r\n     * Error handling function\r\n     * true => all warning are shown\r\n     * false => no warnings are shown, only the thrown errors\r\n     * Deprecated older option name : debug\r\n     */\r\n    showWarnings: true,\r\n\r\n    /*\r\n     * This option is the 'strict mode' (aka 'debug' mode), which allows autoNumeric to strictly analyse the options passed, and fails if an unknown options is used in the settings object.\r\n     * You should set that to 'TRUE' if you want to make sure you are only using 'pure' autoNumeric settings objects in your code.\r\n     * If you see uncaught errors in the console and your code starts to fail, this means somehow those options gets corrupted by another program.\r\n     */\r\n    failOnUnknownOption: false,\r\n};\r\n\r\n/**\r\n * Wrapper variable that hold named keyboard keys with their respective keyCode as seen in DOM events.\r\n * //TODO Replace every call to this object with a call to `keyName`\r\n * @deprecated\r\n */\r\nconst keyCode = {\r\n    Backspace:      8,\r\n    Tab:            9,\r\n    Enter:          13,\r\n    Shift:          16,\r\n    Ctrl:           17,\r\n    Alt:            18,\r\n    PauseBreak:     19,\r\n    CapsLock:       20,\r\n    Esc:            27,\r\n    Space:          32,\r\n    PageUp:         33,\r\n    PageDown:       34,\r\n    End:            35,\r\n    Home:           36,\r\n    LeftArrow:      37,\r\n    UpArrow:        38,\r\n    RightArrow:     39,\r\n    DownArrow:      40,\r\n    Insert:         45,\r\n    Delete:         46,\r\n    num0:           48,\r\n    num1:           49,\r\n    num2:           50,\r\n    num3:           51,\r\n    num4:           52,\r\n    num5:           53,\r\n    num6:           54,\r\n    num7:           55,\r\n    num8:           56,\r\n    num9:           57,\r\n    a:              65,\r\n    b:              66,\r\n    c:              67,\r\n    d:              68,\r\n    e:              69,\r\n    f:              70,\r\n    g:              71,\r\n    h:              72,\r\n    i:              73,\r\n    j:              74,\r\n    k:              75,\r\n    l:              76,\r\n    m:              77,\r\n    n:              78,\r\n    o:              79,\r\n    p:              80,\r\n    q:              81,\r\n    r:              82,\r\n    s:              83,\r\n    t:              84,\r\n    u:              85,\r\n    v:              86,\r\n    w:              87,\r\n    x:              88,\r\n    y:              89,\r\n    z:              90,\r\n    Windows:        91,\r\n    RightClick:     93,\r\n    numpad0:        96,\r\n    numpad1:        97,\r\n    numpad2:        98,\r\n    numpad3:        99,\r\n    numpad4:        100,\r\n    numpad5:        101,\r\n    numpad6:        102,\r\n    numpad7:        103,\r\n    numpad8:        104,\r\n    numpad9:        105,\r\n    MultiplyNumpad: 106,\r\n    PlusNumpad:     107,\r\n    MinusNumpad:    109,\r\n    DotNumpad:      110,\r\n    SlashNumpad:    111,\r\n    F1:             112,\r\n    F2:             113,\r\n    F3:             114,\r\n    F4:             115,\r\n    F5:             116,\r\n    F6:             117,\r\n    F7:             118,\r\n    F8:             119,\r\n    F9:             120,\r\n    F10:            121,\r\n    F11:            122,\r\n    F12:            123,\r\n    NumLock:        144,\r\n    ScrollLock:     145,\r\n    MyComputer:     182,\r\n    MyCalculator:   183,\r\n    Semicolon:      186,\r\n    Equal:          187,\r\n    Comma:          188,\r\n    Hyphen:         189,\r\n    Dot:            190,\r\n    Slash:          191,\r\n    Backquote:      192,\r\n    LeftBracket:    219,\r\n    Backslash:      220,\r\n    RightBracket:   221,\r\n    Quote:          222,\r\n    Command:        224,\r\n    AndroidDefault: 229, // Android Chrome returns the same keycode number 229 for all keys pressed\r\n};\r\n\r\n/**\r\n * Wrapper variable that hold named keyboard keys with their respective key name (as set in KeyboardEvent.key).\r\n * Those names are listed here :\r\n * @link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\r\n */\r\nconst keyName = {\r\n    // Special values\r\n    Unidentified:   'Unidentified',\r\n\r\n    // Modifier keys\r\n    Alt:            'Alt',\r\n    AltGr:          'AltGraph',\r\n    CapsLock:       'CapsLock', // Under Chrome, e.key is empty for CapsLock\r\n    Ctrl:           'Control',\r\n    Fn:             'Fn',\r\n    FnLock:         'FnLock',\r\n    Hyper:          'Hyper', // 'OS' under Firefox\r\n    Meta:           'Meta', // The Windows, Command or ⌘ key // 'OS' under Firefox and IE9\r\n    Windows:        'Meta', // This is a non-official key name\r\n    Command:        'Meta', // This is a non-official key name\r\n    NumLock:        'NumLock',\r\n    ScrollLock:     'ScrollLock',\r\n    Shift:          'Shift',\r\n    Super:          'Super', // 'OS' under Firefox\r\n    Symbol:         'Symbol',\r\n    SymbolLock:     'SymbolLock',\r\n\r\n    // Whitespace keys\r\n    Enter:          'Enter',\r\n    Tab:            'Tab',\r\n    Space:          ' ', // 'Spacebar' for Firefox <37, and IE9\r\n\r\n    // Navigation keys\r\n    DownArrow:      'ArrowDown', // 'Down' for Firefox <=36, and IE9\r\n    LeftArrow:      'ArrowLeft', // 'Left' for Firefox <=36, and IE9\r\n    RightArrow:     'ArrowRight', // 'Right' for Firefox <=36, and IE9\r\n    UpArrow:        'ArrowUp', // 'Up' for Firefox <=36, and IE9\r\n    End:            'End',\r\n    Home:           'Home',\r\n    PageDown:       'PageDown',\r\n    PageUp:         'PageUp',\r\n\r\n    // Editing keys\r\n    Backspace:      'Backspace',\r\n    Clear:          'Clear',\r\n    Copy:           'Copy',\r\n    CrSel:          'CrSel', // 'Crsel' for Firefox <=36, and IE9\r\n    Cut:            'Cut',\r\n    Delete:         'Delete', // 'Del' for Firefox <=36, and IE9\r\n    EraseEof:       'EraseEof',\r\n    ExSel:          'ExSel', // 'Exsel' for Firefox <=36, and IE9\r\n    Insert:         'Insert',\r\n    Paste:          'Paste',\r\n    Redo:           'Redo',\r\n    Undo:           'Undo',\r\n\r\n    // UI keys\r\n    Accept:         'Accept',\r\n    Again:          'Again',\r\n    Attn:           'Attn', // 'Unidentified' for Firefox, Chrome, and IE9 ('KanaMode' when using the Japanese keyboard layout)\r\n    Cancel:         'Cancel',\r\n    ContextMenu:    'ContextMenu', // 'Apps' for Firefox <=36, and IE9\r\n    Esc:            'Escape', // 'Esc' for Firefox <=36, and IE9\r\n    Execute:        'Execute',\r\n    Find:           'Find',\r\n    Finish:         'Finish', // 'Unidentified' for Firefox, Chrome, and IE9 ('Katakana' when using the Japanese keyboard layout)\r\n    Help:           'Help',\r\n    Pause:          'Pause',\r\n    Play:           'Play',\r\n    Props:          'Props',\r\n    Select:         'Select',\r\n    ZoomIn:         'ZoomIn',\r\n    ZoomOut:        'ZoomOut',\r\n\r\n    // Device keys\r\n    BrightnessDown: 'BrightnessDown',\r\n    BrightnessUp:   'BrightnessUp',\r\n    Eject:          'Eject',\r\n    LogOff:         'LogOff',\r\n    Power:          'Power',\r\n    PowerOff:       'PowerOff',\r\n    PrintScreen:    'PrintScreen',\r\n    Hibernate:      'Hibernate', // 'Unidentified' for Firefox <=37\r\n    Standby:        'Standby', // 'Unidentified' for Firefox <=36, and IE9\r\n    WakeUp:         'WakeUp',\r\n\r\n    // IME and composition keys\r\n    Compose:        'Compose',\r\n    Dead:           'Dead',\r\n\r\n    // Function keys\r\n    F1:             'F1',\r\n    F2:             'F2',\r\n    F3:             'F3',\r\n    F4:             'F4',\r\n    F5:             'F5',\r\n    F6:             'F6',\r\n    F7:             'F7',\r\n    F8:             'F8',\r\n    F9:             'F9',\r\n    F10:            'F10',\r\n    F11:            'F11',\r\n    F12:            'F12',\r\n\r\n    // Document keys\r\n    Print:          'Print',\r\n\r\n    // 'Normal' keys\r\n    num0:           '0',\r\n    num1:           '1',\r\n    num2:           '2',\r\n    num3:           '3',\r\n    num4:           '4',\r\n    num5:           '5',\r\n    num6:           '6',\r\n    num7:           '7',\r\n    num8:           '8',\r\n    num9:           '9',\r\n    numpad0:        '0',\r\n    numpad1:        '1',\r\n    numpad2:        '2',\r\n    numpad3:        '3',\r\n    numpad4:        '4',\r\n    numpad5:        '5',\r\n    numpad6:        '6',\r\n    numpad7:        '7',\r\n    numpad8:        '8',\r\n    numpad9:        '9',\r\n    a:              'a',\r\n    b:              'b',\r\n    c:              'c',\r\n    d:              'd',\r\n    e:              'e',\r\n    f:              'f',\r\n    g:              'g',\r\n    h:              'h',\r\n    i:              'i',\r\n    j:              'j',\r\n    k:              'k',\r\n    l:              'l',\r\n    m:              'm',\r\n    n:              'n',\r\n    o:              'o',\r\n    p:              'p',\r\n    q:              'q',\r\n    r:              'r',\r\n    s:              's',\r\n    t:              't',\r\n    u:              'u',\r\n    v:              'v',\r\n    w:              'w',\r\n    x:              'x',\r\n    y:              'y',\r\n    z:              'z',\r\n    MultiplyNumpad: '*',\r\n    PlusNumpad:     '+',\r\n    MinusNumpad:    '-',\r\n    DotNumpad:      '.',\r\n    SlashNumpad:    '/',\r\n    Semicolon:      ';',\r\n    Equal:          '=',\r\n    Comma:          ',',\r\n    Hyphen:         '-',\r\n    Minus:          '-',\r\n    Plus:           '+',\r\n    Dot:            '.',\r\n    Slash:          '/',\r\n    Backquote:      '`',\r\n    LeftBracket:    '[',\r\n    RightBracket:   ']',\r\n    Backslash:      '\\\\',\r\n    Quote:          \"'\",\r\n    NumpadDot:      '.',\r\n    NumpadDotAlt:   ',', // Modern browsers automatically adapt the character sent by this key to the decimal character of the current language\r\n    NumpadMultiply: '*',\r\n    NumpadPlus:     '+',\r\n    NumpadMinus:    '-',\r\n    NumpadSlash:    '/',\r\n    NumpadDotObsoleteBrowsers:      'Decimal',\r\n    NumpadMultiplyObsoleteBrowsers: 'Multiply',\r\n    NumpadPlusObsoleteBrowsers:     'Add',\r\n    NumpadMinusObsoleteBrowsers:    'Subtract',\r\n    NumpadSlashObsoleteBrowsers:    'Divide',\r\n};\r\n\r\nconst defaultMinimumValue     = '-999999999999.99';\r\nconst defaultMaximumValue     = '999999999999.99';\r\nconst defaultRoundingMethod   = 'U';\r\nconst defaultLeadingZero      = 'deny';\r\nconst defaultSelectNumberOnly = true;\r\n\r\n/**\r\n * Predefined options for the most common languages\r\n */\r\nconst languageOption = {\r\n    French: { // Français\r\n        digitGroupSeparator        : '.', // or '\\u202f'\r\n        decimalCharacter           : ',',\r\n        decimalCharacterAlternative: '.',\r\n        currencySymbol             : '\\u202f€',\r\n        currencySymbolPlacement    : 's',\r\n        selectNumberOnly           : defaultSelectNumberOnly,\r\n        roundingMethod             : defaultRoundingMethod,\r\n        leadingZero                : defaultLeadingZero,\r\n        minimumValue               : defaultMinimumValue,\r\n        maximumValue               : defaultMaximumValue,\r\n    },\r\n    NorthAmerican: {\r\n        digitGroupSeparator    : ',',\r\n        decimalCharacter       : '.',\r\n        currencySymbol         : '$',\r\n        currencySymbolPlacement: 'p',\r\n        selectNumberOnly       : defaultSelectNumberOnly,\r\n        roundingMethod         : defaultRoundingMethod,\r\n        leadingZero            : defaultLeadingZero,\r\n        minimumValue           : defaultMinimumValue,\r\n        maximumValue           : defaultMaximumValue,\r\n    },\r\n    British: {\r\n        digitGroupSeparator    : ',',\r\n        decimalCharacter       : '.',\r\n        currencySymbol         : '£',\r\n        currencySymbolPlacement: 'p',\r\n        selectNumberOnly       : defaultSelectNumberOnly,\r\n        roundingMethod         : defaultRoundingMethod,\r\n        leadingZero            : defaultLeadingZero,\r\n        minimumValue           : defaultMinimumValue,\r\n        maximumValue           : defaultMaximumValue,\r\n    },\r\n    Swiss: { // Suisse\r\n        digitGroupSeparator    : `'`,\r\n        decimalCharacter       : '.',\r\n        currencySymbol         : '\\u202fCHF',\r\n        currencySymbolPlacement: 's',\r\n        selectNumberOnly       : defaultSelectNumberOnly,\r\n        roundingMethod         : defaultRoundingMethod,\r\n        leadingZero            : defaultLeadingZero,\r\n        minimumValue           : defaultMinimumValue,\r\n        maximumValue           : defaultMaximumValue,\r\n    },\r\n    Japanese: { // 日本語\r\n        digitGroupSeparator    : ',',\r\n        decimalCharacter       : '.',\r\n        currencySymbol         : '¥',\r\n        currencySymbolPlacement: 'p',\r\n        selectNumberOnly       : defaultSelectNumberOnly,\r\n        roundingMethod         : defaultRoundingMethod,\r\n        leadingZero            : defaultLeadingZero,\r\n        minimumValue           : defaultMinimumValue,\r\n        maximumValue           : defaultMaximumValue,\r\n    },\r\n    Turkish: {\r\n        digitGroupSeparator: '.',\r\n        decimalCharacter: ',',\r\n        decimalCharacterAlternative: '.',\r\n        currencySymbol: ' ₺',\r\n        currencySymbolPlacement: 's',\r\n        selectNumberOnly: defaultSelectNumberOnly,\r\n        roundingMethod: defaultRoundingMethod,\r\n        leadingZero: defaultLeadingZero,\r\n        minimumValue: defaultMinimumValue,\r\n        maximumValue: defaultMaximumValue,\r\n        negativePositiveSignPlacement: 'p'\r\n    }\r\n};\r\nlanguageOption.Spanish = languageOption.French; // Español (idem French)\r\nlanguageOption.Chinese = languageOption.Japanese; // 中国語 (Chinese)\r\n\r\n/**\r\n * UMD structure\r\n */\r\n(function(factory) {\r\n    //TODO This surely can be improved by letting webpack take care of generating this UMD part\r\nif (typeof define === 'function' && define.amd) {\r\n        // AMD. Register as an anonymous module.\r\n    define(['jquery'], factory);\r\n} else if (typeof module === 'object' && module.exports) {\r\n        // Node/CommonJS\r\n    module.exports = factory(require('jquery'));\r\n} else {\r\n        // Browser globals\r\n    factory(window.jQuery);\r\n}\r\n}($ => {\r\n    // Helper functions\r\n\r\n    /**\r\n     * Return TRUE if the `value` is null\r\n     *\r\n     * @static\r\n     * @param {*} value The value to test\r\n     * @returns {boolean} Return TRUE if the `value` is null, FALSE otherwise\r\n     */\r\n    function isNull(value) {\r\n        return value === null;\r\n    }\r\n\r\n    /**\r\n     * Return TRUE if the `value` is undefined\r\n     *\r\n     * @static\r\n     * @param {*} value The value to test\r\n     * @returns {boolean} Return TRUE if the `value` is undefined, FALSE otherwise\r\n     */\r\n    function isUndefined(value) {\r\n        return value === void(0);\r\n    }\r\n\r\n    /**\r\n     * Return TRUE if the `value` is undefined, null or empty\r\n     *\r\n     * @param {*} value\r\n     * @returns {boolean}\r\n     */\r\n    function isUndefinedOrNullOrEmpty(value) {\r\n        return value === null || value === void(0) || '' === value;\r\n    }\r\n\r\n    /**\r\n     * Return TRUE if the given parameter is a String\r\n     *\r\n     * @param {*} str\r\n     * @returns {boolean}\r\n     */\r\n    function isString(str) {\r\n        return (typeof str === 'string' || str instanceof String);\r\n    }\r\n\r\n    /**\r\n     * Return TRUE if the parameter is a boolean\r\n     *\r\n     * @static\r\n     * @param {*} value\r\n     * @returns {boolean}\r\n     */\r\n    function isBoolean(value) {\r\n        return typeof(value) === 'boolean';\r\n    }\r\n\r\n    /**\r\n     * Return TRUE if the parameter is a string 'true' or 'false'\r\n     *\r\n     * This function accepts any cases for those strings.\r\n     * @param {string} value\r\n     * @returns {boolean}\r\n     */\r\n    function isTrueOrFalseString(value) {\r\n        const lowercaseValue = String(value).toLowerCase();\r\n        return lowercaseValue === 'true' || lowercaseValue === 'false';\r\n    }\r\n\r\n    /**\r\n     * Return TRUE if the parameter is an object\r\n     *\r\n     * @param {*} reference\r\n     * @returns {boolean}\r\n     */\r\n    function isObject(reference) {\r\n        return typeof reference === 'object' && reference !== null && !Array.isArray(reference);\r\n    }\r\n\r\n    /**\r\n     * Return TRUE if the given object is empty\r\n     * cf. http://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object and http://jsperf.com/empty-object-test\r\n     *\r\n     * @param {object} obj\r\n     * @returns {boolean}\r\n     */\r\n    function isEmptyObj(obj) {\r\n        for (const prop in obj) {\r\n            if (obj.hasOwnProperty(prop)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Return TRUE if the parameter is a number (or a number written as a string).\r\n     *\r\n     * @param {*} n\r\n     * @returns {boolean}\r\n     */\r\n    function isNumber(n) {\r\n        return !isArray(n) && !isNaN(parseFloat(n)) && isFinite(n);\r\n    }\r\n\r\n    /**\r\n     * Return TRUE if the parameter is an integer (and not a float).\r\n     *\r\n     * @param {*} n\r\n     * @returns {boolean}\r\n     */\r\n    function isInt(n) {\r\n        return typeof n === 'number' && parseFloat(n) === parseInt(n, 10) && !isNaN(n);\r\n    }\r\n\r\n    /**\r\n     * Return the pasted text that will be used.\r\n     *\r\n     * @param {string} text\r\n     * @param {AutoNumericHolder} holder\r\n     * @returns {string|void|XML|*}\r\n     */\r\n    function preparePastedText(text, holder) {\r\n        return stripAllNonNumberCharacters(text, holder.settingsClone, true).replace(holder.settingsClone.decimalCharacter, '.');\r\n    }\r\n\r\n    /**\r\n     * Return TRUE is the string `str` contains the string `needle`\r\n     * Note: this function does not coerce the parameters types\r\n     *\r\n     * @param {string} str\r\n     * @param {string} needle\r\n     * @returns {boolean}\r\n     */\r\n    function contains(str, needle) {\r\n        if (!isString(str) || !isString(needle) || str === '' || needle === '') {\r\n            return false;\r\n        }\r\n\r\n        return str.indexOf(needle) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Return TRUE if the `needle` is in the array\r\n     *\r\n     * @param {*} needle\r\n     * @param {Array} array\r\n     * @returns {boolean}\r\n     */\r\n    function isInArray(needle, array) {\r\n        if (!isArray(array) || array === [] || isUndefined(needle)) {\r\n            return false;\r\n        }\r\n\r\n        return array.indexOf(needle) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Return TRUE if the parameter is an Array\r\n     *\r\n     * @param {*} arr\r\n     * @throws Error\r\n     * @returns {*|boolean}\r\n     */\r\n    function isArray(arr) {\r\n        if (Object.prototype.toString.call([]) === '[object Array]') { // Make sure an array has a class attribute of [object Array]\r\n            // Test passed, now check if is an Array\r\n            return Array.isArray(arr) || (typeof arr === 'object' && Object.prototype.toString.call(arr) === '[object Array]');\r\n        }\r\n        else {\r\n            throw new Error('toString message changed for Object Array'); // Verify that the string returned by `toString` does not change in the future (cf. http://stackoverflow.com/a/8365215)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return TRUE if the parameter is a string that represents a float number, and that number has a decimal part\r\n     *\r\n     * @param {string} str\r\n     * @returns {boolean}\r\n     */\r\n    // function hasDecimals(str) {\r\n    //     const [, decimalPart] = str.split('.');\r\n    //     return !isUndefined(decimalPart);\r\n    // }\r\n\r\n    /**\r\n     * Return the number of decimal places if the parameter is a string that represents a float number, and that number has a decimal part.\r\n     *\r\n     * @param {string} str\r\n     * @returns {int}\r\n     */\r\n    function decimalPlaces(str) {\r\n        const [, decimalPart] = str.split('.');\r\n        if (!isUndefined(decimalPart)) {\r\n            return decimalPart.length;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Return the code for the key used to generate the given event.\r\n     *\r\n     * @param {Event} event\r\n     * @returns {string|Number}\r\n     */\r\n    function keyCodeNumber(event) {\r\n        // `event.keyCode` and `event.which` are deprecated, `KeyboardEvent.key` (https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) must be used now\r\n        return (typeof event.which === 'undefined')?event.keyCode:event.which;\r\n    }\r\n\r\n    /**\r\n     * Return the character from the event key code.\r\n     * @example character(50) => '2'\r\n     *\r\n     * @param {Event} event\r\n     * @returns {string}\r\n     */\r\n    function character(event) {\r\n        if (typeof event.key === 'undefined' || event.key === 'Unidentified') {\r\n            return String.fromCharCode(keyCodeNumber(event));\r\n        } else {\r\n            // Special case for obsolete browsers like IE that return the old names\r\n            let result;\r\n            switch (event.key) {\r\n                case 'Decimal':\r\n                    result = keyName.NumpadDot;\r\n                    break;\r\n                case 'Multiply':\r\n                    result = keyName.NumpadMultiply;\r\n                    break;\r\n                case 'Add':\r\n                    result = keyName.NumpadPlus;\r\n                    break;\r\n                case 'Subtract':\r\n                    result = keyName.NumpadMinus;\r\n                    break;\r\n                case 'Divide':\r\n                    result = keyName.NumpadSlash;\r\n                    break;\r\n                case 'Del':\r\n                    // Special workaround for the obsolete browser IE11 which output a 'Delete' key when using the numpad 'dot' one! This fixes issue #401 //FIXME à terminer\r\n                    result = keyName.Dot; // as of version 2.0.8 the character() function is only called on keypress event. The 'Del' does not throw the keypress event.\r\n                    break;\r\n                default:\r\n                    result = event.key;\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return TRUE if the given value (a number as a string) is within the range set in the settings `minimumValue` and `maximumValue`, FALSE otherwise.\r\n     *\r\n     * @param {string} value\r\n     * @param {object} parsedMinValue Parsed via the `parseStr()` function\r\n     * @param {object} parsedMaxValue Parsed via the `parseStr()` function\r\n     * @returns {boolean}\r\n     */\r\n    function checkIfInRange(value, parsedMinValue, parsedMaxValue) {\r\n        const parsedValue = parseStr(value);\r\n        return testMinMax(parsedMinValue, parsedValue) > -1 && testMinMax(parsedMaxValue, parsedValue) < 1;\r\n    }\r\n\r\n    /**\r\n     * Return TRUE if the given string contains a negative sign :\r\n     * - everywhere in the string (by default), or\r\n     * - on the first character only if the `checkEverywhere` parameter is set to `false`.\r\n     *\r\n     * @param {string} numericString A number represented by a string\r\n     * @param {boolean} checkEverywhere If TRUE, then the negative sign is search everywhere in the numeric string (this is needed for instance if the string is '1234.56-')\r\n     * @returns {boolean}\r\n     */\r\n    function isNegative(numericString, checkEverywhere = true) {\r\n        //TODO Use the `negativeSignCharacter` from the settings here\r\n        if (checkEverywhere) {\r\n            return contains(numericString, '-');\r\n        }\r\n\r\n        return isNegativeStrict(numericString);\r\n    }\r\n\r\n    /**\r\n     * Return TRUE if the given string contains a negative sign on the first character (on the far left).\r\n     *\r\n     * @example isNegativeStrict('1234.56')     => false\r\n     * @example isNegativeStrict('1234.56-')    => false\r\n     * @example isNegativeStrict('-1234.56')    => true\r\n     * @example isNegativeStrict('-1,234.56 €') => true\r\n     *\r\n     * @param {string} numericString\r\n     * @returns {boolean}\r\n     */\r\n    function isNegativeStrict(numericString) {\r\n        //TODO Using the `negativeSignCharacter` from the settings here\r\n        return numericString.charAt(0) === '-';\r\n    }\r\n\r\n    /**\r\n     * Return TRUE if the formatted or unformatted numeric string represent the value 0 (ie. '0,00 €'), or is empty (' €').\r\n     * This works since we test if there are any numbers from 1 to 9 in the string. If there is none, then the number is zero (or the string is empty).\r\n     *\r\n     * @param {string} numericString\r\n     * @returns {boolean}\r\n     */\r\n    function isZeroOrHasNoValue(numericString) {\r\n        return !(/[1-9]/g).test(numericString);\r\n    }\r\n\r\n    /**\r\n     * Return the negative version of the value (represented as a string) given as a parameter.\r\n     *\r\n     * @param {string} value\r\n     * @returns {*}\r\n     */\r\n    function setRawNegativeSign(value) {\r\n        if (!isNegativeStrict(value)) {\r\n            return `-${value}`;\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Replace the character at the position `index` in the string `string` by the character(s) `newCharacter`.\r\n     *\r\n     * @param {string} string\r\n     * @param {int} index\r\n     * @param {string} newCharacter\r\n     * @returns {string}\r\n     */\r\n    function replaceCharAt(string, index, newCharacter) {\r\n        return `${string.substr(0, index)}${newCharacter}${string.substr(index + newCharacter.length)}`;\r\n    }\r\n\r\n    /**\r\n     * Return the value clamped to the nearest minimum/maximum value, as defined in the settings.\r\n     *\r\n     * @param {string|number} value\r\n     * @param {object} settings\r\n     * @returns {number}\r\n     */\r\n    function clampToRangeLimits(value, settings) {\r\n        //XXX This function always assume `settings.minimumValue` is lower than `settings.maximumValue`\r\n        return Math.max(settings.minimumValue, Math.min(settings.maximumValue, value));\r\n    }\r\n\r\n    /**\r\n     * Return the number of number or dot characters on the left side of the caret, in a formatted number.\r\n     *\r\n     * @param {string} formattedNumberString\r\n     * @param {int} caretPosition This must be a positive integer\r\n     * @param {string} decimalCharacter\r\n     * @returns {number}\r\n     */\r\n    function countNumberCharactersOnTheCaretLeftSide(formattedNumberString, caretPosition, decimalCharacter) {\r\n        // Here we count the dot and report it as a number character too, since it will 'stay' in the Javascript number when unformatted\r\n        const numberDotOrNegativeSign = new RegExp(`[0-9${decimalCharacter}-]`); // No need to escape the decimal character here, since it's in `[]`\r\n\r\n        let numberDotAndNegativeSignCount = 0;\r\n        for (let i = 0; i < caretPosition; i++) {\r\n            // Test if the character is a number, a dot or an hyphen. If it is, count it, otherwise ignore it\r\n            if (numberDotOrNegativeSign.test(formattedNumberString[i])) {\r\n                numberDotAndNegativeSignCount++;\r\n            }\r\n        }\r\n\r\n        return numberDotAndNegativeSignCount;\r\n    }\r\n\r\n    /**\r\n     * Walk the `formattedNumberString` from left to right, one char by one, counting the `formattedNumberStringIndex`.\r\n     * If the char is in the `rawNumberString` (starting at index 0), then `rawNumberStringIndex++`, and continue until\r\n     * there is no more characters in `rawNumberString`) or that `rawNumberStringIndex === caretPositionInRawValue`.\r\n     * When you stop, the `formattedNumberStringIndex` is the position where the caret should be set.\r\n     *\r\n     * @example\r\n     * 1234567|89.01   : position 7 (rawNumberString)\r\n     * 123.456.7|89,01 : position 9 (formattedNumberString)\r\n     *\r\n     * @param {string} rawNumberString\r\n     * @param {int} caretPositionInRawValue\r\n     * @param {string} formattedNumberString\r\n     * @param {string} decimalCharacter\r\n     * @returns {*}\r\n     */\r\n    function findCaretPositionInFormattedNumber(rawNumberString, caretPositionInRawValue, formattedNumberString, decimalCharacter) {\r\n        const formattedNumberStringSize = formattedNumberString.length;\r\n        const rawNumberStringSize = rawNumberString.length;\r\n\r\n        let formattedNumberStringIndex;\r\n        let rawNumberStringIndex = 0;\r\n        for (formattedNumberStringIndex = 0;\r\n             formattedNumberStringIndex < formattedNumberStringSize &&\r\n             rawNumberStringIndex < rawNumberStringSize &&\r\n             rawNumberStringIndex < caretPositionInRawValue;\r\n             formattedNumberStringIndex++) {\r\n            if (rawNumberString[rawNumberStringIndex] === formattedNumberString[formattedNumberStringIndex] ||\r\n                (rawNumberString[rawNumberStringIndex] === '.' && formattedNumberString[formattedNumberStringIndex] === decimalCharacter)) {\r\n                rawNumberStringIndex++;\r\n            }\r\n        }\r\n\r\n        return formattedNumberStringIndex;\r\n    }\r\n\r\n    /**\r\n     * Count the number of occurrence of the given character, in the given text.\r\n     *\r\n     * @param {string} character\r\n     * @param {string} text\r\n     * @returns {number}\r\n     */\r\n    function countCharInText(character, text) {\r\n        let charCounter = 0;\r\n        for (let i = 0; i < text.length; i++) {\r\n            if (text[i] === character) {\r\n                charCounter++;\r\n            }\r\n        }\r\n\r\n        return charCounter;\r\n    }\r\n\r\n    /**\r\n     * Return the index that can be used to set the caret position.\r\n     * This takes into account that the position is starting at '0', not 1.\r\n     *\r\n     * @param {int} characterCount\r\n     * @returns {number}\r\n     */\r\n    function convertCharacterCountToIndexPosition(characterCount) {\r\n        return Math.max(characterCount, characterCount - 1);\r\n    }\r\n\r\n    /**\r\n     * Cross browser routine for getting selected range/cursor position\r\n     *\r\n     * @param {HTMLElement|EventTarget} that\r\n     * @returns {{}}\r\n     */\r\n    function getElementSelection(that) {\r\n        const position = {};\r\n        if (isUndefined(that.selectionStart)) {\r\n            that.focus();\r\n            const select = document.selection.createRange();\r\n            position.length = select.text.length;\r\n            select.moveStart('character', -that.value.length);\r\n            position.end = select.text.length;\r\n            position.start = position.end - position.length;\r\n        } else {\r\n            position.start = that.selectionStart;\r\n            position.end = that.selectionEnd;\r\n            position.length = position.end - position.start;\r\n        }\r\n\r\n        return position;\r\n    }\r\n\r\n    /**\r\n     * Cross browser routine for setting selected range/cursor position\r\n     *\r\n     * @param {HTMLElement|EventTarget} that\r\n     * @param {int} start\r\n     * @param {int|null} end\r\n     */\r\n    function setElementSelection(that, start, end = null) {\r\n        if (isUndefinedOrNullOrEmpty(end)) {\r\n            end = start;\r\n        }\r\n\r\n        if (isUndefined(that.selectionStart)) {\r\n            that.focus();\r\n            const range = that.createTextRange();\r\n            range.collapse(true);\r\n            range.moveEnd('character', end);\r\n            range.moveStart('character', start);\r\n            range.select();\r\n        } else {\r\n            that.selectionStart = start;\r\n            that.selectionEnd = end;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function that throw error messages\r\n     *\r\n     * @param {string} message\r\n     */\r\n    function throwError(message) {\r\n        throw new Error(message);\r\n    }\r\n\r\n    /**\r\n     * Function that display a warning messages, according to the debug level.\r\n     *\r\n     * @param {string} message\r\n     * @param {boolean} showWarning If FALSE, then the warning message is not displayed\r\n     */\r\n    function warning(message, showWarning = true) {\r\n        if (showWarning) {\r\n            /* eslint no-console: 0 */\r\n            console.warn(`Warning: ${message}`);\r\n        }\r\n    }\r\n\r\n    // autoNumeric-specific functions\r\n\r\n    /**\r\n     * Run any callbacks found in the settings object.\r\n     * Any parameter could be a callback:\r\n     * - a function, which invoked with jQuery element, parameters and this parameter name and returns parameter value\r\n     * - a name of function, attached to $(selector).autoNumeric.functionName(){} - which was called previously\r\n     * @param {object} $this jQuery-selected DOM element\r\n     * @param {object} settings\r\n     */\r\n    function runCallbacksFoundInTheSettingsObject($this, settings) {\r\n        // Loops through the settings object (option array) to find the following\r\n        $.each(settings, (k, val) => {\r\n            if (typeof val === 'function') {\r\n                settings[k] = val($this, settings, k);\r\n            } else if (typeof $this.autoNumeric[val] === 'function') {\r\n                // Calls the attached function from the html5 data example: data-a-sign=\"functionName\"\r\n                settings[k] = $this.autoNumeric[val]($this, settings, k);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Determine the maximum decimal length from the minimumValue and maximumValue settings\r\n     *\r\n     * @param {string} minimumValue\r\n     * @param {string} maximumValue\r\n     * @returns {number}\r\n     */\r\n    function maximumVMinAndVMaxDecimalLength(minimumValue, maximumValue) {\r\n        return Math.max(decimalPlaces(minimumValue), decimalPlaces(maximumValue));\r\n    }\r\n\r\n    /**\r\n     * Strip all unwanted non-number characters.\r\n     * This keeps the numbers, the negative sign as well as the custom decimal character.\r\n     *\r\n     * @param {string} s\r\n     * @param {object} settings\r\n     * @param {boolean} leftOrAll\r\n     * @returns {string|*}\r\n     */\r\n    function stripAllNonNumberCharacters(s, settings, leftOrAll) {\r\n        //TODO This function is called 10 times (sic!) on each key input, couldn't we lower that number? cf. issue #325\r\n        //TODO Refactor this with `convertToNumericString()` if possible?\r\n        if (settings.currencySymbol !== '') {\r\n            // Remove currency sign\r\n            s = s.replace(settings.currencySymbol, '');\r\n        }\r\n        if (settings.suffixText) {\r\n            // Remove suffix\r\n            while (contains(s, settings.suffixText)) {\r\n                s = s.replace(settings.suffixText, '');\r\n            }\r\n        }\r\n\r\n        // First replace anything before digits\r\n        s = s.replace(settings.skipFirstAutoStrip, '$1$2');\r\n\r\n        if ((settings.negativePositiveSignPlacement === 's' ||\r\n            (settings.currencySymbolPlacement === 's' && settings.negativePositiveSignPlacement !== 'p')) &&\r\n            isNegative(s) &&\r\n            s !== '') {\r\n            settings.trailingNegative = true;\r\n        }\r\n\r\n        // Then replace anything after digits\r\n        s = s.replace(settings.skipLastAutoStrip, '$1');\r\n\r\n        // Then remove any uninteresting characters\r\n        s = s.replace(settings.allowedAutoStrip, '');\r\n        if (settings.decimalCharacterAlternative) {\r\n            s = s.replace(settings.decimalCharacterAlternative, settings.decimalCharacter);\r\n        }\r\n\r\n        // Get only number string\r\n        const m = s.match(settings.numRegAutoStrip);\r\n        s = m ? [m[1], m[2], m[3]].join('') : '';\r\n\r\n        if (settings.leadingZero === 'allow' || settings.leadingZero === 'keep') {\r\n            let nSign = '';\r\n            const [integerPart, decimalPart] = s.split(settings.decimalCharacter);\r\n            let modifiedIntegerPart = integerPart;\r\n            if (contains(modifiedIntegerPart, settings.negativeSignCharacter)) {\r\n                nSign = settings.negativeSignCharacter;\r\n                modifiedIntegerPart = modifiedIntegerPart.replace(settings.negativeSignCharacter, '');\r\n            }\r\n\r\n            // Strip leading zero on positive value if need\r\n            if (nSign === '' && modifiedIntegerPart.length > settings.mIntPos && modifiedIntegerPart.charAt(0) === '0') {\r\n                modifiedIntegerPart = modifiedIntegerPart.slice(1);\r\n            }\r\n\r\n            // Strip leading zero on negative value if need\r\n            if (nSign !== '' && modifiedIntegerPart.length > settings.mIntNeg && modifiedIntegerPart.charAt(0) === '0') {\r\n                modifiedIntegerPart = modifiedIntegerPart.slice(1);\r\n            }\r\n\r\n            s = `${nSign}${modifiedIntegerPart}${isUndefined(decimalPart)?'':settings.decimalCharacter + decimalPart}`;\r\n        }\r\n\r\n        if ((leftOrAll && settings.leadingZero === 'deny') ||\r\n            (!settings.hasFocus && settings.leadingZero === 'allow')) {\r\n            s = s.replace(settings.stripReg, '$1$2');\r\n        }\r\n\r\n        return s;\r\n    }\r\n\r\n    /**\r\n     * Sets or removes brackets on negative values, depending on the focus state.\r\n     * The focus state is 'stored' in the settings object under the `settings.hasFocus` attribute.\r\n     * //TODO Use another object to keep track of internal data that are not settings\r\n     *\r\n     * @param {string} s\r\n     * @param {object} settings\r\n     * @returns {*}\r\n     */\r\n    function toggleNegativeBracket(s, settings) {\r\n        if ((settings.currencySymbolPlacement === 'p' && settings.negativePositiveSignPlacement === 'l') ||\r\n            (settings.currencySymbolPlacement === 's' && settings.negativePositiveSignPlacement === 'p')) {\r\n            //TODO Split the first and last bracket only once during the settings initialization\r\n            const [firstBracket, lastBracket] = settings.negativeBracketsTypeOnBlur.split(',');\r\n            if (!settings.hasFocus) {\r\n                // Add brackets\r\n                s = s.replace(settings.negativeSignCharacter, '');\r\n                s = firstBracket + s + lastBracket;\r\n            } else if (settings.hasFocus && s.charAt(0) === firstBracket) {\r\n                // Remove brackets\r\n                //TODO Quid if the negative sign is not on the left, shouldn't we replace the '-' sign at the right place?\r\n                s = s.replace(firstBracket, settings.negativeSignCharacter);\r\n                s = s.replace(lastBracket, '');\r\n            }\r\n        }\r\n\r\n        return s;\r\n    }\r\n\r\n    /**\r\n     * Return a number as a numeric string that can be typecast to a Number that Javascript will understand.\r\n     *\r\n     * This function return the given string by stripping the currency sign (currencySymbol), the grouping separators (digitalGroupSpacing) and by replacing the decimal character (decimalCharacter) by a dot.\r\n     * Lastly, it also put the negative sign back to its normal position if needed.\r\n     *\r\n     * @param {string} s\r\n     * @param {object} settings\r\n     * @returns {string|void|XML|*}\r\n     */\r\n    function convertToNumericString(s, settings) {\r\n        // Remove the currency symbol\r\n        s = s.replace(settings.currencySymbol, '');\r\n\r\n        // Remove the grouping separators (thousands separators usually)\r\n        s = s.replace(settings.digitGroupSeparator, '');\r\n\r\n        // Replace the decimal character by a dot\r\n        if (settings.decimalCharacter !== '.') {\r\n            s = s.replace(settings.decimalCharacter, '.');\r\n        }\r\n\r\n        // Move the trailing negative sign to the right position, if any\r\n        if (isNegative(s) && s.lastIndexOf('-') === s.length - 1) {\r\n            s = s.replace('-', '');\r\n            s = '-' + s;\r\n        }\r\n\r\n        // Convert any arabic numbers to latin ones\r\n        const temp = arabicToLatinNumbers(s, true, false, false);\r\n        if (!isNaN(temp)) {\r\n            s = temp.toString();\r\n        }\r\n\r\n        return s;\r\n    }\r\n\r\n    /**\r\n     * Converts the ISO numeric string to the locale decimal and minus sign placement.\r\n     * See the \"outputFormat\" option definition for more details.\r\n     *\r\n     * @param {string|null} value\r\n     * @param {string} locale\r\n     * @returns {*}\r\n     */\r\n    function toLocale(value, locale) {\r\n        if (isNull(locale) || locale === 'string') {\r\n            return value;\r\n        }\r\n\r\n        let result;\r\n        switch (locale) {\r\n            case 'number':\r\n                result = Number(value);\r\n                break;\r\n            case '.-':\r\n                result = isNegative(value) ? value.replace('-', '') + '-' : value;\r\n                break;\r\n            case ',':\r\n            case '-,':\r\n                result = value.replace('.', ',');\r\n                break;\r\n            case ',-':\r\n                result = value.replace('.', ',');\r\n                result = isNegative(result) ? result.replace('-', '') + '-' : result;\r\n                break;\r\n            // The default case\r\n            case '.':\r\n            case '-.':\r\n                result = value;\r\n                break;\r\n            default :\r\n                throwError(`The given outputFormat [${locale}] option is not recognized.`);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Modify the negative sign and the decimal character of the given string value to an hyphen (-) and a dot (.) in order to make that value 'typecastable' to a real number.\r\n     *\r\n     * @param {string} s\r\n     * @param {object} settings\r\n     * @returns {string}\r\n     */\r\n    function modifyNegativeSignAndDecimalCharacterForRawValue(s, settings) {\r\n        if (settings.decimalCharacter !== '.') {\r\n            s = s.replace(settings.decimalCharacter, '.');\r\n        }\r\n        if (settings.negativeSignCharacter !== '-' && settings.negativeSignCharacter !== '') {\r\n            s = s.replace(settings.negativeSignCharacter, '-');\r\n        }\r\n        if (!s.match(/\\d/)) {\r\n            // The default value returned by `get` is not formatted with decimals\r\n            s += '0';\r\n        }\r\n\r\n        return s;\r\n    }\r\n\r\n    /**\r\n     * Modify the negative sign and the decimal character to use those defined in the settings.\r\n     *\r\n     * @param {string} s\r\n     * @param {object} settings\r\n     * @returns {string}\r\n     */\r\n    function modifyNegativeSignAndDecimalCharacterForFormattedValue(s, settings) {\r\n        if (settings.negativeSignCharacter !== '-' && settings.negativeSignCharacter !== '') {\r\n            s = s.replace('-', settings.negativeSignCharacter);\r\n        }\r\n        if (settings.decimalCharacter !== '.') {\r\n            s = s.replace('.', settings.decimalCharacter);\r\n        }\r\n\r\n        return s;\r\n    }\r\n\r\n    /**\r\n     * Private function to check for empty value\r\n     * //TODO Modify this function so that it return either TRUE or FALSE if the value is empty. Then create another function to return the input value if it's not empty.\r\n     *\r\n     * @param {string} inputValue\r\n     * @param {object} settings\r\n     * @param {boolean} signOnEmpty\r\n     * @returns {*}\r\n     */\r\n    function checkEmpty(inputValue, settings, signOnEmpty) {\r\n        if (inputValue === '' || inputValue === settings.negativeSignCharacter) {\r\n            if (settings.emptyInputBehavior === 'always' || signOnEmpty) {\r\n                return (settings.negativePositiveSignPlacement === 'l') ? inputValue + settings.currencySymbol + settings.suffixText : settings.currencySymbol + inputValue + settings.suffixText;\r\n            }\r\n\r\n            return inputValue;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Modify the input value by adding the group separators, as defined in the settings.\r\n     *\r\n     * @param {string} inputValue\r\n     * @param {object} settings\r\n     * @returns {*}\r\n     */\r\n    function addGroupSeparators(inputValue, settings) {\r\n        if (settings.strip) {\r\n            inputValue = stripAllNonNumberCharacters(inputValue, settings, false);\r\n        }\r\n\r\n        //TODO This function `addGroupSeparators()` add group separators. Adding the negative sign as well is out of its scope. Move that to another function.\r\n        if (settings.trailingNegative && !isNegative(inputValue)) {\r\n            inputValue = '-' + inputValue;\r\n        }\r\n\r\n        const empty = checkEmpty(inputValue, settings, true);\r\n        const isValueNegative = isNegative(inputValue);\r\n        const isZero = isZeroOrHasNoValue(inputValue);\r\n        if (isValueNegative) {\r\n            inputValue = inputValue.replace('-', '');\r\n        }\r\n\r\n        if (!isNull(empty)) {\r\n            return empty;\r\n        }\r\n\r\n        settings.digitalGroupSpacing = settings.digitalGroupSpacing.toString();\r\n        let digitalGroup;\r\n        switch (settings.digitalGroupSpacing) {\r\n            case '2':\r\n                digitalGroup = /(\\d)((\\d)(\\d{2}?)+)$/;\r\n                break;\r\n            case '2s':\r\n                digitalGroup = /(\\d)((?:\\d{2}){0,2}\\d{3}(?:(?:\\d{2}){2}\\d{3})*?)$/;\r\n                break;\r\n            case '4':\r\n                digitalGroup = /(\\d)((\\d{4}?)+)$/;\r\n                break;\r\n            default :\r\n                digitalGroup = /(\\d)((\\d{3}?)+)$/;\r\n        }\r\n\r\n        // Splits the string at the decimal string\r\n        let [integerPart, decimalPart] = inputValue.split(settings.decimalCharacter);\r\n        if (settings.decimalCharacterAlternative && isUndefined(decimalPart)) {\r\n            [integerPart, decimalPart] = inputValue.split(settings.decimalCharacterAlternative);\r\n        }\r\n\r\n        if (settings.digitGroupSeparator !== '') {\r\n            // Re-inserts the thousand separator via a regular expression\r\n            while (digitalGroup.test(integerPart)) {\r\n                integerPart = integerPart.replace(digitalGroup, `$1${settings.digitGroupSeparator}$2`);\r\n            }\r\n        }\r\n\r\n        if (settings.decimalPlacesOverride !== 0 && !isUndefined(decimalPart)) {\r\n            if (decimalPart.length > settings.decimalPlacesOverride) {\r\n                decimalPart = decimalPart.substring(0, settings.decimalPlacesOverride);\r\n            }\r\n\r\n            // Joins the whole number with the decimal value\r\n            inputValue = integerPart + settings.decimalCharacter + decimalPart;\r\n        } else {\r\n            // Otherwise if it's an integer\r\n            inputValue = integerPart;\r\n        }\r\n\r\n        settings.trailingNegative = false;\r\n\r\n        if (settings.currencySymbolPlacement === 'p') {\r\n            if (isValueNegative) {\r\n                switch (settings.negativePositiveSignPlacement) {\r\n                    case 'l':\r\n                        inputValue = `${settings.negativeSignCharacter}${settings.currencySymbol}${inputValue}`;\r\n                        break;\r\n                    case 'r':\r\n                        inputValue = `${settings.currencySymbol}${settings.negativeSignCharacter}${inputValue}`;\r\n                        break;\r\n                    case 's':\r\n                        inputValue = `${settings.currencySymbol}${inputValue}${settings.negativeSignCharacter}`;\r\n                        settings.trailingNegative = true;\r\n                        break;\r\n                    default :\r\n                    //\r\n                }\r\n            } else if (settings.showPositiveSign && !isZero) {\r\n                switch (settings.negativePositiveSignPlacement) {\r\n                    case 'l':\r\n                        inputValue = `${settings.positiveSignCharacter}${settings.currencySymbol}${inputValue}`;\r\n                        break;\r\n                    case 'r':\r\n                        inputValue = `${settings.currencySymbol}${settings.positiveSignCharacter}${inputValue}`;\r\n                        break;\r\n                    case 's':\r\n                        inputValue = `${settings.currencySymbol}${inputValue}${settings.positiveSignCharacter}`;\r\n                        break;\r\n                    default :\r\n                    //\r\n                }\r\n            } else {\r\n                inputValue = settings.currencySymbol + inputValue;\r\n            }\r\n        }\r\n\r\n        if (settings.currencySymbolPlacement === 's') {\r\n            if (isValueNegative) {\r\n                switch (settings.negativePositiveSignPlacement) {\r\n                    case 'r':\r\n                        inputValue = `${inputValue}${settings.currencySymbol}${settings.negativeSignCharacter}`;\r\n                        settings.trailingNegative = true;\r\n                        break;\r\n                    case 'l':\r\n                        inputValue = `${inputValue}${settings.negativeSignCharacter}${settings.currencySymbol}`;\r\n                        settings.trailingNegative = true;\r\n                        break;\r\n                    case 'p':\r\n                        inputValue = `${settings.negativeSignCharacter}${inputValue}${settings.currencySymbol}`;\r\n                        break;\r\n                    default :\r\n                    //\r\n                }\r\n            } else if (settings.showPositiveSign && !isZero) {\r\n                switch (settings.negativePositiveSignPlacement) {\r\n                    case 'r':\r\n                        inputValue = `${inputValue}${settings.currencySymbol}${settings.positiveSignCharacter}`;\r\n                        break;\r\n                    case 'l':\r\n                        inputValue = `${inputValue}${settings.positiveSignCharacter}${settings.currencySymbol}`;\r\n                        break;\r\n                    case 'p':\r\n                        inputValue = `${settings.positiveSignCharacter}${inputValue}${settings.currencySymbol}`;\r\n                        break;\r\n                    default :\r\n                    //\r\n                }\r\n            } else {\r\n                inputValue = inputValue + settings.currencySymbol;\r\n            }\r\n        }\r\n\r\n        // Removes the negative sign and places brackets\r\n        if (settings.negativeBracketsTypeOnBlur !== null && (settings.rawValue < 0 || isNegativeStrict(inputValue))) {\r\n            inputValue = toggleNegativeBracket(inputValue, settings);\r\n        }\r\n\r\n        return inputValue + settings.suffixText;\r\n    }\r\n\r\n    /**\r\n     * Truncate not needed zeros\r\n     *\r\n     * @param {string} roundedInputValue\r\n     * @param {int} temporaryDecimalPlacesOverride\r\n     * @returns {void|XML|string|*}\r\n     */\r\n    function truncateZeros(roundedInputValue, temporaryDecimalPlacesOverride) {\r\n        let regex;\r\n        switch (temporaryDecimalPlacesOverride) {\r\n            case 0:\r\n                // Prevents padding - removes trailing zeros until the first significant digit is encountered\r\n                regex = /(\\.(?:\\d*[1-9])?)0*$/;\r\n                break;\r\n            case 1:\r\n                // Allows padding when decimalPlacesOverride equals one - leaves one zero trailing the decimal character\r\n                regex = /(\\.\\d(?:\\d*[1-9])?)0*$/;\r\n                break;\r\n            default :\r\n                // Removes access zeros to the decimalPlacesOverride length when allowDecimalPadding is set to true\r\n                regex = new RegExp(`(\\\\.\\\\d{${temporaryDecimalPlacesOverride}}(?:\\\\d*[1-9])?)0*`);\r\n        }\r\n\r\n        // If there are no decimal places, we don't need a decimal point at the end\r\n        roundedInputValue = roundedInputValue.replace(regex, '$1');\r\n        if (temporaryDecimalPlacesOverride === 0) {\r\n            roundedInputValue = roundedInputValue.replace(/\\.$/, '');\r\n        }\r\n\r\n        return roundedInputValue;\r\n    }\r\n\r\n    /**\r\n     * Round the input value using the rounding method defined in the settings.\r\n     * This function accepts multiple rounding methods. See the documentation for more details about those.\r\n     *\r\n     * Note : This is handled as text since JavaScript math function can return inaccurate values.\r\n     *\r\n     * @param {string} inputValue\r\n     * @param {object} settings\r\n     * @returns {*}\r\n     */\r\n    function roundValue(inputValue, settings) {\r\n        inputValue = (inputValue === '') ? '0' : inputValue.toString();\r\n        if (settings.roundingMethod === 'N05' || settings.roundingMethod === 'CHF' || settings.roundingMethod === 'U05' || settings.roundingMethod === 'D05') {\r\n            switch (settings.roundingMethod) {\r\n                case 'N05':\r\n                    inputValue = (Math.round(inputValue * 20) / 20).toString();\r\n                    break;\r\n                case 'U05':\r\n                    inputValue = (Math.ceil(inputValue * 20) / 20).toString();\r\n                    break;\r\n                default :\r\n                    inputValue = (Math.floor(inputValue * 20) / 20).toString();\r\n            }\r\n\r\n            let result;\r\n            if (!contains(inputValue, '.')) {\r\n                result = inputValue + '.00';\r\n            } else if (inputValue.length - inputValue.indexOf('.') < 3) {\r\n                result = inputValue + '0';\r\n            } else {\r\n                result = inputValue;\r\n            }\r\n            return result;\r\n        }\r\n\r\n        let ivRounded = '';\r\n        let i = 0;\r\n        let nSign = '';\r\n        let temporaryDecimalPlacesOverride;\r\n\r\n        // sets the truncate zero method\r\n        if (settings.allowDecimalPadding) {\r\n            temporaryDecimalPlacesOverride = settings.decimalPlacesOverride;\r\n        } else {\r\n            temporaryDecimalPlacesOverride = 0;\r\n        }\r\n\r\n        // Checks if the inputValue (input Value) is a negative value\r\n        if (isNegativeStrict(inputValue)) {\r\n            nSign = '-';\r\n\r\n            // Removes the negative sign that will be added back later if required\r\n            inputValue = inputValue.replace('-', '');\r\n        }\r\n\r\n        // Append a zero if the first character is not a digit (then it is likely to be a dot)\r\n        if (!inputValue.match(/^\\d/)) {\r\n            inputValue = '0' + inputValue;\r\n        }\r\n\r\n        // Determines if the value is equal to zero. If it is, remove the negative sign\r\n        if (Number(inputValue) === 0) {\r\n            nSign = '';\r\n        }\r\n\r\n        // Trims leading zero's as needed\r\n        if ((Number(inputValue) > 0 && settings.leadingZero !== 'keep') || (inputValue.length > 0 && settings.leadingZero === 'allow')) {\r\n            inputValue = inputValue.replace(/^0*(\\d)/, '$1');\r\n        }\r\n\r\n        const dPos = inputValue.lastIndexOf('.');\r\n        const inputValueHasADot = dPos === -1;\r\n\r\n        // Virtual decimal position\r\n        const vdPos = inputValueHasADot ? inputValue.length - 1 : dPos;\r\n\r\n        // Checks decimal places to determine if rounding is required :\r\n        // Check if no rounding is required\r\n        let cDec = (inputValue.length - 1) - vdPos;\r\n\r\n        if (cDec <= settings.decimalPlacesOverride) {\r\n            // Check if we need to pad with zeros\r\n            ivRounded = inputValue;\r\n            if (cDec < temporaryDecimalPlacesOverride) {\r\n                if (inputValueHasADot) {\r\n                    ivRounded += settings.decimalCharacter;\r\n                }\r\n\r\n                let zeros = '000000';\r\n                while (cDec < temporaryDecimalPlacesOverride) {\r\n                    zeros = zeros.substring(0, temporaryDecimalPlacesOverride - cDec);\r\n                    ivRounded += zeros;\r\n                    cDec += zeros.length;\r\n                }\r\n            } else if (cDec > temporaryDecimalPlacesOverride) {\r\n                ivRounded = truncateZeros(ivRounded, temporaryDecimalPlacesOverride);\r\n            } else if (cDec === 0 && temporaryDecimalPlacesOverride === 0) {\r\n                ivRounded = ivRounded.replace(/\\.$/, '');\r\n            }\r\n\r\n            return (Number(ivRounded) === 0) ? ivRounded : nSign + ivRounded;\r\n        }\r\n\r\n        // Rounded length of the string after rounding\r\n        let rLength;\r\n        if (inputValueHasADot) {\r\n            rLength = settings.decimalPlacesOverride - 1;\r\n        } else {\r\n            rLength = settings.decimalPlacesOverride + dPos;\r\n        }\r\n\r\n        const tRound = Number(inputValue.charAt(rLength + 1));\r\n        const odd = (inputValue.charAt(rLength) === '.') ? (inputValue.charAt(rLength - 1) % 2) : (inputValue.charAt(rLength) % 2);\r\n        let ivArray = inputValue.substring(0, rLength + 1).split('');\r\n\r\n        if ((tRound > 4 && settings.roundingMethod === 'S')                  || // Round half up symmetric\r\n            (tRound > 4 && settings.roundingMethod === 'A' && nSign === '')  || // Round half up asymmetric positive values\r\n            (tRound > 5 && settings.roundingMethod === 'A' && nSign === '-') || // Round half up asymmetric negative values\r\n            (tRound > 5 && settings.roundingMethod === 's')                  || // Round half down symmetric\r\n            (tRound > 5 && settings.roundingMethod === 'a' && nSign === '')  || // Round half down asymmetric positive values\r\n            (tRound > 4 && settings.roundingMethod === 'a' && nSign === '-') || // Round half down asymmetric negative values\r\n            (tRound > 5 && settings.roundingMethod === 'B')                  || // Round half even \"Banker's Rounding\"\r\n            (tRound === 5 && settings.roundingMethod === 'B' && odd === 1)   || // Round half even \"Banker's Rounding\"\r\n            (tRound > 0 && settings.roundingMethod === 'C' && nSign === '')  || // Round to ceiling toward positive infinite\r\n            (tRound > 0 && settings.roundingMethod === 'F' && nSign === '-') || // Round to floor toward negative infinite\r\n            (tRound > 0 && settings.roundingMethod === 'U')) {                  // Round up away from zero\r\n            // Round up the last digit if required, and continue until no more 9's are found\r\n            for (i = (ivArray.length - 1); i >= 0; i -= 1) {\r\n                if (ivArray[i] !== '.') {\r\n                    ivArray[i] = +ivArray[i] + 1;\r\n                    if (ivArray[i] < 10) {\r\n                        break;\r\n                    }\r\n\r\n                    if (i > 0) {\r\n                        ivArray[i] = '0';\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Reconstruct the string, converting any 10's to 0's\r\n        ivArray = ivArray.slice(0, rLength + 1);\r\n\r\n        // Return the rounded value\r\n        ivRounded = truncateZeros(ivArray.join(''), temporaryDecimalPlacesOverride);\r\n\r\n        return (Number(ivRounded) === 0) ? ivRounded : nSign + ivRounded;\r\n    }\r\n\r\n    /**\r\n     * Truncates the decimal part of a number.\r\n     *\r\n     * @param {string} s\r\n     * @param {object} settings\r\n     * @param {boolean} isPaste\r\n     * @returns {*}\r\n     */\r\n    function truncateDecimal(s, settings, isPaste) {\r\n        s = (isPaste) ? roundValue(s, settings) : s;\r\n\r\n        if (settings.decimalCharacter && settings.decimalPlacesOverride) {\r\n            const [integerPart, decimalPart] = s.split(settings.decimalCharacter);\r\n\r\n            // truncate decimal part to satisfying length since we would round it anyway\r\n            if (decimalPart && decimalPart.length > settings.decimalPlacesOverride) {\r\n                if (settings.decimalPlacesOverride > 0) {\r\n                    const modifiedDecimalPart = decimalPart.substring(0, settings.decimalPlacesOverride);\r\n                    s = `${integerPart}${settings.decimalCharacter}${modifiedDecimalPart}`;\r\n                } else {\r\n                    s = integerPart;\r\n                }\r\n            }\r\n        }\r\n\r\n        return s;\r\n    }\r\n\r\n    /**\r\n     * Function to parse minimumValue, maximumValue & the input value to prepare for testing to determine if the value falls within the min / max range.\r\n     * Return an object example: minimumValue: \"999999999999999.99\" returns the following \"{s: -1, e: 12, c: Array[15]}\".\r\n     *\r\n     * This function is adapted from Big.js https://github.com/MikeMcl/big.js/. Many thanks to Mike.\r\n     *\r\n     * @param {number|string} n A numeric value.\r\n     * @returns {{}}\r\n     */\r\n    function parseStr(n) {\r\n        const x = {}; // A Big number instance.\r\n        let e;\r\n        let i;\r\n        let nL;\r\n        let j;\r\n\r\n        // Minus zero?\r\n        if (n === 0 && 1 / n < 0) {\r\n            n = '-0';\r\n        }\r\n\r\n        // Determine sign. 1 positive, -1 negative\r\n        n = n.toString();\r\n        if (isNegativeStrict(n)) {\r\n            n = n.slice(1);\r\n            x.s = -1;\r\n        } else {\r\n            x.s = 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        e = n.indexOf('.');\r\n        if (e > -1) {\r\n            n = n.replace('.', '');\r\n        }\r\n\r\n        // length of string if no decimal character\r\n        if (e < 0) {\r\n            // Integer\r\n            e = n.length;\r\n        }\r\n\r\n        // Determine leading zeros\r\n        i = (n.search(/[1-9]/i) === -1) ? n.length : n.search(/[1-9]/i);\r\n        nL = n.length;\r\n        if (i === nL) {\r\n            // Zero\r\n            x.e = 0;\r\n            x.c = [0];\r\n        } else {\r\n            // Determine trailing zeros\r\n            for (j = nL - 1; n.charAt(j) === '0'; j -= 1) {\r\n                nL -= 1;\r\n            }\r\n            nL -= 1;\r\n\r\n            // Decimal location\r\n            x.e = e - i - 1;\r\n            x.c = [];\r\n\r\n            // Convert string to array of digits without leading/trailing zeros\r\n            for (e = 0; i <= nL; i += 1) {\r\n                x.c[e] = +n.charAt(i);\r\n                e += 1;\r\n            }\r\n        }\r\n\r\n        return x;\r\n    }\r\n\r\n    /**\r\n     * Function to test if the input value falls with the Min / Max settings.\r\n     * This uses the parsed strings for the above parseStr function.\r\n     *\r\n     * This function is adapted from Big.js https://github.com/MikeMcl/big.js/. Many thanks to Mike.\r\n     *\r\n     * @param {object} y Big number instance\r\n     * @param {object} x Big number instance\r\n     * @returns {*}\r\n     */\r\n    function testMinMax(y, x) {\r\n        const xc = x.c;\r\n        const yc = y.c;\r\n        let i = x.s;\r\n        let j = y.s;\r\n        let k = x.e;\r\n        let l = y.e;\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n            let result;\r\n            if (!xc[0]) {\r\n                result = !yc[0]?0:-j;\r\n            } else {\r\n                result = i;\r\n            }\r\n            return result;\r\n        }\r\n\r\n        // Signs differ?\r\n        if (i !== j) {\r\n            return i;\r\n        }\r\n        const xNeg = i < 0;\r\n\r\n        // Compare exponents\r\n        if (k !== l) {\r\n            return (k > l ^ xNeg)?1:-1;\r\n        }\r\n        i = -1;\r\n        k = xc.length;\r\n        l = yc.length;\r\n        j = (k < l) ? k : l;\r\n\r\n        // Compare digit by digit\r\n        for (i += 1; i < j; i += 1) {\r\n            if (xc[i] !== yc[i]) {\r\n                return (xc[i] > yc[i] ^ xNeg)?1:-1;\r\n            }\r\n        }\r\n\r\n        // Compare lengths\r\n        let result;\r\n        if (k === l) {\r\n            result = 0;\r\n        } else {\r\n            result = (k > l ^ xNeg)?1:-1;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Check that the number satisfy the format conditions\r\n     * and lays between settings.minimumValue and settings.maximumValue\r\n     * and the string length does not exceed the digits in settings.minimumValue and settings.maximumValue\r\n     *\r\n     * @param {string} s\r\n     * @param {object} settings\r\n     * @returns {*}\r\n     */\r\n    function checkIfInRangeWithOverrideOption(s, settings) {\r\n        s = s.toString();\r\n        s = s.replace(',', '.');\r\n        const minParse = parseStr(settings.minimumValue);\r\n        const maxParse = parseStr(settings.maximumValue);\r\n        const valParse = parseStr(s);\r\n\r\n        let result;\r\n        switch (settings.overrideMinMaxLimits) {\r\n            case 'floor':\r\n                result = [testMinMax(minParse, valParse) > -1, true];\r\n                break;\r\n            case 'ceiling':\r\n                result = [true, testMinMax(maxParse, valParse) < 1];\r\n                break;\r\n            case 'ignore':\r\n                result = [true, true];\r\n                break;\r\n            default:\r\n                result = [testMinMax(minParse, valParse) > -1, testMinMax(maxParse, valParse) < 1];\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Thanks to Anthony & Evan C\r\n     *\r\n     * @param {Element|string} element\r\n     * @returns {*|jQuery|HTMLElement}\r\n     */\r\n    function getCurrentElement(element) {\r\n        /*\r\n         * If the parameter is a string (and therefore is a CSS selector), then we need to modify this string in order\r\n         * for jQuery to be able to parse the selector correctly.\r\n         * cf. http://learn.jquery.com/using-jquery-core/faq/how-do-i-select-an-element-by-an-id-that-has-characters-used-in-css-notation/\r\n         */\r\n        if (isString(element)) {\r\n            //TODO This block is apparently never entered. We should remove it after making sure that's 100% the case\r\n            element = `#${element.replace(/(:|\\.|\\[|]|,|=)/g, '\\\\$1')}`;\r\n        }\r\n\r\n        return $(element);\r\n    }\r\n\r\n    /**\r\n     * Function that attach the autoNumeric field properties to the DOM element via an AutoNumericHolder object.\r\n     *\r\n     * @param {object} $this jQuery-selected DOM element\r\n     * @param {object} settings\r\n     * @param {boolean} update\r\n     * @returns {*}\r\n     */\r\n    function getAutoNumericHolder($this, settings, update = false) {\r\n        let data = $this.data('autoNumeric');\r\n        if (!data) {\r\n            data = {};\r\n            $this.data('autoNumeric', data);\r\n        }\r\n\r\n        let holder = data.holder;\r\n        if (update || (isUndefined(holder) && settings)) {\r\n            holder = new AutoNumericHolder($this.get(0), settings);\r\n            data.holder = holder;\r\n        }\r\n\r\n        return holder;\r\n    }\r\n\r\n    /**\r\n     * Original settings saved for use when decimalPlacesShownOnFocus & noSeparatorOnFocus options are being used.\r\n     * Those original settings are used exclusively in the `focusin` and `focusout` event handlers.\r\n     *\r\n     * @param {object} settings\r\n     */\r\n    function keepAnOriginalSettingsCopy(settings) {\r\n        //TODO Rename the old option names to the new ones\r\n        settings.oDec     = settings.decimalPlacesOverride;\r\n        settings.oPad     = settings.allowDecimalPadding;\r\n        settings.oBracket = settings.negativeBracketsTypeOnBlur;\r\n        settings.oSep     = settings.digitGroupSeparator;\r\n        settings.oSign    = settings.currencySymbol;\r\n        settings.oSuffix  = settings.suffixText;\r\n    }\r\n\r\n    /**\r\n     * Original settings saved for use when `decimalPlacesShownOnFocus` & `noSeparatorOnFocus` options are being used.\r\n     * This is taken from Quirksmode.\r\n     *\r\n     * @param {string} name\r\n     * @returns {*}\r\n     */\r\n    function readCookie(name) {\r\n        const nameEQ = name + '=';\r\n        const ca = document.cookie.split(';');\r\n        let c = '';\r\n        for (let i = 0; i < ca.length; i += 1) {\r\n            c = ca[i];\r\n            while (c.charAt(0) === ' ') {\r\n                c = c.substring(1, c.length);\r\n            }\r\n            if (c.indexOf(nameEQ) === 0) {\r\n                return c.substring(nameEQ.length, c.length);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Test if sessionStorage is supported.\r\n     * This is taken from Modernizr.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    function storageTest() {\r\n        const mod = 'modernizr';\r\n        try {\r\n            sessionStorage.setItem(mod, mod);\r\n            sessionStorage.removeItem(mod);\r\n            return true;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * properly formats the string to a numeric when leadingZero does not 'keep'.\r\n     *\r\n     * @param {string} value\r\n     * @param {object} settings\r\n     * @returns {string}\r\n     */\r\n    function cleanLeadingTrailingZeros(value, settings) {\r\n        // Return the empty string is the value is already empty. This prevent converting that value to '0'.\r\n        if (value === '') {\r\n            return '';\r\n        }\r\n\r\n        // Return '0' if the value is zero\r\n        if (Number(value) === 0 && settings.leadingZero !== 'keep') {\r\n            return '0';\r\n        }\r\n\r\n        if (settings.leadingZero !== 'keep') {\r\n            // Trim leading zero's - leaves one zero to the left of the decimal point\r\n            value = value.replace(/^(-)?0+(?=\\d)/g,'$1');\r\n\r\n            //TODO remove this from that function and use `trimPaddedZerosFromDecimalPlaces()` instead. Also create a new `trailingZero` option.\r\n            if (contains(value, '.')) {\r\n                // Trims trailing zeros after the decimal point\r\n                value = value.replace(/(\\.[0-9]*?)0+$/, '$1');\r\n            }\r\n        }\r\n        // Strips trailing decimal point\r\n        value = value.replace(/\\.$/, '');\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Remove the trailing zeros in the decimal part of a number.\r\n     *\r\n     * @param {string} numericString\r\n     * @returns {*}\r\n     */\r\n    function trimPaddedZerosFromDecimalPlaces(numericString) {\r\n        const [integerPart, decimalPart] = numericString.split('.');\r\n        if (isUndefinedOrNullOrEmpty(decimalPart)) {\r\n            return integerPart;\r\n        }\r\n\r\n        const trimmedDecimalPart = decimalPart.replace(/0+$/g, '');\r\n\r\n        let result;\r\n        if (trimmedDecimalPart === '') {\r\n            result = integerPart;\r\n        } else {\r\n            result = `${integerPart}.${trimmedDecimalPart}`;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates or removes sessionStorage or cookie depending on what the browser is supporting.\r\n     *\r\n     * @param {Element|EventTarget} element\r\n     * @param {object} settings\r\n     * @param {string} action\r\n     * @returns {*}\r\n     */\r\n    function saveValueToPersistentStorage(element, settings, action) {\r\n        if (settings.saveValueToSessionStorage) {\r\n            const storedName = (element.name !== '' && !isUndefined(element.name)) ?`AUTO_${decodeURIComponent(element.name)}` :`AUTO_${element.id}`;\r\n            let date;\r\n            let expires;\r\n\r\n            // Sets cookie for browser that do not support sessionStorage IE 6 & IE 7\r\n            if (storageTest() === false) {\r\n                switch (action) {\r\n                    case 'set':\r\n                        document.cookie = `${storedName}=${settings.rawValue}; expires= ; path=/`;\r\n                        break;\r\n                    case 'wipe':\r\n                        date = new Date();\r\n                        date.setTime(date.getTime() + (-1 * 24 * 60 * 60 * 1000));\r\n                        expires = '; expires=' + date.toUTCString(); // Note : `toGMTString()` has been deprecated (cf. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toGMTString)\r\n                        document.cookie = `${storedName}='' ;${expires}; path=/`;\r\n                        break;\r\n                    case 'get':\r\n                        return readCookie(storedName);\r\n                }\r\n            } else {\r\n                switch (action) {\r\n                    case 'set':\r\n                        sessionStorage.setItem(storedName, settings.rawValue);\r\n                        break;\r\n                    case 'wipe':\r\n                        sessionStorage.removeItem(storedName);\r\n                        break;\r\n                    case 'get':\r\n                        return sessionStorage.getItem(storedName);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Holder object for field properties\r\n     */\r\n    class AutoNumericHolder {\r\n        /**\r\n         * Class constructor\r\n         *\r\n         * @param {HTMLElement} that - A reference to the current DOM element\r\n         * @param {object} settings\r\n         */\r\n        constructor(that, settings) {\r\n            this.settings = settings;\r\n            this.that = that;\r\n            this.$that = $(that);\r\n            this.formatted = false;\r\n            this.settingsClone = settings;\r\n            this.value = that.value;\r\n        }\r\n\r\n        /**\r\n         * Update the value and the selection values inside the AutoNumericHolder object.\r\n         * This keeps tracks of the input value, as well as the current selection.\r\n         * This also resets the 'processed' and 'formatted' state.\r\n         *\r\n         * Note : Those two can change between the keydown, keypress and keyup events, that's why\r\n         *        this function is called on each event handler.\r\n         *\r\n         * @private\r\n         */\r\n        _updateAutoNumericHolderProperties() {\r\n            this.value = this.that.value;\r\n            this.selection = getElementSelection(this.that);\r\n            this.processed = false;\r\n            this.formatted = false;\r\n        }\r\n\r\n        /**\r\n         * Update the keycode of the key that triggered the given event.\r\n         * Note : e.which is sometimes different than e.keyCode during the keypress event, when entering a printable character key (ie. 't'). `e.which` equals 0 for non-printable characters.\r\n         *\r\n         * //TODO Switch to the non-deprecated e.key attribute, instead of inconsistant e.which and e.keyCode.\r\n         * e.key describe the key name used to trigger the event.\r\n         * e.keyCode being deprecated : https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode\r\n         * How e.key works : https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key\r\n         * The key list is described here\r\n         * @link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\r\n         *\r\n         * @param {Event} e\r\n         * @private\r\n         */\r\n        _updateAutoNumericHolderEventKeycode(e) {\r\n            // Note: the keypress event overwrites meaningful value of e.keyCode, hence we do not update that value on 'keypress'\r\n            this.eventKeyCode = keyCodeNumber(e);\r\n        }\r\n\r\n        /**\r\n         * Set the text selection inside the input with the given start and end position.\r\n         *\r\n         * @param {int} start\r\n         * @param {int} end\r\n         * @param {undefined|boolean} setReal\r\n         * @private\r\n         */\r\n        _setSelection(start, end, setReal) {\r\n            //TODO Modify setReal to be more explicit (and a boolean)\r\n            start = Math.max(start, 0);\r\n            end = Math.min(end, this.that.value.length); //TODO Replace `this.that.value.length` with `this.value.length`\r\n            this.selection = {\r\n                start,\r\n                end,\r\n                length: end - start,\r\n            };\r\n\r\n            if (isUndefined(setReal) || setReal) {\r\n                setElementSelection(this.that, start, end);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Set the caret position inside the input at the given position.\r\n         *\r\n         * @param {int} pos\r\n         * @param {undefined|boolean} setReal\r\n         * @private\r\n         */\r\n        _setCaretPosition(pos, setReal) {\r\n            //TODO Modify setReal to be more explicit (and a boolean)\r\n            this._setSelection(pos, pos, setReal);\r\n        }\r\n\r\n        /**\r\n         * Return an array containing the string parts located on the left and right side of the caret or selection.\r\n         * Those parts are left 'untouched', ie. formatted by autoNumeric.\r\n         *\r\n         * @returns {[string, string]} The parts on the left and right of the caret or selection\r\n         * @private\r\n         */\r\n        _getLeftAndRightPartAroundTheSelection() {\r\n            const value = this.value;\r\n            const left = value.substring(0, this.selection.start);\r\n            const right = value.substring(this.selection.end, value.length);\r\n\r\n            return [left, right];\r\n        }\r\n\r\n        /**\r\n         * Return an array containing the string parts located on the left and right side of the caret or selection.\r\n         * Those parts are unformatted (stripped) of any non-numbers characters.\r\n         *\r\n         * @returns {[string, string]} The parts on the left and right of the caret or selection, unformatted.\r\n         * @private\r\n         */\r\n        _getUnformattedLeftAndRightPartAroundTheSelection() {\r\n            const settingsClone = this.settingsClone;\r\n            let [left, right] = this._getLeftAndRightPartAroundTheSelection();\r\n            if (left === '' && right === '') {\r\n                settingsClone.trailingNegative = false;\r\n            }\r\n            // if changing the sign and left is equal to the number zero - prevents stripping the leading zeros\r\n            let stripZeros = true;\r\n            if (this.eventKeyCode === keyCode.Hyphen && Number(left) === 0) {\r\n                stripZeros = false;\r\n            }\r\n            left = stripAllNonNumberCharacters(left, this.settingsClone, stripZeros);\r\n            right = stripAllNonNumberCharacters(right, this.settingsClone, false);\r\n\r\n            if (settingsClone.trailingNegative && !isNegative(left)) {\r\n                left = '-' + left;\r\n                right = (right === '-') ? '' : right;\r\n                settingsClone.trailingNegative = false;\r\n            }\r\n\r\n            return [left, right];\r\n        }\r\n\r\n        /**\r\n         * Strip parts from excess characters and leading zeros.\r\n         *\r\n         * @param {string} left\r\n         * @param {string} right\r\n         * @returns {[*,*]}\r\n         * @private\r\n         */\r\n        _normalizeParts(left, right) {\r\n            const settingsClone = this.settingsClone;\r\n\r\n            // if changing the sign and left is equal to the number zero - prevents stripping the leading zeros\r\n            let stripZeros = true;\r\n            if (this.eventKeyCode === keyCode.Hyphen && Number(left) === 0) {\r\n                stripZeros = false;\r\n            }\r\n            left = stripAllNonNumberCharacters(left, settingsClone, stripZeros);\r\n\r\n            // If right is not empty and first character is not decimalCharacter\r\n            right = stripAllNonNumberCharacters(right, settingsClone, false);\r\n\r\n            // Prevents multiple leading zeros from being entered\r\n            if (settingsClone.leadingZero === 'deny' &&\r\n                (this.eventKeyCode === keyCode.num0 || this.eventKeyCode === keyCode.numpad0) &&\r\n                Number(left) === 0 &&\r\n                !contains(left, settingsClone.decimalCharacter)  && right !== '') {\r\n                left = left.substring(0, left.length - 1);\r\n            }\r\n\r\n            if (settingsClone.trailingNegative && !isNegative(left)) {\r\n                left = '-' + left;\r\n                settingsClone.trailingNegative = false;\r\n            }\r\n\r\n            // Insert zero if has leading dot\r\n            this.newValue = left + right;\r\n            if (settingsClone.decimalCharacter) {\r\n                const m = this.newValue.match(new RegExp(`^${settingsClone.aNegRegAutoStrip}\\\\${settingsClone.decimalCharacter}`));\r\n                if (m) {\r\n                    left = left.replace(m[1], m[1] + '0');\r\n                    this.newValue = left + right;\r\n                }\r\n            }\r\n\r\n            return [left, right];\r\n        }\r\n\r\n        /**\r\n         * Set part of number to value while keeping the cursor position. //TODO What about the cursor selection?\r\n         *\r\n         * @param {string} left\r\n         * @param {string} right\r\n         * @param {boolean} isPaste\r\n         * @returns {boolean}\r\n         * @private\r\n         */\r\n        _setValueParts(left, right, isPaste = false) {\r\n            const settingsClone = this.settingsClone;\r\n            const parts = this._normalizeParts(left, right);\r\n            const [minTest, maxTest] = checkIfInRangeWithOverrideOption(this.newValue, settingsClone);\r\n            let position = parts[0].length;\r\n            this.newValue = parts.join('');\r\n\r\n            if (minTest && maxTest) {\r\n                this.newValue = truncateDecimal(this.newValue, settingsClone, isPaste);\r\n                //TODO Check if we need to replace the hard-coded ',' with settings.decimalCharacter\r\n                const testValue = (contains(this.newValue, ',')) ? this.newValue.replace(',', '.') : this.newValue;\r\n                if (testValue === '' || testValue === settingsClone.negativeSignCharacter) {\r\n                    settingsClone.rawValue = (settingsClone.emptyInputBehavior === 'zero') ? '0' : '';\r\n                } else {\r\n                    settingsClone.rawValue = cleanLeadingTrailingZeros(testValue, settingsClone);\r\n                }\r\n\r\n                if (position > this.newValue.length) {\r\n                    position = this.newValue.length;\r\n                }\r\n\r\n                // Make sure when the user enter a '0' on the far left with a leading zero option set to 'deny', that the caret does not moves since the input is dropped (fix issue #283)\r\n                if (position === 1 && parts[0] === '0' && settingsClone.leadingZero === 'deny') {\r\n                    // If the user enter `0`, then the caret is put on the right side of it (Fix issue #299)\r\n                    if (parts[1] === '' || parts[0] === '0' && parts[1] !== '') {\r\n                        position = 1;\r\n                    } else {\r\n                        position = 0;\r\n                    }\r\n                }\r\n\r\n                this.value = this.newValue;\r\n                this._setCaretPosition(position, false);\r\n\r\n                return true;\r\n            }\r\n\r\n            if (!minTest) {\r\n                this.$that.trigger('autoNumeric:minExceeded');\r\n            } else if (!maxTest) {\r\n                this.$that.trigger('autoNumeric:maxExceeded');\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Helper function for `_expandSelectionOnSign()`.\r\n         *\r\n         * @returns {*} Sign position of a formatted value\r\n         * @private\r\n         */\r\n        _getSignPosition() {\r\n            const settingsClone = this.settingsClone;\r\n            const currencySymbol = settingsClone.currencySymbol;\r\n            const that = this.that;\r\n\r\n            if (currencySymbol) {\r\n                const currencySymbolLen = currencySymbol.length;\r\n                if (settingsClone.currencySymbolPlacement === 'p') {\r\n                    const hasNeg = settingsClone.negativeSignCharacter && that.value && that.value.charAt(0) === settingsClone.negativeSignCharacter;\r\n                    return hasNeg ? [1, currencySymbolLen + 1] : [0, currencySymbolLen];\r\n                }\r\n                const valueLen = that.value.length;\r\n                return [valueLen - currencySymbolLen, valueLen];\r\n            }\r\n\r\n            return [1000, -1];\r\n        }\r\n\r\n        /**\r\n         * Expands selection to cover whole sign\r\n         * Prevents partial deletion/copying/overwriting of a sign\r\n         *\r\n         * @param {undefined|boolean} setReal\r\n         * @private\r\n         */\r\n        _expandSelectionOnSign(setReal) {\r\n            //TODO Modify setReal to be more explicit (and a boolean only)\r\n            //TODO Use array destructuring here to set signPosition to more explicit variables\r\n            const signPosition = this._getSignPosition();\r\n            const selection = this.selection;\r\n\r\n            // If selection catches something except sign and catches only space from sign\r\n            if (selection.start < signPosition[1] && selection.end > signPosition[0]) {\r\n                // Then select without empty space\r\n                if ((selection.start < signPosition[0] || selection.end > signPosition[1]) && this.value.substring(Math.max(selection.start, signPosition[0]), Math.min(selection.end, signPosition[1])).match(/^\\s*$/)) {\r\n                    if (selection.start < signPosition[0]) {\r\n                        this._setSelection(selection.start, signPosition[0], setReal);\r\n                    } else {\r\n                        this._setSelection(signPosition[1], selection.end, setReal);\r\n                    }\r\n                } else {\r\n                    // Else select with whole sign\r\n                    this._setSelection(Math.min(selection.start, signPosition[0]), Math.max(selection.end, signPosition[1]), setReal);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Try to strip pasted value to digits\r\n         */\r\n        _checkPaste() {\r\n            if (!isUndefined(this.valuePartsBeforePaste)) {\r\n                const oldParts = this.valuePartsBeforePaste;\r\n                const [left, right] = this._getLeftAndRightPartAroundTheSelection();\r\n\r\n                // Try to strip the pasted value first\r\n                delete this.valuePartsBeforePaste;\r\n\r\n                const modifiedLeftPart = left.substr(0, oldParts[0].length) + stripAllNonNumberCharacters(left.substr(oldParts[0].length), this.settingsClone, true);\r\n                if (!this._setValueParts(modifiedLeftPart, right, true)) {\r\n                    this.value = oldParts.join('');\r\n                    this._setCaretPosition(oldParts[0].length, false);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Process pasting, cursor moving and skipping of not interesting keys.\r\n         * If this function returns TRUE, then further processing is not performed.\r\n         *\r\n         * @param {Event} e\r\n         * @returns {boolean}\r\n         * @private\r\n         */\r\n        _skipAlways(e) {\r\n            // Catch the ctrl up on ctrl-v\r\n            if (((e.ctrlKey || e.metaKey) && e.type === 'keyup' && !isUndefined(this.valuePartsBeforePaste)) || (e.shiftKey && this.eventKeyCode === keyCode.Insert)) {\r\n                //TODO Move this test inside the `onKeyup` handler\r\n                this._checkPaste();\r\n                return false;\r\n            }\r\n\r\n            // Skip all function keys (F1-F12), Windows keys, tab and other special keys\r\n            if ((this.eventKeyCode >= keyCode.F1 && this.eventKeyCode <= keyCode.F12) ||\r\n                (this.eventKeyCode >= keyCode.Windows && this.eventKeyCode <= keyCode.RightClick) ||\r\n                (this.eventKeyCode >= keyCode.Tab && this.eventKeyCode < keyCode.Space) ||\r\n                // `e.which` is sometimes different than `this.eventKeyCode` during the keypress event when entering a printable character key (ie. 't'). Also, `e.which` equals 0 for non-printable characters.\r\n                (this.eventKeyCode < keyCode.Backspace &&\r\n                (e.which === 0 || e.which === this.eventKeyCode)) ||\r\n                this.eventKeyCode === keyCode.NumLock ||\r\n                this.eventKeyCode === keyCode.ScrollLock ||\r\n                this.eventKeyCode === keyCode.Insert ||\r\n                this.eventKeyCode === keyCode.Command) {\r\n                return true;\r\n            }\r\n\r\n            // If a \"Select all\" keyboard shortcut is detected (ctrl + a)\r\n            if ((e.ctrlKey || e.metaKey) && this.eventKeyCode === keyCode.a) {\r\n                if (this.settings.selectNumberOnly) {\r\n                    // `preventDefault()` is used here to prevent the browser to first select all the input text (including the currency sign), otherwise we would see that whole selection first in a flash, then the selection with only the number part without the currency sign.\r\n                    e.preventDefault();\r\n                    const valueLen = this.that.value.length;\r\n                    const currencySymbolLen = this.settings.currencySymbol.length;\r\n                    const negLen = (!isNegative(this.that.value))?0:1;\r\n                    const suffixTextLen = this.settings.suffixText.length;\r\n                    const currencySymbolPlacement = this.settings.currencySymbolPlacement;\r\n                    const negativePositiveSignPlacement = this.settings.negativePositiveSignPlacement;\r\n\r\n                    let start;\r\n                    if (currencySymbolPlacement === 's') {\r\n                        start = 0;\r\n                    } else {\r\n                        start = (negativePositiveSignPlacement === 'l' && negLen === 1 && currencySymbolLen > 0)?currencySymbolLen + 1:currencySymbolLen;\r\n                    }\r\n\r\n                    let end;\r\n                    if (currencySymbolPlacement === 'p') {\r\n                        end = valueLen - suffixTextLen;\r\n                    } else {\r\n                        switch (negativePositiveSignPlacement) {\r\n                            case 'l':\r\n                                end = valueLen - (suffixTextLen + currencySymbolLen);\r\n                                break;\r\n                            case 'r':\r\n                                end = (currencySymbolLen > 0)?valueLen - (currencySymbolLen + negLen + suffixTextLen):valueLen - (currencySymbolLen + suffixTextLen);\r\n                                break;\r\n                            default :\r\n                                end = valueLen - (currencySymbolLen + suffixTextLen);\r\n                        }\r\n                    }\r\n\r\n                    setElementSelection(this.that, start, end);\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            // If a \"Copy\", \"Paste\" or \"Cut\" keyboard shortcut is detected (respectively 'ctrl + c', 'ctrl + v' or 'ctrl + x')\r\n            if ((e.ctrlKey || e.metaKey) && (this.eventKeyCode === keyCode.c || this.eventKeyCode === keyCode.v || this.eventKeyCode === keyCode.x)) {\r\n                if (e.type === 'keydown') {\r\n                    this._expandSelectionOnSign();\r\n                }\r\n\r\n                // Try to prevent wrong paste\r\n                if (this.eventKeyCode === keyCode.v || this.eventKeyCode === keyCode.Insert) {\r\n                    if (e.type === 'keydown' || e.type === 'keypress') {\r\n                        if (isUndefined(this.valuePartsBeforePaste)) {\r\n                            this.valuePartsBeforePaste = this._getLeftAndRightPartAroundTheSelection();\r\n                        }\r\n                    } else {\r\n                        this._checkPaste();\r\n                    }\r\n                }\r\n\r\n                return e.type === 'keydown' || e.type === 'keypress' || this.eventKeyCode === keyCode.c;\r\n            }\r\n\r\n            if (e.ctrlKey || e.metaKey) {\r\n                return true;\r\n            }\r\n\r\n            // Jump over thousand separator\r\n            //TODO Move this test inside the `onKeydown` handler\r\n            if (this.eventKeyCode === keyCode.LeftArrow || this.eventKeyCode === keyCode.RightArrow) {\r\n                if (e.type === 'keydown' && !e.shiftKey) {\r\n                    if (this.eventKeyCode === keyCode.LeftArrow &&\r\n                        (this.that.value.charAt(this.selection.start - 2) === this.settingsClone.digitGroupSeparator ||\r\n                        this.that.value.charAt(this.selection.start - 2) === this.settingsClone.decimalCharacter)) {\r\n                        this._setCaretPosition(this.selection.start - 1);\r\n                    } else if (this.eventKeyCode === keyCode.RightArrow &&\r\n                        (this.that.value.charAt(this.selection.start + 1) === this.settingsClone.digitGroupSeparator ||\r\n                        this.that.value.charAt(this.selection.start + 1) === this.settingsClone.decimalCharacter)) {\r\n                        this._setCaretPosition(this.selection.start + 1);\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n\r\n            return this.eventKeyCode >= keyCode.PageDown && this.eventKeyCode <= keyCode.DownArrow;\r\n        }\r\n\r\n        /**\r\n         * Process deletion of characters when the minus sign is to the right of the numeric characters.\r\n         *\r\n         * @param {string} left The part on the left of the caret or selection\r\n         * @param {string} right The part on the right of the caret or selection\r\n         * @returns {[string, string]}\r\n         * @private\r\n         */\r\n        _processCharacterDeletionIfTrailingNegativeSign([left, right]) {\r\n            const settingsClone = this.settingsClone;\r\n            if (settingsClone.currencySymbolPlacement === 'p' && settingsClone.negativePositiveSignPlacement === 's') {\r\n                if (this.eventKeyCode === keyCode.Backspace) {\r\n                    settingsClone.caretFix = (this.selection.start >= this.value.indexOf(settingsClone.suffixText) && settingsClone.suffixText !== '');\r\n                    if (this.value.charAt(this.selection.start - 1) === '-') {\r\n                        left = left.substring(1);\r\n                    } else if (this.selection.start <= this.value.length - settingsClone.suffixText.length) {\r\n                        left = left.substring(0, left.length - 1);\r\n                    }\r\n                } else {\r\n                    settingsClone.caretFix = (this.selection.start >= this.value.indexOf(settingsClone.suffixText) && settingsClone.suffixText !== '');\r\n                    if (this.selection.start >= this.value.indexOf(settingsClone.currencySymbol) + settingsClone.currencySymbol.length) {\r\n                        right = right.substring(1, right.length);\r\n                    }\r\n                    if (isNegative(left) && this.value.charAt(this.selection.start) === '-') {\r\n                        left = left.substring(1);\r\n                    }\r\n                }\r\n            }\r\n\r\n            //TODO Merge the two following 'if' blocks into one `if (settingsClone.currencySymbolPlacement === 's') {` and a switch on settingsClone.negativePositiveSignPlacement\r\n            if (settingsClone.currencySymbolPlacement === 's' && settingsClone.negativePositiveSignPlacement === 'l') {\r\n                settingsClone.caretFix = (this.selection.start >= this.value.indexOf(settingsClone.negativeSignCharacter) + settingsClone.negativeSignCharacter.length);\r\n                if (this.eventKeyCode === keyCode.Backspace) {\r\n                    if (this.selection.start === (this.value.indexOf(settingsClone.negativeSignCharacter) + settingsClone.negativeSignCharacter.length) && contains(this.value, settingsClone.negativeSignCharacter)) {\r\n                        left = left.substring(1);\r\n                    } else if (left !== '-' && ((this.selection.start <= this.value.indexOf(settingsClone.negativeSignCharacter)) || !contains(this.value, settingsClone.negativeSignCharacter))) {\r\n                        left = left.substring(0, left.length - 1);\r\n                    }\r\n                } else {\r\n                    if (left[0] === '-') {\r\n                        right = right.substring(1);\r\n                    }\r\n                    if (this.selection.start === this.value.indexOf(settingsClone.negativeSignCharacter) && contains(this.value, settingsClone.negativeSignCharacter)) {\r\n                        left = left.substring(1);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (settingsClone.currencySymbolPlacement === 's' && settingsClone.negativePositiveSignPlacement === 'r') {\r\n                settingsClone.caretFix = (this.selection.start >= this.value.indexOf(settingsClone.negativeSignCharacter) + settingsClone.negativeSignCharacter.length);\r\n                if (this.eventKeyCode === keyCode.Backspace) {\r\n                    if (this.selection.start === (this.value.indexOf(settingsClone.negativeSignCharacter) + settingsClone.negativeSignCharacter.length)) {\r\n                        left = left.substring(1);\r\n                    } else if (left !== '-' && this.selection.start <= (this.value.indexOf(settingsClone.negativeSignCharacter) - settingsClone.currencySymbol.length)) {\r\n                        left = left.substring(0, left.length - 1);\r\n                    } else if (left !== '' && !contains(this.value, settingsClone.negativeSignCharacter)) {\r\n                        left = left.substring(0, left.length - 1);\r\n                    }\r\n                } else {\r\n                    settingsClone.caretFix = (this.selection.start >= this.value.indexOf(settingsClone.currencySymbol) && settingsClone.currencySymbol !== '');\r\n                    if (this.selection.start === this.value.indexOf(settingsClone.negativeSignCharacter)) {\r\n                        left = left.substring(1);\r\n                    }\r\n                    right = right.substring(1);\r\n                }\r\n            }\r\n\r\n            return [left, right];\r\n        }\r\n\r\n        /**\r\n         * Process the deletion of characters.\r\n         */\r\n        _processCharacterDeletion() {\r\n            const settingsClone = this.settingsClone;\r\n\r\n            let left;\r\n            let right;\r\n\r\n            if (!this.selection.length) {\r\n                [left, right] = this._getUnformattedLeftAndRightPartAroundTheSelection();\r\n                if (left === '' && right === '') {\r\n                    settingsClone.throwInput = false;\r\n                }\r\n\r\n                if (((settingsClone.currencySymbolPlacement === 'p' && settingsClone.negativePositiveSignPlacement === 's') ||\r\n                    (settingsClone.currencySymbolPlacement === 's' && (settingsClone.negativePositiveSignPlacement === 'l' || settingsClone.negativePositiveSignPlacement === 'r'))) &&\r\n                    isNegative(this.value)) { //TODO Change `this.value` to `this.that.value`?\r\n                    [left, right] = this._processCharacterDeletionIfTrailingNegativeSign([left, right]);\r\n                } else {\r\n                    if (this.eventKeyCode === keyCode.Backspace) {\r\n                        left = left.substring(0, left.length - 1);\r\n                    } else {\r\n                        right = right.substring(1, right.length);\r\n                    }\r\n                }\r\n            } else {\r\n                this._expandSelectionOnSign(false);\r\n                [left, right] = this._getUnformattedLeftAndRightPartAroundTheSelection();\r\n            }\r\n\r\n            this._setValueParts(left, right);\r\n        }\r\n\r\n        /**\r\n         * This function decides if the key pressed should be dropped or accepted, and modify the value 'on-the-fly' accordingly.\r\n         * Returns TRUE if the keycode is allowed.\r\n         * This functions also modify the value on-the-fly. //FIXME This should use another function in order to separate the test and the modification\r\n         *\r\n         * @param {Event|string} eventOrChar The event object, or the character entered (from an android device)\r\n         * @returns {boolean}\r\n         */\r\n        _processCharacterInsertion(eventOrChar) {\r\n            const settingsClone = this.settingsClone;\r\n            let [left, right] = this._getUnformattedLeftAndRightPartAroundTheSelection();\r\n\r\n            let eventCharacter;\r\n            if (isString(eventOrChar)) {\r\n                // Android browsers\r\n                eventCharacter = eventOrChar;\r\n            } else {\r\n                // Normal browsers\r\n                settingsClone.throwInput = true;\r\n\r\n                // Retrieve the real character that has been entered (ie. 'a' instead of the key code)\r\n                eventCharacter = character(eventOrChar);\r\n            }\r\n\r\n            // Start rules when the decimal character key is pressed always use numeric pad dot to insert decimal separator\r\n            // Do not allow decimal character if no decimal part allowed\r\n            if (eventCharacter === settingsClone.decimalCharacter ||\r\n                (settingsClone.decimalCharacterAlternative && eventCharacter === settingsClone.decimalCharacterAlternative) ||\r\n                ((eventCharacter === '.' || eventCharacter === ',') && this.eventKeyCode === keyCode.DotNumpad)) {\r\n                if (!settingsClone.decimalPlacesOverride || !settingsClone.decimalCharacter) {\r\n                    return true;\r\n                }\r\n\r\n                // Do not allow decimal character before negativeSignCharacter character\r\n                if (settingsClone.negativeSignCharacter && contains(right, settingsClone.negativeSignCharacter)) {\r\n                    return true;\r\n                }\r\n\r\n                // Do not allow decimal character if other decimal character present\r\n                if (contains(left, settingsClone.decimalCharacter)) {\r\n                    return true;\r\n                }\r\n\r\n                if (right.indexOf(settingsClone.decimalCharacter) > 0) {\r\n                    return true;\r\n                }\r\n\r\n                if (right.indexOf(settingsClone.decimalCharacter) === 0) {\r\n                    right = right.substr(1);\r\n                }\r\n\r\n                this._setValueParts(left + settingsClone.decimalCharacter, right);\r\n\r\n                return true;\r\n            }\r\n\r\n            // Prevent minus if not allowed\r\n            if ((eventCharacter === '-' || eventCharacter === '+') && settingsClone.negativeSignCharacter === '-') {\r\n                if (!settingsClone) {\r\n                    return true;\r\n                }\r\n\r\n                // Caret is always after minus\r\n                if ((settingsClone.currencySymbolPlacement === 'p' && settingsClone.negativePositiveSignPlacement === 's') || (settingsClone.currencySymbolPlacement === 's' && settingsClone.negativePositiveSignPlacement !== 'p')) {\r\n                    if (left === '' && contains(right, settingsClone.negativeSignCharacter)) {\r\n                        left = settingsClone.negativeSignCharacter;\r\n                        right = right.substring(1, right.length);\r\n                    }\r\n\r\n                    // Change number sign, remove part if should\r\n                    if (isNegativeStrict(left) || contains(left, settingsClone.negativeSignCharacter)) {\r\n                        left = left.substring(1, left.length);\r\n                    } else {\r\n                        left = (eventCharacter === '-') ? settingsClone.negativeSignCharacter + left : left;\r\n                    }\r\n                } else {\r\n                    if (left === '' && contains(right, settingsClone.negativeSignCharacter)) {\r\n                        left = settingsClone.negativeSignCharacter;\r\n                        right = right.substring(1, right.length);\r\n                    }\r\n\r\n                    // Change number sign, remove part if should\r\n                    if (left.charAt(0) === settingsClone.negativeSignCharacter) {\r\n                        left = left.substring(1, left.length);\r\n                    } else {\r\n                        left = (eventCharacter === '-') ? settingsClone.negativeSignCharacter + left : left;\r\n                    }\r\n                }\r\n\r\n                this._setValueParts(left, right);\r\n\r\n                return true;\r\n            }\r\n\r\n            // If the user tries to insert digit before minus sign\r\n            const eventNumber = Number(eventCharacter);\r\n            if (eventNumber >= 0 && eventNumber <= 9) {\r\n                if (settingsClone.negativeSignCharacter && left === '' && contains(right, settingsClone.negativeSignCharacter)) {\r\n                    left = settingsClone.negativeSignCharacter;\r\n                    right = right.substring(1, right.length);\r\n                }\r\n\r\n                if (settingsClone.maximumValue <= 0 && settingsClone.minimumValue < settingsClone.maximumValue && !contains(this.value, settingsClone.negativeSignCharacter) && eventCharacter !== '0') {\r\n                    left = settingsClone.negativeSignCharacter + left;\r\n                }\r\n\r\n                this._setValueParts(left + eventCharacter, right);\r\n\r\n                return true;\r\n            }\r\n\r\n            // Prevent any other character\r\n            settingsClone.throwInput = false;\r\n\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Formatting of just processed value while keeping the cursor position\r\n         *\r\n         * @param {Event} e\r\n         * @private\r\n         */\r\n        _formatValue(e) {\r\n            const settingsClone = this.settingsClone;\r\n            const leftLength = this.value;\r\n            let [left] = this._getUnformattedLeftAndRightPartAroundTheSelection();\r\n\r\n            // No grouping separator and no currency sign\r\n            if ((settingsClone.digitGroupSeparator  === '' || (settingsClone.digitGroupSeparator !== ''  && !contains(leftLength, settingsClone.digitGroupSeparator))) &&\r\n                (settingsClone.currencySymbol === '' || (settingsClone.currencySymbol !== '' && !contains(leftLength, settingsClone.currencySymbol)))) {\r\n                let [subParts] = leftLength.split(settingsClone.decimalCharacter);\r\n                let nSign = '';\r\n                if (isNegative(subParts)) {\r\n                    nSign = '-';\r\n                    subParts = subParts.replace('-', '');\r\n                    left = left.replace('-', '');\r\n                }\r\n\r\n                // Strip leading zero on positive value if needed\r\n                if (nSign === '' && subParts.length > settingsClone.mIntPos && left.charAt(0) === '0') {\r\n                    left = left.slice(1);\r\n                }\r\n\r\n                // Strip leading zero on negative value if needed\r\n                if (nSign === '-' && subParts.length > settingsClone.mIntNeg && left.charAt(0) === '0') {\r\n                    left = left.slice(1);\r\n                }\r\n\r\n                left = nSign + left;\r\n            }\r\n\r\n            const value = addGroupSeparators(this.value, this.settingsClone);\r\n            let position = value.length;\r\n            if (value) {\r\n                // Prepare regexp which searches for cursor position from unformatted left part\r\n                const leftAr = left.split('');\r\n\r\n                // Fixes caret position with trailing minus sign\r\n                if ((settingsClone.negativePositiveSignPlacement === 's' || (settingsClone.currencySymbolPlacement === 's' && settingsClone.negativePositiveSignPlacement !== 'p')) &&\r\n                    leftAr[0] === '-' && settingsClone.negativeSignCharacter !== '') {\r\n                    leftAr.shift();\r\n\r\n                    if ((this.eventKeyCode === keyCode.Backspace || this.eventKeyCode === keyCode.Delete) &&\r\n                        settingsClone.caretFix) {\r\n                        if (settingsClone.currencySymbolPlacement === 's' && settingsClone.negativePositiveSignPlacement === 'l') {\r\n                            leftAr.push('-');\r\n                            settingsClone.caretFix = e.type === 'keydown';\r\n                        }\r\n\r\n                        if (settingsClone.currencySymbolPlacement === 'p' && settingsClone.negativePositiveSignPlacement === 's') {\r\n                            leftAr.push('-');\r\n                            settingsClone.caretFix = e.type === 'keydown';\r\n                        }\r\n\r\n                        if (settingsClone.currencySymbolPlacement === 's' && settingsClone.negativePositiveSignPlacement === 'r') {\r\n                            const signParts = settingsClone.currencySymbol.split('');\r\n                            const escapeChr = ['\\\\', '^', '$', '.', '|', '?', '*', '+', '(', ')', '['];\r\n                            const escapedParts = [];\r\n                            $.each(signParts, (i, miniParts) => {\r\n                                miniParts = signParts[i];\r\n                                if (isInArray(miniParts, escapeChr)) {\r\n                                    escapedParts.push('\\\\' + miniParts);\r\n                                } else {\r\n                                    escapedParts.push(miniParts);\r\n                                }\r\n                            });\r\n\r\n                            if (this.eventKeyCode === keyCode.Backspace) {\r\n                                escapedParts.push('-');\r\n                            }\r\n\r\n                            // Pushing the escaped sign\r\n                            leftAr.push(escapedParts.join(''));\r\n                            settingsClone.caretFix = e.type === 'keydown';\r\n                        }\r\n                    }\r\n                }\r\n\r\n                for (let i = 0; i < leftAr.length; i++) {\r\n                    if (!leftAr[i].match('\\\\d')) {\r\n                        leftAr[i] = '\\\\' + leftAr[i];\r\n                    }\r\n                }\r\n\r\n                const leftReg = new RegExp('^.*?' + leftAr.join('.*?'));\r\n\r\n                // Search cursor position in formatted value\r\n                const newLeft = value.match(leftReg);\r\n                if (newLeft) {\r\n                    position = newLeft[0].length;\r\n\r\n                    // If the positive sign is shown, calculate the caret position accordingly\r\n                    if (settingsClone.showPositiveSign) {\r\n                        if (position === 0 && newLeft.input.charAt(0) === settingsClone.positiveSignCharacter) {\r\n                            position = (newLeft.input.indexOf(settingsClone.currencySymbol) === 1) ? settingsClone.currencySymbol.length + 1 : 1;\r\n                        }\r\n\r\n                        if (position === 0 && newLeft.input.charAt(settingsClone.currencySymbol.length) === settingsClone.positiveSignCharacter) {\r\n                            position = settingsClone.currencySymbol.length + 1;\r\n                        }\r\n                    }\r\n\r\n                    // If we are just before the sign which is in prefix position\r\n                    if (((position === 0 && value.charAt(0) !== settingsClone.negativeSignCharacter) || (position === 1 && value.charAt(0) === settingsClone.negativeSignCharacter)) && settingsClone.currencySymbol && settingsClone.currencySymbolPlacement === 'p') {\r\n                        // Place caret after prefix sign\r\n                        //TODO Should the test be 'isNegative' instead of 'isNegativeStrict' in order to search for '-' everywhere in the string?\r\n                        position = this.settingsClone.currencySymbol.length + (isNegativeStrict(value) ? 1 : 0);\r\n                    }\r\n                } else {\r\n                    if (settingsClone.currencySymbol && settingsClone.currencySymbolPlacement === 's') {\r\n                        // If we could not find a place for cursor and have a sign as a suffix\r\n                        // Place caret before suffix currency sign\r\n                        position -= settingsClone.currencySymbol.length;\r\n                    }\r\n\r\n                    if (settingsClone.suffixText) {\r\n                        // If we could not find a place for cursor and have a suffix\r\n                        // Place caret before suffix\r\n                        position -= settingsClone.suffixText.length;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Only update the value if it has changed. This prevents modifying the selection, if any.\r\n            if (value !== this.that.value ||\r\n                value === this.that.value && (this.eventKeyCode === keyCode.num0 || this.eventKeyCode === keyCode.numpad0)) {\r\n                this.that.value = value;\r\n                this._setCaretPosition(position);\r\n            }\r\n\r\n            if (settingsClone.androidSelectionStart !== null) {\r\n                // If an Android browser is detected, fix the caret position\r\n                // Unfortunately this does not fix all android browsers, only Android Chrome currently.\r\n                // This is due to the fact those provide different order of events and/or keycodes thrown (this is a real mess :|).\r\n                this._setCaretPosition(settingsClone.androidSelectionStart);\r\n            }\r\n\r\n            this.formatted = true; //TODO Rename `this.formatted` to `this._formatExecuted`, since it's possible this function does not need to format anything (in the case where the keycode is dropped for instance)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function factorise the `getString()` and `getArray()` functions since they share quite a lot of code.\r\n     *\r\n     * The \"getString\" method uses jQuery's .serialize() method that creates a text string in standard URL-encoded notation.\r\n     * The \"getArray\" method on the other hand uses jQuery's .serializeArray() method that creates array or objects that can be encoded as a JSON string.\r\n     *\r\n     * It then loops through the string and un-formats the inputs with autoNumeric.\r\n     * By defaults values returned as ISO numeric string \"1234.56\" or \"-1234.56\" where the decimal character is a period\r\n     * Locale formats are supported \"1234.56-\" or \"1234,56\" or \"-1234,56 or \"1234,56-\", or even plain numbers => please see option \"outputFormat\" for more details\r\n     *\r\n     * @param {boolean} getArrayBehavior - If set to TRUE, then this function behave like `getArray()`, otherwise if set to FALSE, it behave like `getString()`\r\n     * @param {HTMLElement} that - A reference to the current DOM element\r\n     * @returns {*}\r\n     * @private\r\n     */\r\n    function _getStringOrArray(getArrayBehavior = true, that) {\r\n        const $this = getCurrentElement(that);\r\n        const formIndex = $('form').index($this);\r\n        const allFormElements = $(`form:eq(${formIndex})`)[0];\r\n        const aiIndex = [];\r\n\r\n        // all input index\r\n        const scIndex = [];\r\n\r\n        // successful control index\r\n        const rSubmitterTypes = /^(?:submit|button|image|reset|file)$/i;\r\n\r\n        // from jQuery serialize method\r\n        const rSubmittable = /^(?:input|select|textarea|keygen)/i;\r\n\r\n        // from jQuery serialize method\r\n        const rCheckableType = /^(?:checkbox|radio)$/i;\r\n        const rNonAutoNumericTypes = /^(?:button|checkbox|color|date|datetime|datetime-local|email|file|image|month|number|password|radio|range|reset|search|submit|time|url|week)/i;\r\n\r\n        let count = 0;\r\n\r\n        // index of successful elements\r\n        $.each(allFormElements, (i, field) => {\r\n            if (field.name !== '' && rSubmittable.test(field.localName) && !rSubmitterTypes.test(field.type) && !field.disabled && (field.checked || !rCheckableType.test(field.type))) {\r\n                scIndex.push(count);\r\n                count++;\r\n            } else {\r\n                scIndex.push(-1);\r\n            }\r\n        });\r\n\r\n        // index of all inputs tags except checkbox\r\n        count = 0;\r\n        $.each(allFormElements, (i, field) => {\r\n            if (field.localName === 'input' && (field.type === '' || field.type === 'text' || field.type === 'hidden' || field.type === 'tel')) {\r\n                aiIndex.push(count);\r\n                count++;\r\n            } else {\r\n                aiIndex.push(-1);\r\n                if (field.localName === 'input' && rNonAutoNumericTypes.test(field.type)) {\r\n                    count++;\r\n                }\r\n            }\r\n        });\r\n\r\n        if (getArrayBehavior) {\r\n            const formFields = $this.serializeArray();\r\n\r\n            $.each(formFields, (i, field) => {\r\n                const scElement = scIndex.indexOf(i);\r\n\r\n                if (scElement > -1 && aiIndex[scElement] > -1) {\r\n                    const testInput = $(`form:eq(${formIndex}) input:eq(${aiIndex[scElement]})`);\r\n                    const settings = testInput.data('autoNumeric');\r\n\r\n                    if (typeof settings === 'object') {\r\n                        field.value = testInput.autoNumeric('getLocalized').toString();\r\n                    }\r\n                }\r\n            });\r\n\r\n            return formFields;\r\n        }\r\n        else {\r\n            // getString() behavior\r\n            const formFields = $this.serialize();\r\n            const formParts = formFields.split('&');\r\n\r\n            $.each(formParts, i => {\r\n                const [inputName, inputValue] = formParts[i].split('=');\r\n                const scElement = scIndex.indexOf(i);\r\n\r\n                // If the current element is a valid element\r\n                if (scElement > -1 && aiIndex[scElement] > -1) {\r\n                    const testInput = $(`form:eq(${formIndex}) input:eq(${aiIndex[scElement]})`);\r\n                    const settings = testInput.data('autoNumeric');\r\n\r\n                    if (typeof settings === 'object') {\r\n                        if (inputValue !== null) {\r\n                            const modifiedInputValue = testInput.autoNumeric('getLocalized').toString();\r\n                            formParts[i] = `${inputName}=${modifiedInputValue}`;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n            return formParts.join('&');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handler for 'focusin' events\r\n     *\r\n     * @param {object} $this jQuery-selected DOM element\r\n     * @param {AutoNumericHolder} holder\r\n     * @param {Event} e\r\n     */\r\n    function onFocusInAndMouseEnter($this, holder, e) {\r\n        const settings = holder.settingsClone;\r\n\r\n        if (e.type === 'focusin' || e.type === 'mouseenter' && !$this.is(':focus') && settings.emptyInputBehavior === 'focus') {\r\n            settings.hasFocus = true;\r\n\r\n            if (settings.negativeBracketsTypeOnBlur !== null && settings.negativeSignCharacter !== '') {\r\n                jQueryOriginalVal.call($this, toggleNegativeBracket(e.target.value, settings));\r\n            }\r\n\r\n            // clean the value to compare to rawValue\r\n            let result = stripAllNonNumberCharacters(e.target.value, settings, true);\r\n            result = convertToNumericString(result, settings);\r\n            result = cleanLeadingTrailingZeros(result, settings);\r\n            if (settings.trailingNegative) {\r\n                result = '-' + result;\r\n            }\r\n\r\n            let roundedValue;\r\n            if (settings.decimalPlacesShownOnFocus) {\r\n                settings.decimalPlacesOverride = settings.decimalPlacesShownOnFocus;\r\n                roundedValue = roundValue(settings.rawValue, settings);\r\n                jQueryOriginalVal.call($this, addGroupSeparators(roundedValue, settings));\r\n            } else if (settings.scaleDivisor) {\r\n                settings.decimalPlacesOverride = Number(settings.oDec);\r\n                roundedValue = roundValue(settings.rawValue, settings);\r\n                jQueryOriginalVal.call($this, addGroupSeparators(roundedValue, settings));\r\n            } else if (settings.noSeparatorOnFocus) {\r\n                settings.digitGroupSeparator = '';\r\n                settings.currencySymbol = '';\r\n                settings.suffixText = '';\r\n                roundedValue = roundValue(settings.rawValue, settings);\r\n                jQueryOriginalVal.call($this, addGroupSeparators(roundedValue, settings));\r\n            } else if (result !== settings.rawValue) {\r\n                // updates the rawValue\r\n                $this.autoNumeric('set', result);\r\n            }\r\n\r\n            // In order to send a 'native' change event when blurring the input, we need to first store the initial input value on focus.\r\n            holder.valueOnFocus = e.target.value;\r\n            holder.lastVal = holder.valueOnFocus;\r\n            const onEmpty = checkEmpty(holder.valueOnFocus, settings, true);\r\n            if ((onEmpty !== null && onEmpty !== '') && settings.emptyInputBehavior === 'focus') {\r\n                jQueryOriginalVal.call($this, onEmpty);\r\n                if (onEmpty === settings.currencySymbol && settings.currencySymbolPlacement === 's') {\r\n                    setElementSelection(e.target, 0, 0);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handler for 'keydown' events.\r\n     * The user just started pushing any key, hence one event is sent.\r\n     *\r\n     * Note :\r\n     * By default a 'normal' input output those events in the right order when inputting a character key (ie. 'a') :\r\n     * - keydown\r\n     * - keypress\r\n     * - input\r\n     * - keyup\r\n     *\r\n     * ...when inputting a modifier key (ie. 'ctrl') :\r\n     * - keydown\r\n     * - keyup\r\n     *\r\n     * If 'delete' or 'backspace' is entered, the following events are sent :\r\n     * - keydown\r\n     * - input\r\n     * - keyup\r\n     *\r\n     * If 'enter' is entered and the value has not changed, the following events are sent :\r\n     * - keydown\r\n     * - keypress\r\n     * - keyup\r\n     *\r\n     * If 'enter' is entered and the value has been changed, the following events are sent :\r\n     * - keydown\r\n     * - keypress\r\n     * - change\r\n     * - keyup\r\n     *\r\n     * When a paste is done, the following events are sent :\r\n     * - input (if paste is done with the mouse)\r\n     *\r\n     * - keydown (if paste is done with ctrl+v)\r\n     * - keydown\r\n     * - input\r\n     * - keyup\r\n     * - keyup\r\n     *\r\n     * @param {AutoNumericHolder} holder\r\n     * @param {Event} e\r\n     */\r\n    function onKeydown(holder, e) {\r\n        //TODO Create a function that retrieve the element value (either by using `e.target.value` when the element is an <input>, or by using `element.textContent` when the element as its `contenteditable` set to true)\r\n        holder._updateAutoNumericHolderEventKeycode(e);\r\n        holder.initialValueOnKeydown = e.target.value; // This is needed in `onKeyup()` to check if the value as changed during the key press\r\n\r\n        if (holder.that.readOnly) {\r\n            holder.processed = true;\r\n\r\n            return;\r\n        }\r\n\r\n        // The \"enter\" key throws a `change` event if the value has changed since the `focus` event\r\n        if (holder.eventKeyCode === keyCode.Enter && holder.valueOnFocus !== e.target.value) {\r\n            triggerEvent('change', e.target);\r\n            holder.valueOnFocus = e.target.value;\r\n        }\r\n\r\n        holder._updateAutoNumericHolderProperties(e);\r\n\r\n        if (holder._skipAlways(e)) {\r\n            holder.processed = true;\r\n\r\n            return;\r\n        }\r\n\r\n        // Check if the key is a delete/backspace key\r\n        if (holder.eventKeyCode === keyCode.Backspace || holder.eventKeyCode === keyCode.Delete) {\r\n            holder._processCharacterDeletion(); // Because backspace and delete only triggers keydown and keyup events, not keypress\r\n            holder.processed = true;\r\n            holder._formatValue(e);\r\n\r\n            // If and only if the resulting value has changed after that backspace/delete, then we have to send an 'input' event like browsers normally do.\r\n            if ((e.target.value !== holder.lastVal) && holder.settingsClone.throwInput) {\r\n                // Throw an input event when a character deletion is detected\r\n                triggerEvent('input', e.target);\r\n                e.preventDefault(); // ...and immediately prevent the browser to delete a second character\r\n            }\r\n\r\n            holder.lastVal = e.target.value;\r\n            holder.settingsClone.throwInput = true;\r\n\r\n            return;\r\n        }\r\n\r\n        holder.formatted = false; //TODO Is this line needed?\r\n    }\r\n\r\n    /**\r\n     * Handler for 'keypress' events.\r\n     * The user is still pressing the key, which will output a character (ie. '2') continuously until it releases the key.\r\n     * Note: 'keypress' events are not sent for delete keys like Backspace/Delete.\r\n     *\r\n     * @param {AutoNumericHolder} holder\r\n     * @param {Event} e\r\n     */\r\n    function onKeypress(holder, e) {\r\n        // Retrieve the real character that has been entered (ie. 'a' instead of the key code)\r\n        const eventCharacter = character(e);\r\n\r\n        // Firefox generate a 'keypress' event (e.keyCode === 0) for the keys that do not print a character (ie. 'Insert', 'Delete', 'Fn' keys, 'PageUp', 'PageDown' etc.). 'Shift' on the other hand does not generate a keypress event.\r\n        if (eventCharacter === keyName.Insert) {\r\n            return;\r\n        }\r\n\r\n        const processed = holder.processed;\r\n        holder._updateAutoNumericHolderProperties(e);\r\n\r\n        if (holder._skipAlways(e)) {\r\n            return;\r\n        }\r\n\r\n        if (processed) {\r\n            e.preventDefault();\r\n\r\n            return;\r\n        }\r\n\r\n        const isCharacterInsertionAllowed = holder._processCharacterInsertion(e);\r\n        if (isCharacterInsertionAllowed) {\r\n            holder._formatValue(e);\r\n            if ((e.target.value !== holder.lastVal) && holder.settingsClone.throwInput) {\r\n                // Throws input event on adding a character\r\n                triggerEvent('input', e.target);\r\n                e.preventDefault(); // ...and immediately prevent the browser to add a second character\r\n            }\r\n            else {\r\n                if ((eventCharacter === holder.settings.decimalCharacter || eventCharacter === holder.settings.decimalCharacterAlternative) &&\r\n                    (getElementSelection(e.target).start === getElementSelection(e.target).end) &&\r\n                    getElementSelection(e.target).start === e.target.value.indexOf(holder.settings.decimalCharacter)) {\r\n                    const position = getElementSelection(e.target).start + 1;\r\n                    setElementSelection(e.target, position, position);\r\n                }\r\n                e.preventDefault();\r\n            }\r\n\r\n            holder.lastVal = e.target.value;\r\n            holder.settingsClone.throwInput = true;\r\n\r\n            return;\r\n        }\r\n\r\n        e.preventDefault();\r\n\r\n        holder.formatted = false;\r\n    }\r\n\r\n    /**\r\n     * Handler for 'input' events.\r\n     * added to support android devices with mobile chrome browsers and others\r\n     * Has the potential to replace the keypress event.\r\n     *\r\n     * @param {AutoNumericHolder} holder\r\n     * @param {Event} e\r\n     */\r\n    function onInput(holder, e) {\r\n        const value = e.target.value;\r\n\r\n        // Fix the caret position on keyup in the `_formatValue()` function\r\n        holder.settings.androidSelectionStart = null;\r\n\r\n        if (holder.eventKeyCode === keyCode.AndroidDefault) {\r\n            // The keyCode is equal to the default Android Chrome one (which is always equal to `keyCode.AndroidDefault`)\r\n            if (value.length > holder.lastVal.length || value.length >= holder.lastVal.length - holder.selection.length) {\r\n                // Determine the keycode of the character that was entered, and overwrite the faulty `eventKeyCode` info with it\r\n                holder.eventKeyCode = value.charCodeAt(holder.selection.start);\r\n\r\n                // Capture the actual character entered\r\n                const androidCharEntered = value.charAt(holder.selection.start);\r\n\r\n                // Check if the given character should be inserted, and if so, do insert it into the current element value\r\n                const isCharacterInsertionAllowed = holder._processCharacterInsertion(androidCharEntered);\r\n\r\n                if (isCharacterInsertionAllowed) {\r\n                    // Allowed character entered (number, decimal or plus/minus sign)\r\n                    holder._formatValue(e);\r\n\r\n                    // Capture the new caret position. This is required because on keyup, `_updateAutoNumericHolderEventKeycode()` captures the old caret position\r\n                    //TODO Check if this is an Android bug or an autoNumeric one\r\n                    holder.settings.androidSelectionStart = holder.selection.start;\r\n\r\n                    const decimalCharacterPosition = e.target.value.indexOf(holder.settings.decimalCharacter);\r\n                    const hasDecimalCharacter = decimalCharacterPosition === -1;\r\n\r\n                    // Move the caret to the right if the `androidCharEntered` is the decimal character or if it's on the left of the caret position\r\n                    if (androidCharEntered === holder.settings.decimalCharacter ||\r\n                        !hasDecimalCharacter && decimalCharacterPosition < holder.settings.androidSelectionStart) {\r\n                        holder.settings.androidSelectionStart = holder.selection.start + 1;\r\n                    }\r\n\r\n                    if (e.target.value.length > value.length) {\r\n                        // Position the caret right now before the 'keyup' event in order to prevent the caret from jumping around\r\n                        setElementSelection(e.target, holder.settings.androidSelectionStart, holder.settings.androidSelectionStart);\r\n                    }\r\n\r\n                    holder.lastVal = e.target.value;\r\n\r\n                    return;\r\n                } else {\r\n                    // The entered character is not allowed ; overwrite the new invalid value with the previous valid one, and set back the caret/selection\r\n                    e.target.value = holder.lastVal;\r\n                    setElementSelection(e.target, holder.selection.start, holder.selection.end);\r\n                    holder.settings.androidSelectionStart = holder.selection.start;\r\n                }\r\n\r\n                e.preventDefault(); //FIXME How does that affects the normal trigger of the input event?\r\n\r\n                holder.formatted = false;\r\n            } else {\r\n                // Character deleted\r\n                //TODO What about the `Delete` key?\r\n                holder.eventKeyCode = keyCode.Backspace;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handler for 'keyup' events.\r\n     * The user just released any key, hence one event is sent.\r\n     *\r\n     * @param {AutoNumericHolder} holder\r\n     * @param {object} settings\r\n     * @param {Event} e\r\n     */\r\n    function onKeyup(holder, settings, e) {\r\n        holder._updateAutoNumericHolderProperties(e);\r\n\r\n        const skip = holder._skipAlways(e);\r\n        delete holder.valuePartsBeforePaste;\r\n        const isOnAndroid = holder.settingsClone.androidSelectionStart !== null;\r\n        if (skip && !isOnAndroid || e.target.value === '') {\r\n            return;\r\n        }\r\n\r\n        // Added to properly place the caret when only the currency sign is present\r\n        if (e.target.value === holder.settingsClone.currencySymbol) {\r\n            if (holder.settingsClone.currencySymbolPlacement === 's') {\r\n                setElementSelection(e.target, 0, 0);\r\n            } else {\r\n                setElementSelection(e.target, holder.settingsClone.currencySymbol.length, holder.settingsClone.currencySymbol.length);\r\n            }\r\n        } else if (holder.eventKeyCode === keyCode.Tab) {\r\n            setElementSelection(e.target, 0, e.target.value.length);\r\n        }\r\n\r\n        if ((e.target.value === holder.settingsClone.suffixText) ||\r\n            (holder.settingsClone.rawValue === '' && holder.settingsClone.currencySymbol !== '' && holder.settingsClone.suffixText !== '')) {\r\n            setElementSelection(e.target, 0, 0);\r\n        }\r\n\r\n        // Saves the extended decimal to preserve the data when navigating away from the page\r\n        if (holder.settingsClone.decimalPlacesShownOnFocus !== null && holder.settingsClone.saveValueToSessionStorage) {\r\n            saveValueToPersistentStorage(e.target, settings, 'set');\r\n        }\r\n\r\n        if (!holder.formatted) {\r\n            holder._formatValue(e);\r\n        }\r\n\r\n        // If the input value has changed during the key press event chain, an event is sent to alert that a formatting has been done (cf. Issue #187)\r\n        if (e.target.value !== holder.initialValueOnKeydown) {\r\n            triggerEvent('autoNumeric:formatted', e.target);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handler for 'focusout' events\r\n     *\r\n     * @param {object} $this jQuery-selected DOM element\r\n     * @param {AutoNumericHolder} holder\r\n     * @param {Event} e\r\n     */\r\n    function onFocusOutAndMouseLeave($this, holder, e) {\r\n        if (!$this.is(':focus')) {\r\n            let value = e.target.value;\r\n            const origValue = value;\r\n            const settings = holder.settingsClone;\r\n            settings.hasFocus = false;\r\n\r\n            if (settings.saveValueToSessionStorage) {\r\n                saveValueToPersistentStorage(e.target, settings, 'set');\r\n            }\r\n\r\n            if (settings.noSeparatorOnFocus === true) {\r\n                settings.digitGroupSeparator = settings.oSep;\r\n                settings.currencySymbol = settings.oSign;\r\n                settings.suffixText = settings.oSuffix;\r\n            }\r\n\r\n            if (settings.decimalPlacesShownOnFocus !== null) {\r\n                settings.decimalPlacesOverride = settings.oDec;\r\n                settings.allowDecimalPadding = settings.oPad;\r\n                settings.negativeBracketsTypeOnBlur = settings.oBracket;\r\n            }\r\n\r\n            value = stripAllNonNumberCharacters(value, settings, true);\r\n\r\n            if (value !== '') {\r\n                if (settings.trailingNegative && !isNegative(value)) {\r\n                    value = '-' + value;\r\n                    settings.trailingNegative = false;\r\n                }\r\n\r\n                const [minTest, maxTest] = checkIfInRangeWithOverrideOption(value, settings);\r\n                if (checkEmpty(value, settings, false) === null && minTest && maxTest) {\r\n                    value = modifyNegativeSignAndDecimalCharacterForRawValue(value, settings);\r\n                    settings.rawValue = cleanLeadingTrailingZeros(value, settings);\r\n\r\n                    if (settings.scaleDivisor) {\r\n                        value = value / settings.scaleDivisor;\r\n                        value = value.toString();\r\n                    }\r\n\r\n                    settings.decimalPlacesOverride = (settings.scaleDivisor && settings.scaleDecimalPlaces) ? Number(settings.scaleDecimalPlaces) : settings.decimalPlacesOverride;\r\n                    value = roundValue(value, settings);\r\n                    value = modifyNegativeSignAndDecimalCharacterForFormattedValue(value, settings);\r\n                } else {\r\n                    if (!minTest) {\r\n                        $this.trigger('autoNumeric:minExceeded');\r\n                    }\r\n                    if (!maxTest) {\r\n                        $this.trigger('autoNumeric:maxExceeded');\r\n                    }\r\n\r\n                    value = settings.rawValue;\r\n                }\r\n            } else {\r\n                if (settings.emptyInputBehavior === 'zero') {\r\n                    settings.rawValue = '0';\r\n                    value = roundValue('0', settings);\r\n                } else {\r\n                    settings.rawValue = '';\r\n                }\r\n            }\r\n\r\n            let groupedValue = checkEmpty(value, settings, false);\r\n            if (groupedValue === null) {\r\n                groupedValue = addGroupSeparators(value, settings);\r\n            }\r\n\r\n            if (groupedValue !== origValue) {\r\n                groupedValue = (settings.scaleSymbol) ? groupedValue + settings.scaleSymbol : groupedValue;\r\n                jQueryOriginalVal.call($this, groupedValue);\r\n            }\r\n\r\n            if (groupedValue !== holder.valueOnFocus) {\r\n                $this.change();\r\n                delete holder.valueOnFocus;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handler for 'paste' events\r\n     *\r\n     * @param {object} $this jQuery-selected DOM element\r\n     * @param {AutoNumericHolder} holder\r\n     * @param {Event} e\r\n     */\r\n    function onPaste($this, holder, e) {\r\n        //TODO Using ctrl+z after a paste should cancel it -> How would that affect other frameworks/component built with that feature in mind though?\r\n        //FIXME When pasting '000' on a thousand group selection, the whole selection gets deleted, and only one '0' is pasted (cf. issue #302)\r\n        // The event is prevented by default, since otherwise the user would be able to paste invalid characters into the input\r\n        e.preventDefault();\r\n\r\n        let rawPastedText = e.clipboardData.getData('text/plain');\r\n\r\n        // 0. Special case if the user has selected all the input text before pasting\r\n        const initialFormattedValue = e.target.value;\r\n        const selectionStart = e.target.selectionStart || 0;\r\n        const selectionEnd = e.target.selectionEnd || 0;\r\n        const selectionSize = selectionEnd - selectionStart;\r\n        let isAllInputTextSelected = false;\r\n\r\n        if (selectionSize === initialFormattedValue.length) {\r\n            isAllInputTextSelected = true;\r\n        }\r\n\r\n        // 1. Check if the paste has a negative sign (only if it's the first character), and store that information for later use\r\n        const isPasteNegative = isNegativeStrict(rawPastedText);\r\n        if (isPasteNegative) {\r\n            // 1a. Remove the negative sign from the pasted text\r\n            rawPastedText = rawPastedText.slice(1, rawPastedText.length);\r\n        }\r\n\r\n        // 2. Strip all thousand separators, brackets and currency sign, and convert the decimal character to a dot\r\n        const untranslatedPastedText = preparePastedText(rawPastedText, holder);\r\n\r\n        let pastedText;\r\n        if (untranslatedPastedText === '.') {\r\n            // Special case : If the user tries to paste a single decimal character (that has been translated to '.' already)\r\n            pastedText = '.';\r\n        } else {\r\n            // Normal case\r\n            // Allow pasting arabic numbers\r\n            pastedText = arabicToLatinNumbers(untranslatedPastedText, false, false, false);\r\n        }\r\n\r\n        // 3. Test if the paste is valid (only has numbers and eventually a decimal character). If it's not valid, stop here.\r\n        if (pastedText !== '.' && (!isNumber(pastedText) || pastedText === '')) {\r\n            if (holder.settings.onInvalidPaste === 'error') {\r\n                //TODO Should we send a warning instead of throwing an error?\r\n                throwError(`The pasted value '${rawPastedText}' is not a valid paste content.`);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        // 4. Calculate the paste result\r\n        let caretPositionOnInitialTextAfterPasting;\r\n        let initialUnformattedNumber;\r\n        if (e.target.value === '') {\r\n            // autoNumeric 'get' returns '0.00' if the input is empty, hence we need to store the 'real' empty initial value when needed\r\n            //FIXME This has been fixed in a previous commit, get should return '' on an empty input. Remove this unneeded 'if'\r\n            initialUnformattedNumber = '';\r\n        } else {\r\n            initialUnformattedNumber = $this.autoNumeric('get');\r\n        }\r\n        let isInitialValueNegative = isNegativeStrict(initialUnformattedNumber);\r\n        let isPasteNegativeAndInitialValueIsPositive;\r\n        let result;\r\n\r\n        // If the pasted content is negative, then the result will be negative too\r\n        if (isPasteNegative && !isInitialValueNegative) {\r\n            initialUnformattedNumber = `-${initialUnformattedNumber}`;\r\n            isInitialValueNegative = true;\r\n            isPasteNegativeAndInitialValueIsPositive = true;\r\n        }\r\n        else {\r\n            isPasteNegativeAndInitialValueIsPositive = false;\r\n        }\r\n\r\n        let leftPartContainedADot = false;\r\n        let leftPart;\r\n        let rightPart;\r\n        switch (holder.settings.onInvalidPaste) {\r\n            /* 4a. Truncate paste behavior:\r\n             * Insert as many numbers as possible on the right hand side of the caret from the pasted text content, until the input reach its range limit.\r\n             * If there is more characters in the clipboard once a limit is reached, drop the extraneous characters.\r\n             * Otherwise paste all the numbers in the clipboard.\r\n             * While doing so, we check if the result is within the minimum and maximum values allowed, and stop as soon as we encounter one of those.\r\n             *\r\n             * 4b. Replace paste behavior:\r\n             * Idem than the 'truncate' paste behavior, except that when a range limit is hit, we try to replace the subsequent initial numbers with the pasted ones, until we hit the range limit a second (and last) time, or we run out of numbers to paste\r\n             */\r\n            /* eslint no-case-declarations: 0 */\r\n            case 'truncate':\r\n            case 'replace':\r\n                const leftFormattedPart = initialFormattedValue.slice(0, selectionStart);\r\n                const rightFormattedPart = initialFormattedValue.slice(selectionEnd, initialFormattedValue.length);\r\n\r\n                if (selectionStart !== selectionEnd) {\r\n                    // a. If there is a selection, remove the selected part, and return the left and right part\r\n                    result = preparePastedText(leftFormattedPart + rightFormattedPart, holder);\r\n                } else {\r\n                    // b. Else if this is only one caret (and therefore no selection), then return the left and right part\r\n                    result = preparePastedText(initialFormattedValue, holder);\r\n                }\r\n\r\n                // Add back the negative sign if needed\r\n                if (isInitialValueNegative) {\r\n                    result = setRawNegativeSign(result);\r\n                }\r\n\r\n                // Build the unformatted result string\r\n                caretPositionOnInitialTextAfterPasting = convertCharacterCountToIndexPosition(countNumberCharactersOnTheCaretLeftSide(initialFormattedValue, selectionStart, holder.settings.decimalCharacter));\r\n                if (isPasteNegativeAndInitialValueIsPositive) {\r\n                    // If the initial paste is negative and the initial value is not, then I must offset the caret position by one place to the right to take the additional hyphen into account\r\n                    caretPositionOnInitialTextAfterPasting++;\r\n                    //TODO Quid if the negative sign is not on the left (negativePositiveSignPlacement and currencySymbolPlacement)?\r\n                }\r\n\r\n                leftPart = result.slice(0, caretPositionOnInitialTextAfterPasting);\r\n                rightPart = result.slice(caretPositionOnInitialTextAfterPasting, result.length);\r\n                if (pastedText === '.') {\r\n                    if (contains(leftPart, '.')) {\r\n                        // If I remove a dot here, then I need to update the caret position (decrement it by 1) when positioning it\r\n                        // To do so, we keep that info in order to modify the caret position later\r\n                        leftPartContainedADot = true;\r\n                        leftPart = leftPart.replace('.', '');\r\n                    }\r\n                    rightPart = rightPart.replace('.', '');\r\n                }\r\n                // -- Here, we are good to go to continue on the same basis\r\n\r\n                // c. Add numbers one by one at the caret position, while testing if the result is valid and within the range of the minimum and maximum value\r\n                //    Continue until you either run out of numbers to paste, or that you get out of the range limits\r\n                const minParse = parseStr(holder.settings.minimumValue);\r\n                const maxParse = parseStr(holder.settings.maximumValue);\r\n                let lastGoodKnownResult = result; // This is set as the default, in case we do not add even one number\r\n                let pastedTextIndex = 0;\r\n                let modifiedLeftPart = leftPart;\r\n\r\n                while (pastedTextIndex < pastedText.length) {\r\n                    // Modify the result with another pasted character\r\n                    modifiedLeftPart += pastedText[pastedTextIndex];\r\n                    result = modifiedLeftPart + rightPart;\r\n\r\n                    // Check the range limits\r\n                    if (!checkIfInRange(result, minParse, maxParse)) {\r\n                        // The result is out of the range limits, stop the loop here\r\n                        break;\r\n                    }\r\n\r\n                    // Save the last good known result\r\n                    lastGoodKnownResult = result;\r\n\r\n                    // Update the local variables for the next loop\r\n                    pastedTextIndex++;\r\n                }\r\n\r\n                // Update the last caret position where to insert a new number\r\n                caretPositionOnInitialTextAfterPasting += pastedTextIndex;\r\n\r\n                //XXX Here we have the result for the `truncate` option\r\n                if (holder.settings.onInvalidPaste === 'truncate') {\r\n                    //TODO If the user as defined a truncate callback and there are still some numbers (that will be dropped), then call this callback with the initial paste as well as the remaining numbers\r\n                    result = lastGoodKnownResult;\r\n\r\n                    if (leftPartContainedADot) {\r\n                        // If a dot has been removed for the part on the left of the caret, we decrement the caret index position\r\n                        caretPositionOnInitialTextAfterPasting--;\r\n                    }\r\n                    break;\r\n                }\r\n                //XXX ...else we need to continue modifying the result for the 'replace' option\r\n\r\n                // d. Until there are numbers to paste, replace the initial numbers one by one, and still do the range test.\r\n                //    Stop when you have no more numbers to paste, or if you are out of the range limits.\r\n                //    If you do get to the range limits, use the previous known good value within those limits.\r\n                //    Note: The numbers are replaced one by one, in the integer then decimal part, while ignoring the decimal character\r\n                //TODO What should happen if the user try to paste a decimal number? Should we override the current initial decimal character in favor of this new one? If we do, then we have to recalculate the vMin/vMax from the start in order to take into account this new decimal character position..\r\n                let lastGoodKnownResultIndex = caretPositionOnInitialTextAfterPasting;\r\n                const lastGoodKnownResultSize = lastGoodKnownResult.length;\r\n\r\n                while (pastedTextIndex < pastedText.length && lastGoodKnownResultIndex < lastGoodKnownResultSize) {\r\n                    if (lastGoodKnownResult[lastGoodKnownResultIndex] === '.') {\r\n                        // We skip the decimal character 'replacement'. That way, we do not change the decimal character position regarding the remaining numbers.\r\n                        lastGoodKnownResultIndex++;\r\n                        continue;\r\n                    }\r\n\r\n                    // This replace one character at a time\r\n                    result = replaceCharAt(lastGoodKnownResult, lastGoodKnownResultIndex, pastedText[pastedTextIndex]);\r\n\r\n                    // Check the range limits\r\n                    if (!checkIfInRange(result, minParse, maxParse)) {\r\n                        // The result is out of the range limits, stop the loop here\r\n                        break;\r\n                    }\r\n\r\n                    // Save the last good known result\r\n                    lastGoodKnownResult = result;\r\n\r\n                    // Update the local variables for the next loop\r\n                    pastedTextIndex++;\r\n                    lastGoodKnownResultIndex++;\r\n                }\r\n\r\n                // Update the last caret position where to insert a new number\r\n                caretPositionOnInitialTextAfterPasting = lastGoodKnownResultIndex;\r\n\r\n                if (leftPartContainedADot) {\r\n                    // If a dot has been removed for the part on the left of the caret, we decrement the caret index position\r\n                    caretPositionOnInitialTextAfterPasting--;\r\n                }\r\n\r\n                result = lastGoodKnownResult;\r\n\r\n                break;\r\n            /* 4c. Normal paste behavior:\r\n             * Insert the pasted number inside the current unformatted text, at the right caret position or selection\r\n             */\r\n            case 'error':\r\n            case 'ignore':\r\n            case 'clamp':\r\n            default:\r\n                // 1. Generate the unformatted result\r\n                const leftFormattedPart2 = initialFormattedValue.slice(0, selectionStart);\r\n                const rightFormattedPart2 = initialFormattedValue.slice(selectionEnd, initialFormattedValue.length);\r\n\r\n                if (selectionStart !== selectionEnd) {\r\n                    // a. If there is a selection, remove the selected part, and return the left and right part\r\n                    result = preparePastedText(leftFormattedPart2 + rightFormattedPart2, holder);\r\n                } else {\r\n                    // b. Else if this is only one caret (and therefore no selection), then return the left and right part\r\n                    result = preparePastedText(initialFormattedValue, holder);\r\n                }\r\n\r\n                // Add back the negative sign if needed\r\n                if (isInitialValueNegative) {\r\n                    result = setRawNegativeSign(result);\r\n                }\r\n\r\n                // Build the unformatted result string\r\n                caretPositionOnInitialTextAfterPasting = convertCharacterCountToIndexPosition(countNumberCharactersOnTheCaretLeftSide(initialFormattedValue, selectionStart, holder.settings.decimalCharacter));\r\n                if (isPasteNegativeAndInitialValueIsPositive) {\r\n                    // If the initial paste is negative and the initial value is not, then I must offset the caret position by one place to the right to take the additional hyphen into account\r\n                    caretPositionOnInitialTextAfterPasting++;\r\n                    //TODO Quid if the negative sign is not on the left (negativePositiveSignPlacement and currencySymbolPlacement)?\r\n                }\r\n\r\n                leftPart = result.slice(0, caretPositionOnInitialTextAfterPasting);\r\n                rightPart = result.slice(caretPositionOnInitialTextAfterPasting, result.length);\r\n                if (pastedText === '.') {\r\n                    // If the user only paste a single decimal character, then we remove the previously existing one (if any)\r\n                    if (contains(leftPart, '.')) {\r\n                        // If I remove a dot here, then I need to update the caret position (decrement it by 1) when positioning it\r\n                        // To do so, we keep that info in order to modify the caret position later\r\n                        leftPartContainedADot = true;\r\n                        leftPart = leftPart.replace('.', '');\r\n                    }\r\n                    rightPart = rightPart.replace('.', '');\r\n                }\r\n                // -- Here, we are good to go to continue on the same basis\r\n\r\n                // Generate the unformatted result\r\n                result = `${leftPart}${pastedText}${rightPart}`;\r\n\r\n                // 2. Calculate the caret position in the unformatted value, for later use\r\n                if (selectionStart === selectionEnd) {\r\n                    // There is no selection, then the caret position is set after the pasted text\r\n                    const indexWherePastedTextHasBeenInserted = convertCharacterCountToIndexPosition(countNumberCharactersOnTheCaretLeftSide(initialFormattedValue, selectionStart, holder.settings.decimalCharacter));\r\n                    caretPositionOnInitialTextAfterPasting = indexWherePastedTextHasBeenInserted + pastedText.length; // I must not count the characters that have been removed from the pasted text (ie. '.')\r\n                } else {\r\n                    if (isAllInputTextSelected) {\r\n                        // Special case when all the input text is selected before pasting, which means we'll completely erase its content and paste only the clipboard content\r\n                        caretPositionOnInitialTextAfterPasting = result.length;\r\n                    } else if (rightPart === '') {\r\n                        // If the user selected from the caret position to the end of the input (on the far right)\r\n                        caretPositionOnInitialTextAfterPasting = convertCharacterCountToIndexPosition(countNumberCharactersOnTheCaretLeftSide(initialFormattedValue, selectionStart, holder.settings.decimalCharacter)) + pastedText.length;\r\n                    } else {\r\n                        // Normal case\r\n                        const indexSelectionEndInRawValue = convertCharacterCountToIndexPosition(countNumberCharactersOnTheCaretLeftSide(initialFormattedValue, selectionEnd, holder.settings.decimalCharacter));\r\n\r\n                        // Here I must not count the characters that have been removed from the pasted text (ie. '.'), or the thousand separators in the initial selected text\r\n                        const selectedText = e.target.value.slice(selectionStart, selectionEnd);\r\n                        caretPositionOnInitialTextAfterPasting = indexSelectionEndInRawValue - selectionSize + countCharInText(holder.settings.digitGroupSeparator, selectedText) + pastedText.length;\r\n                    }\r\n                }\r\n\r\n                // Modify the caret position for special cases, only if the whole input has not been selected\r\n                if (!isAllInputTextSelected) {\r\n                    if (isPasteNegativeAndInitialValueIsPositive) {\r\n                        // If the pasted value has a '-' sign, but the initial value does not, offset the index by one\r\n                        caretPositionOnInitialTextAfterPasting++;\r\n                    }\r\n\r\n                    if (leftPartContainedADot) {\r\n                        // If a dot has been removed for the part on the left of the caret, we decrement the caret index position\r\n                        caretPositionOnInitialTextAfterPasting--;\r\n                    }\r\n                }\r\n        }\r\n\r\n        // 5. Check if the result is a valid number, if not, drop the paste and do nothing.\r\n        if (!isNumber(result) || result === '') {\r\n            if (holder.settings.onInvalidPaste === 'error') {\r\n                throwError(`The pasted value '${rawPastedText}' would result into an invalid content '${result}'.`); //TODO Should we send a warning instead of throwing an error?\r\n                //TODO This is not DRY ; refactor with above\r\n            }\r\n            return;\r\n        }\r\n\r\n        // 6. If it's a valid number, check if it falls inside the minimum and maximum value. If this fails, modify the value following this procedure :\r\n        /*\r\n         * If 'error' (this is the default) :\r\n         *      - Normal paste behavior.\r\n         *      - Try to set the new value, if it fails, then throw an error in the console.\r\n         *      - Do not change the input value, do not change the current selection.\r\n         * If 'ignore' :\r\n         *      - Normal paste behavior.\r\n         *      - Try to set the new value, if it fails, do nothing more.\r\n         *      - Do not change the input value, do not change the current selection.\r\n         * If 'clamp' :\r\n         *      - Normal paste behavior.\r\n         *      - Try to set the new value, if it fails, set the value to the minimum or maximum limit, whichever is closest to the\r\n         *        paste result.\r\n         *      - Change the caret position to be positioned on the left hand side of the decimal character.\r\n         * If 'truncate' :\r\n         *      - Truncate paste behavior.\r\n         *      - Try to set the new value, until it fails (if the result is out of the min and max value limits).\r\n         *      - Drop the remaining non-pasted numbers, and keep the last known non-failing result.\r\n         *      - Change the caret position to be positioned after the last pasted character.\r\n         * If 'replace' :\r\n         *      - Replace paste behavior.\r\n         *      - Try to set the new value, until it fails (if the result is out of the min and max value limits).\r\n         *     - Then try to replace as many numbers as possible with the pasted ones. Once it fails, keep the last known non-failing result.\r\n         *      - Change the caret position to be positioned after the last pasted character.\r\n         */\r\n        let valueHasBeenSet = false;\r\n        let valueHasBeenClamped = false;\r\n        try {\r\n            $this.autoNumeric('set', result);\r\n            valueHasBeenSet = true;\r\n        }\r\n        catch (error) {\r\n            let clampedValue;\r\n            switch (holder.settings.onInvalidPaste) {\r\n                case 'clamp':\r\n                    clampedValue = clampToRangeLimits(result, holder.settings);\r\n                    try {\r\n                        $this.autoNumeric('set', clampedValue);\r\n                    }\r\n                    catch (error) {\r\n                        throwError(`Fatal error: Unable to set the clamped value '${clampedValue}'.`);\r\n                    }\r\n\r\n                    valueHasBeenClamped = true;\r\n                    valueHasBeenSet = true;\r\n                    result = clampedValue; // This is used only for setting the caret position later\r\n                    break;\r\n                case 'error':\r\n                case 'truncate':\r\n                case 'replace':\r\n                    // Throw an error message\r\n                    throwError(`The pasted value '${rawPastedText}' results in a value '${result}' that is outside of the minimum [${holder.settings.minimumValue}] and maximum [${holder.settings.maximumValue}] value range.`);\r\n                // falls through\r\n                case 'ignore':\r\n                // Do nothing\r\n                // falls through\r\n                default :\r\n                    return; // ...and nothing else should be changed\r\n            }\r\n        }\r\n\r\n        // 7. Then lastly, set the caret position at the right logical place\r\n        let caretPositionInFormattedNumber;\r\n        if (valueHasBeenSet) {\r\n            switch (holder.settings.onInvalidPaste) {\r\n                case 'clamp':\r\n                    if (valueHasBeenClamped) {\r\n                        if (holder.settings.currencySymbolPlacement === 's') {\r\n                            setElementSelection(e.target, e.target.value.length - holder.settings.currencySymbol.length); // This puts the caret on the right of the last decimal place\r\n                        } else {\r\n                            setElementSelection(e.target, e.target.value.length); // ..and this on the far right\r\n                        }\r\n\r\n                        break;\r\n                    } // else if the value has not been clamped, the default behavior is used...\r\n                // falls through\r\n                case 'error':\r\n                case 'ignore':\r\n                case 'truncate':\r\n                case 'replace':\r\n                default :\r\n                    // Whenever one or multiple characters are pasted, this means we have to manage the potential thousand separators that could be added by the formatting\r\n                    caretPositionInFormattedNumber = findCaretPositionInFormattedNumber(result, caretPositionOnInitialTextAfterPasting, e.target.value, holder.settings.decimalCharacter);\r\n                    setElementSelection(e.target, caretPositionInFormattedNumber);\r\n            }\r\n        }\r\n\r\n        // 8. We make sure we send an input event only if the result is different than the initial value before the paste\r\n        if (valueHasBeenSet && initialFormattedValue !== e.target.value) {\r\n            // On a 'normal' non-autoNumeric input, an `input` event is sent when a paste is done. We mimic that.\r\n            triggerEvent('input', e.target);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * When focusing out of the input, we check if the value has changed, and if it has, then we send a `change` event (since the native one would have been prevented by `e.preventDefault()` called in the other event listeners).\r\n     *\r\n     * @param {AutoNumericHolder} holder\r\n     * @param {Event} e\r\n     */\r\n    function onBlur(holder, e) {\r\n        if (e.target.value !== holder.valueOnFocus) {\r\n            triggerEvent('change', e.target);\r\n            // e.preventDefault(); // ...and immediately prevent the browser to send a second change event (that somehow gets picked up by jQuery, but not by `addEventListener()` //FIXME KNOWN BUG : This does not prevent the second change event to be picked up by jQuery, which adds '.00' at the end of an integer\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handler for 'submit' events\r\n     *\r\n     * @param {object} $this jQuery-selected DOM element\r\n     * @param {AutoNumericHolder} holder\r\n     */\r\n    function onSubmit($this, holder) {\r\n        $this.closest('form').on('submit.autoNumeric', () => {\r\n            if (holder) {\r\n                const $settings = holder.settingsClone;\r\n\r\n                if ($settings.unformatOnSubmit) {\r\n                    jQueryOriginalVal.call($this, $settings.rawValue);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Return the jQuery selected input if the tag and type are supported by autoNumeric.\r\n     *\r\n     * @param {object} $this jQuery-selected DOM element\r\n     * @returns {boolean|*}\r\n     */\r\n    function getInputIfSupportedTagAndType($this) {\r\n        // Supported input type\r\n        const $input = $this.is('input[type=text], input[type=hidden], input[type=tel], input:not([type])');\r\n\r\n        // Checks for non-supported input types\r\n        if (!$input && $this.prop('tagName').toLowerCase() === 'input') {\r\n            throwError(`The input type \"${$this.prop('type')}\" is not supported by autoNumeric`);\r\n        }\r\n\r\n        // Checks for non-supported tags\r\n        const currentElementTag = $this.prop('tagName').toLowerCase();\r\n        if (currentElementTag !== 'input' && !isInArray(currentElementTag, allowedTagList)) {\r\n            throwError(`The <${currentElementTag}> tag is not supported by autoNumeric`);\r\n        }\r\n\r\n        return $input;\r\n    }\r\n\r\n    /**\r\n     * Formats the default value on page load.\r\n     * This is called only if the `formatOnPageLoad` option is set to `true`.\r\n     *\r\n     * @param {object} settings\r\n     * @param {object} $input jQuery-selected <input> element\r\n     * @param {object} $this jQuery-selected DOM element\r\n     */\r\n    function formatDefaultValueOnPageLoad(settings, $input, $this) {\r\n        let setValue = true;\r\n\r\n        if ($input) {\r\n            const currentValue = jQueryOriginalVal.call($this);\r\n            /*\r\n             * If the input value has been set by the dev, but not directly as an attribute in the html, then it takes\r\n             * precedence and should get formatted on init (if this input value is a valid number and that the\r\n             * developer wants it formatted on init (cf. `settings.formatOnPageLoad`)).\r\n             * Note; this is true whatever the developer has set for `data-an-default` in the html (asp.net users).\r\n             *\r\n             * In other words : if `defaultValueOverride` is not null, it means the developer is trying to prevent postback problems.\r\n             * But if `input.value` is set to a number, and `$this.attr('value')` is not set, then it means the dev has\r\n             * changed the input value, and then it means we should not overwrite his own decision to do so.\r\n             * Hence, if `defaultValueOverride` is not null, but `input.value` is a number and `$this.attr('value')` is not set,\r\n             * we should ignore `defaultValueOverride` altogether.\r\n             */\r\n            const unLocalizedCurrentValue = toNumericValue(currentValue, settings); // This allows to use a localized value on startup oDec\r\n            if (settings.formatOnPageLoad && currentValue !== '' && isUndefinedOrNullOrEmpty($this.attr('value'))) {\r\n                // Check if the `value` is valid or not\r\n                if (!isNaN(unLocalizedCurrentValue) && Infinity !== unLocalizedCurrentValue) {\r\n                    $this.autoNumeric('set', unLocalizedCurrentValue);\r\n                    setValue = false;\r\n                } else {\r\n                    // If not, inform the developer that nothing usable has been provided\r\n                    throwError(`The value [${currentValue}] used in the input is not a valid value autoNumeric can work with.`);\r\n                }\r\n            } else {\r\n                /* Checks for :\r\n                 * - page reload from back button, and\r\n                 * - ASP.net form post back\r\n                 *      The following HTML data attribute is REQUIRED (data-an-default=\"same value as the value attribute\")\r\n                 *      example: <asp:TextBox runat=\"server\" id=\"someID\" text=\"1234.56\" data-an-default=\"1234.56\">\r\n                 */\r\n                if ((settings.defaultValueOverride !== null && settings.defaultValueOverride.toString() !== currentValue) ||\r\n                    (settings.defaultValueOverride === null && currentValue !== '' && currentValue !== $this.attr('value')) ||\r\n                    (currentValue !== '' && $this.attr('type') === 'hidden' && !isNumber(unLocalizedCurrentValue))) {\r\n                    if ((settings.decimalPlacesShownOnFocus !== null && settings.saveValueToSessionStorage) ||\r\n                        (settings.scaleDivisor && settings.saveValueToSessionStorage)) {\r\n                        settings.rawValue = saveValueToPersistentStorage($this[0], settings, 'get');\r\n                    }\r\n\r\n                    // If the decimalPlacesShownOnFocus value should NOT be saved in sessionStorage\r\n                    if (!settings.saveValueToSessionStorage) {\r\n                        let toStrip;\r\n\r\n                        if (settings.negativeBracketsTypeOnBlur !== null && settings.negativeSignCharacter !== '') {\r\n                            settings.hasFocus = true;\r\n                            toStrip = toggleNegativeBracket(currentValue, settings);\r\n                        } else {\r\n                            toStrip = currentValue;\r\n                        }\r\n\r\n                        if ((settings.negativePositiveSignPlacement === 's' ||\r\n                            (settings.negativePositiveSignPlacement !== 'p' && settings.currencySymbolPlacement === 's')) &&\r\n                            settings.negativeSignCharacter !== '' &&\r\n                            isNegative(currentValue)) {\r\n                            settings.rawValue = settings.negativeSignCharacter + stripAllNonNumberCharacters(toStrip, settings, true);\r\n                        } else {\r\n                            settings.rawValue = stripAllNonNumberCharacters(toStrip, settings, true);\r\n                        }\r\n                    }\r\n\r\n                    setValue = false;\r\n                }\r\n            }\r\n\r\n            if (currentValue === '') {\r\n                switch (settings.emptyInputBehavior) {\r\n                    case 'focus':\r\n                        setValue = false;\r\n                        break;\r\n                    case 'always':\r\n                        jQueryOriginalVal.call($this, settings.currencySymbol);\r\n                        setValue = false;\r\n                        break;\r\n                    case 'zero':\r\n                        $this.autoNumeric('set', '0');\r\n                        setValue = false;\r\n                        break;\r\n                    default :\r\n                    //\r\n                }\r\n            } else if (setValue && currentValue === $this.attr('value')) {\r\n                $this.autoNumeric('set', currentValue);\r\n            }\r\n        }\r\n\r\n        if (isInArray($this.prop('tagName').toLowerCase(), settings.tagList) && $this.text() !== '') {\r\n            if (settings.defaultValueOverride !== null) {\r\n                if (settings.defaultValueOverride === $this.text()) {\r\n                    $this.autoNumeric('set', $this.text());\r\n                }\r\n            } else {\r\n                $this.autoNumeric('set', $this.text());\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enhance the user experience by modifying the default `negativePositiveSignPlacement` option depending on `currencySymbol` and `currencySymbolPlacement`.\r\n     *\r\n     * If the user has not set the placement of the negative sign (`negativePositiveSignPlacement`), but has set a currency symbol (`currencySymbol`),\r\n     * then we modify the default value of `negativePositiveSignPlacement` in order to keep the resulting output logical by default :\r\n     * - \"$-1,234.56\" instead of \"-$1,234.56\" ({currencySymbol: \"$\", negativePositiveSignPlacement: \"r\"})\r\n     * - \"-1,234.56$\" instead of \"1,234.56-$\" ({currencySymbol: \"$\", currencySymbolPlacement: \"s\", negativePositiveSignPlacement: \"p\"})\r\n     *\r\n     * @param {object} settings\r\n     */\r\n    function correctNegativePositiveSignPlacementOption(settings) {\r\n        // If negativePositiveSignPlacement is already set, we do not overwrite it\r\n        if (!isNull(settings.negativePositiveSignPlacement)) {\r\n            return;\r\n        }\r\n\r\n        if (!isUndefined(settings) &&\r\n            isUndefinedOrNullOrEmpty(settings.negativePositiveSignPlacement) &&\r\n            !isUndefinedOrNullOrEmpty(settings.currencySymbol)) {\r\n            switch (settings.currencySymbolPlacement) {\r\n                case 's':\r\n                    settings.negativePositiveSignPlacement = 'p'; // Default -1,234.56 €\r\n                    break;\r\n                case 'p':\r\n                    settings.negativePositiveSignPlacement = 'l'; // Default -$1,234.56\r\n                    break;\r\n                default :\r\n                //\r\n            }\r\n        } else {\r\n            // Sets the default value if `negativePositiveSignPlacement` is `null`\r\n            settings.negativePositiveSignPlacement = 'l';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Analyze and save the minimumValue and maximumValue integer size for later uses\r\n     *\r\n     * @param {object} settings\r\n     */\r\n    function calculateVMinAndVMaxIntegerSizes(settings) {\r\n        let [maximumValueIntegerPart] = settings.maximumValue.toString().split('.');\r\n        let [minimumValueIntegerPart] = (!settings.minimumValue && settings.minimumValue !== 0)?[]:settings.minimumValue.toString().split('.');\r\n        maximumValueIntegerPart = maximumValueIntegerPart.replace('-', '');\r\n        minimumValueIntegerPart = minimumValueIntegerPart.replace('-', '');\r\n\r\n        settings.mIntPos = Math.max(maximumValueIntegerPart.length, 1);\r\n        settings.mIntNeg = Math.max(minimumValueIntegerPart.length, 1);\r\n    }\r\n\r\n    /**\r\n     * Modify `decimalPlacesOverride` as needed\r\n     *\r\n     * @param {object} settings\r\n     */\r\n    function correctDecimalPlacesOverrideOption(settings) {\r\n        if (isNull(settings.decimalPlacesOverride)) {\r\n            settings.decimalPlacesOverride = maximumVMinAndVMaxDecimalLength(settings.minimumValue, settings.maximumValue);\r\n        }\r\n        settings.oDec = String(settings.decimalPlacesOverride);\r\n\r\n        // Most calculus assume `decimalPlacesOverride` is an integer, the following statement makes it clear (otherwise having it as a string leads to problems in rounding for instance)\r\n        settings.decimalPlacesOverride = Number(settings.decimalPlacesOverride);\r\n    }\r\n\r\n    /**\r\n     * Sets the alternative decimal separator key.\r\n     *\r\n     * @param {object} settings\r\n     */\r\n    function setsAlternativeDecimalSeparatorCharacter(settings) {\r\n        if (isNull(settings.decimalCharacterAlternative) && Number(settings.decimalPlacesOverride) > 0) {\r\n            if (settings.decimalCharacter === '.' && settings.digitGroupSeparator !== ',') {\r\n                settings.decimalCharacterAlternative = ',';\r\n            } else if (settings.decimalCharacter === ',' && settings.digitGroupSeparator !== '.') {\r\n                settings.decimalCharacterAlternative = '.';\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Caches regular expressions for stripAllNonNumberCharacters\r\n     *\r\n     * @param {object} settings\r\n     */\r\n    function cachesUsualRegularExpressions(settings) {\r\n        const allNumbersReg = '[0-9]';\r\n        const noAllNumbersReg = '[^0-9]';\r\n\r\n        // Test if there is a negative character in the string\r\n        const aNegReg = settings.negativeSignCharacter?`([-\\\\${settings.negativeSignCharacter}]?)`:'(-?)';\r\n        settings.aNegRegAutoStrip = aNegReg;\r\n\r\n        let negativeSignRegPart;\r\n        if (settings.negativeSignCharacter) {\r\n            negativeSignRegPart = `\\\\${settings.negativeSignCharacter}`;\r\n        } else {\r\n            negativeSignRegPart = '';\r\n        }\r\n        settings.skipFirstAutoStrip = new RegExp(`${aNegReg}[^-${negativeSignRegPart}\\\\${settings.decimalCharacter}${allNumbersReg}].*?(${allNumbersReg}|\\\\${settings.decimalCharacter}${allNumbersReg})`);\r\n        settings.skipLastAutoStrip = new RegExp(`(${allNumbersReg}\\\\${settings.decimalCharacter}?)[^\\\\${settings.decimalCharacter}${allNumbersReg}]${noAllNumbersReg}*$`);\r\n\r\n        const allowed = `-0123456789\\\\${settings.decimalCharacter}`;\r\n        settings.allowedAutoStrip = new RegExp(`[^${allowed}]`, 'g');\r\n        settings.numRegAutoStrip = new RegExp(`${aNegReg}(?:\\\\${settings.decimalCharacter}?(${allNumbersReg}+\\\\${settings.decimalCharacter}${allNumbersReg}+)|(${allNumbersReg}*(?:\\\\${settings.decimalCharacter}${allNumbersReg}*)?))`);\r\n\r\n        // Using this regex version `^${settings.aNegRegAutoStrip}0*(\\\\d|$)` entirely clear the input on blur\r\n        settings.stripReg = new RegExp(`^${settings.aNegRegAutoStrip}0*(${allNumbersReg})`);\r\n    }\r\n\r\n    /**\r\n     * Modify the user settings to make them 'exploitable' later.\r\n     *\r\n     * @param {object} settings\r\n     */\r\n    function transformOptionsValuesToDefaultTypes(settings) {\r\n        $.each(settings, (key, value) => {\r\n            // Convert the string 'true' and 'false' to real Boolean\r\n            if (value === 'true' || value === 'false') {\r\n                settings[key] = value === 'true';\r\n            }\r\n\r\n            // Convert numbers in options to strings\r\n            //TODO if a value is already of type 'Number', shouldn't we keep it as a number for further manipulation, instead of using a string?\r\n            if (typeof value === 'number' && key !== 'aScale') {\r\n                settings[key] = value.toString();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Convert the old settings options name to new ones.\r\n     *\r\n     * @param {object} options\r\n     */\r\n    function convertOldOptionsToNewOnes(options) {\r\n        //TODO Delete this function once the old options are not used anymore\r\n        const oldOptionsConverter = {\r\n            // Old option name, with their corresponding new option\r\n            aSep                         : 'digitGroupSeparator',\r\n            nSep                         : 'noSeparatorOnFocus',\r\n            dGroup                       : 'digitalGroupSpacing',\r\n            aDec                         : 'decimalCharacter',\r\n            altDec                       : 'decimalCharacterAlternative',\r\n            aSign                        : 'currencySymbol',\r\n            pSign                        : 'currencySymbolPlacement',\r\n            pNeg                         : 'negativePositiveSignPlacement',\r\n            aSuffix                      : 'suffixText',\r\n            oLimits                      : 'overrideMinMaxLimits',\r\n            vMax                         : 'maximumValue',\r\n            vMin                         : 'minimumValue',\r\n            mDec                         : 'decimalPlacesOverride',\r\n            eDec                         : 'decimalPlacesShownOnFocus',\r\n            scaleDecimal                 : 'scaleDecimalPlaces',\r\n            aStor                        : 'saveValueToSessionStorage',\r\n            mRound                       : 'roundingMethod',\r\n            aPad                         : 'allowDecimalPadding',\r\n            nBracket                     : 'negativeBracketsTypeOnBlur',\r\n            wEmpty                       : 'emptyInputBehavior',\r\n            lZero                        : 'leadingZero',\r\n            aForm                        : 'formatOnPageLoad',\r\n            sNumber                      : 'selectNumberOnly',\r\n            anDefault                    : 'defaultValueOverride',\r\n            unSetOnSubmit                : 'unformatOnSubmit',\r\n            outputType                   : 'outputFormat',\r\n            debug                        : 'showWarnings',\r\n            // Current options :\r\n            digitGroupSeparator          : true,\r\n            noSeparatorOnFocus           : true,\r\n            digitalGroupSpacing          : true,\r\n            decimalCharacter             : true,\r\n            decimalCharacterAlternative  : true,\r\n            currencySymbol               : true,\r\n            currencySymbolPlacement      : true,\r\n            negativePositiveSignPlacement: true,\r\n            showPositiveSign             : true,\r\n            suffixText                   : true,\r\n            overrideMinMaxLimits         : true,\r\n            maximumValue                 : true,\r\n            minimumValue                 : true,\r\n            decimalPlacesOverride        : true,\r\n            decimalPlacesShownOnFocus    : true,\r\n            scaleDivisor                 : true,\r\n            scaleDecimalPlaces           : true,\r\n            scaleSymbol                  : true,\r\n            saveValueToSessionStorage    : true,\r\n            onInvalidPaste               : true,\r\n            roundingMethod               : true,\r\n            allowDecimalPadding          : true,\r\n            negativeBracketsTypeOnBlur   : true,\r\n            emptyInputBehavior           : true,\r\n            leadingZero                  : true,\r\n            formatOnPageLoad             : true,\r\n            selectNumberOnly             : true,\r\n            defaultValueOverride         : true,\r\n            unformatOnSubmit             : true,\r\n            outputFormat                 : true,\r\n            showWarnings                 : true,\r\n            failOnUnknownOption          : true,\r\n            //FIXME Find a way to exclude those internal data from the settings object (ideally by using another object, or better yet, class attributes) -->\r\n            hasFocus             : true,\r\n            runOnce              : true,\r\n            rawValue             : true,\r\n            trailingNegative     : true,\r\n            caretFix             : true,\r\n            throwInput           : true,\r\n            strip                : true,\r\n            tagList              : true,\r\n            negativeSignCharacter: true,\r\n            positiveSignCharacter: true,\r\n            mIntPos              : true,\r\n            mIntNeg              : true,\r\n            oDec                 : true,\r\n            oPad                 : true,\r\n            oBracket             : true,\r\n            oSep                 : true,\r\n            oSign                : true,\r\n            oSuffix              : true,\r\n            aNegRegAutoStrip     : true,\r\n            skipFirstAutoStrip   : true,\r\n            skipLastAutoStrip    : true,\r\n            allowedAutoStrip     : true,\r\n            numRegAutoStrip      : true,\r\n            stripReg             : true,\r\n            holder               : true,\r\n        };\r\n\r\n        for (const option in options) {\r\n            if (options.hasOwnProperty(option)) {\r\n                if (oldOptionsConverter[option] === true) {\r\n                    // If the option is a 'new' option, we continue looping\r\n                    continue;\r\n                }\r\n\r\n                if (oldOptionsConverter.hasOwnProperty(option)) {\r\n                    // Else we have an 'old' option name\r\n                    warning(`You are using the deprecated option name '${option}'. Please use '${oldOptionsConverter[option]}' instead from now on. The old option name will be dropped soon.`, true);\r\n\r\n                    // Then we modify the initial option object to use the new options instead of the old ones\r\n                    options[oldOptionsConverter[option]] = options[option];\r\n                    delete options[option];\r\n                } else if (options.failOnUnknownOption) {\r\n                    // ...or the option name is unknown. This means there is a problem with the options object, therefore we throw an error.\r\n                    throwError(`Option name '${option}' is unknown. Please fix the options passed to autoNumeric`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Analyse the settings/options passed by the user, validate and clean them, then return them.\r\n     * Note: This returns `null` if somehow the settings returned by jQuery is not an object.\r\n     *\r\n     * @param {object} options\r\n     * @param {object} $this jQuery-selected DOM element\r\n     * @param {boolean} update - If TRUE, then the settings already exists and this function only updates them instead of recreating them from scratch\r\n     * @returns {object|null}\r\n     */\r\n    function getInitialSettings(options, $this, update = false) {\r\n        // Attempt to grab \"autoNumeric\" settings. If they do not exist, it returns \"undefined\".\r\n        let settings = $this.data('autoNumeric');\r\n\r\n        // If the user used old options, we convert them to new ones\r\n        if (update || !isNull(options)) {\r\n            convertOldOptionsToNewOnes(options);\r\n        }\r\n\r\n        if (update || isUndefined(settings)) {\r\n            if (update) {\r\n                // The settings are updated\r\n                settings = $.extend(settings, options);\r\n            } else {\r\n                // If we couldn't grab any settings, create them from the default ones and combine them with the options passed\r\n                // The settings are generated for the first time\r\n                // This also attempt to grab the HTML5 data. If it doesn't exist, we'll get \"undefined\"\r\n                const tagData = $this.data();\r\n                settings = $.extend({}, defaultSettings, tagData, options, {\r\n                    hasFocus             : false,\r\n                    runOnce              : false,\r\n                    rawValue             : '',\r\n                    trailingNegative     : false,\r\n                    caretFix             : false,\r\n                    androidSelectionStart: null,\r\n                    throwInput           : true, // Throw input event\r\n                    strip                : true,\r\n                    tagList              : allowedTagList,\r\n                });\r\n            }\r\n\r\n            // Modify the user settings to make them 'exploitable'\r\n            transformOptionsValuesToDefaultTypes(settings);\r\n\r\n            // Improve the `negativePositiveSignPlacement` option if needed\r\n            correctNegativePositiveSignPlacementOption(settings);\r\n\r\n            // Set the negative and positive signs, as needed\r\n            settings.negativeSignCharacter = settings.minimumValue < 0 ? '-' : '';\r\n            settings.positiveSignCharacter = settings.maximumValue >= 0 ? '+' : '';\r\n\r\n            // Additional changes to the settings object (from the original autoCode() function)\r\n            runCallbacksFoundInTheSettingsObject($this, settings);\r\n            calculateVMinAndVMaxIntegerSizes(settings);\r\n            correctDecimalPlacesOverrideOption(settings);\r\n            setsAlternativeDecimalSeparatorCharacter(settings);\r\n            cachesUsualRegularExpressions(settings);\r\n\r\n            // Validate the settings\r\n            validate(settings, false); // Throws if necessary\r\n\r\n            // Original settings saved for use when decimalPlacesShownOnFocus, scaleDivisor & noSeparatorOnFocus options are being used\r\n            keepAnOriginalSettingsCopy(settings);\r\n\r\n            // Save our new settings\r\n            $this.data('autoNumeric', settings);\r\n\r\n            return settings;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert the `value` parameter that can either be :\r\n     * - a real number,\r\n     * - a string representing a real number, or\r\n     * - a string representing a localized number (with specific group separators and decimal character),\r\n     * ...to a string representing a real 'javascript' number (ie. '1234' or '1234.567').\r\n     *\r\n     * This function returns `NaN` if such conversion fails.\r\n     *\r\n     * @param {int|float|string} value\r\n     * @param {object} settings\r\n     * @returns {string|NaN}\r\n     */\r\n    function toNumericValue(value, settings) {\r\n        let result;\r\n        if (isNumber(Number(value))) {\r\n            // The value has either already been stripped, or a 'real' javascript number is passed as a parameter\r\n            result = value;\r\n        } else {\r\n            // Else if it's a string that `Number()` cannot typecast, then we try to convert the localized numeric string to a numeric one\r\n            // Convert the value to a numeric string, stripping unnecessary characters in the process\r\n            result = convertToNumericString(value.toString(), settings);\r\n\r\n            // If the result is still not a numeric string, then we throw a warning\r\n            if (!isNumber(Number(result))) {\r\n                warning(`The value \"${value}\" being \"set\" is not numeric and therefore cannot be used appropriately.`, settings.showWarnings);\r\n                result = NaN;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Methods supported by autoNumeric\r\n     */\r\n    const methods = {\r\n        /**\r\n         * Method to initialize autoNumeric and attach the settings (options can be passed as a parameter)\r\n         * The options passed as a parameter is an object that contains the settings (ie. {digitGroupSeparator: \".\", decimalCharacter: \",\", currencySymbol: '€ '})\r\n         *\r\n         * @example\r\n         * $(someSelector).autoNumeric('init');            // Initiate autoNumeric with defaults\r\n         * $(someSelector).autoNumeric();                  // Initiate autoNumeric with defaults\r\n         * $(someSelector).autoNumeric('init', {options}); // Initiate autoNumeric with options\r\n         * $(someSelector).autoNumeric({options});         // Initiate autoNumeric with options\r\n         *\r\n         * @param {object} options\r\n         * @returns {*|{statements, branches, lines, functions, excludes, overrides}|{statements, branches, lines, functions, excludes}|{statements, lines, branches, functions, excludes}}\r\n         */\r\n        init(options) {\r\n            return this.each(function() {\r\n                const $this = $(this);\r\n                const $input = getInputIfSupportedTagAndType($this);\r\n\r\n                const settings = getInitialSettings(options, $this, false);\r\n                if (isNull(settings)) {\r\n                    return this;\r\n                }\r\n\r\n                // Create the AutoNumericHolder object that store the field properties\r\n                const holder = getAutoNumericHolder($this, settings, false);\r\n\r\n                if (!settings.runOnce && settings.formatOnPageLoad) {\r\n                    formatDefaultValueOnPageLoad(settings, $input, $this);\r\n                }\r\n\r\n                settings.runOnce = true;\r\n\r\n                // Add the events listeners to supported input types (\"text\", \"hidden\", \"tel\" and no type)\r\n                if ($input) {\r\n                    this.addEventListener('focusin', e => { onFocusInAndMouseEnter($this, holder, e); }, false);\r\n                    this.addEventListener('mouseenter', e => { onFocusInAndMouseEnter($this, holder, e); }, false);\r\n                    this.addEventListener('blur', e => { onFocusOutAndMouseLeave($this, holder, e); }, false);\r\n                    this.addEventListener('mouseleave', e => { onFocusOutAndMouseLeave($this, holder, e); }, false);\r\n                    this.addEventListener('keydown', e => { onKeydown(holder, e); }, false);\r\n                    this.addEventListener('keypress', e => { onKeypress(holder, e); }, false);\r\n                    this.addEventListener('input', e => { onInput(holder, e); }, false);\r\n                    this.addEventListener('keyup', e => { onKeyup(holder, settings, e); }, false);\r\n                    this.addEventListener('blur', e => { onBlur(holder, e); }, false);\r\n                    this.addEventListener('paste', e => { onPaste($this, holder, e); }, false);\r\n                    onSubmit($this, holder); //TODO Switch to `addEventListener'\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Method to stop and remove autoNumeric for the current element.\r\n         * Note: this does not remove the formatting.\r\n         *\r\n         * @example $(someSelector).autoNumeric(\"destroy\"); // Destroys autoNumeric on this selected element\r\n         *\r\n         * @returns {*|jQuery}\r\n         */\r\n        destroy() {\r\n            return $(this).each(function() {\r\n                const $this = getCurrentElement(this);\r\n                const settings = $this.data('autoNumeric');\r\n                if (typeof settings === 'object') {\r\n                    jQueryOriginalVal.call($this, '');\r\n                    saveValueToPersistentStorage($this[0], settings, 'wipe');\r\n                    $this.removeData('autoNumeric');\r\n                    $this.off('.autoNumeric');\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Method to clear the value from sessionStorage (or cookie, depending on browser supports).\r\n         *\r\n         * @example $(someSelector).autoNumeric(\"wipe\"); // Removes session storage and cookies from memory\r\n         *\r\n         * @returns {*|jQuery}\r\n         */\r\n        wipe() {\r\n            return $(this).each(function() {\r\n                const $this = getCurrentElement(this);\r\n                const settings = $this.data('autoNumeric');\r\n                if (typeof settings === 'object') {\r\n                    jQueryOriginalVal.call($this, '');\r\n                    settings.rawValue = '';\r\n                    saveValueToPersistentStorage($this[0], settings, 'wipe');\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Method that updates the autoNumeric settings.\r\n         * It can be called multiple times if needed.\r\n         * The options passed as a parameter is an object that contains the settings (ie. {digitGroupSeparator: \".\", decimalCharacter: \",\", currencySymbol: '€ '}).\r\n         *\r\n         * @example $(someSelector).autoNumeric(\"update\", {options}); // Updates the settings\r\n         *\r\n         * @param {object} options\r\n         * @returns {*|jQuery}\r\n         */\r\n        update(options) {\r\n            return $(this).each(function() {\r\n                // Retrieve the current unformatted input value\r\n                const $this = getCurrentElement(this);\r\n                const strip = $this.autoNumeric('get');\r\n\r\n                // Update the settings\r\n                const settings = getInitialSettings(options, $this, true);\r\n\r\n                // Update the AutoNumericHolder object that store the field properties\r\n                getAutoNumericHolder($this, settings, true);\r\n\r\n                // Reformat the input value with the new settings\r\n                if (jQueryOriginalVal.call($this) !== '' || $this.text() !== '') {\r\n                    return $this.autoNumeric('set', strip);\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Method to format the value passed as a parameter.\r\n         * If the value is passed as a string, it can be an integer '1234' or a double '1234.56789'\r\n         * and must contain only numbers and one decimal (period) character\r\n         *\r\n         * @example $(someSelector).autoNumeric('set', '12345.67'); // Formats the value being passed as the second parameter\r\n         *\r\n         * @param {*} newValue\r\n         * @returns {*|jQuery}\r\n         */\r\n        set(newValue) {\r\n            return $(this).each(function() {\r\n                if (newValue === null || isUndefined(newValue)) {\r\n                    return;\r\n                }\r\n\r\n                //TODO This looks a lot like `getInputIfSupportedTagAndType()`. Is that necessary? Can the input element be changed since autoNumeric has been initialized?\r\n                const $this = getCurrentElement(this);\r\n                const settings = $this.data('autoNumeric');\r\n                if (typeof settings !== 'object') {\r\n                    throwError(`Initializing autoNumeric is required prior to calling the \"set\" method.`);\r\n                }\r\n                // Reset the trailing negative settings, since it's possible the previous value was negative, but not the newly set one\r\n                settings.trailingNegative = false;\r\n\r\n                const $input = $this.is('input[type=text], input[type=hidden], input[type=tel], input:not([type])');\r\n\r\n                let value = toNumericValue(newValue, settings);\r\n                if (isNaN(value)) {\r\n                    return jQueryOriginalVal.call($this, '');\r\n                }\r\n\r\n                if (value !== '') {\r\n                    const [minTest, maxTest] = checkIfInRangeWithOverrideOption(value, settings);\r\n                    // This test is needed by the showPositiveSign option\r\n                    const isZero = isZeroOrHasNoValue(value);\r\n                    if (isZero) {\r\n                        value = '0';\r\n                    }\r\n\r\n                    if (minTest && maxTest) {\r\n                        if ($input || isInArray($this.prop('tagName').toLowerCase(), settings.tagList)) {\r\n                            // to ensure rounding does not happen twice\r\n                            let hasBeenRounded = false;\r\n\r\n                            // rounds the the extended decimal places\r\n                            let tempDecimal;\r\n                            if (settings.decimalPlacesShownOnFocus) {\r\n                                tempDecimal = settings.decimalPlacesOverride;\r\n                                settings.decimalPlacesOverride = Number(settings.decimalPlacesShownOnFocus);\r\n                                value = roundValue(value, settings);\r\n                                hasBeenRounded = true;\r\n                                settings.decimalPlacesOverride = tempDecimal;\r\n                            }\r\n\r\n                            if (settings.scaleDivisor && !settings.onOff) {\r\n                                value = roundValue(value, settings);\r\n                                settings.rawValue = cleanLeadingTrailingZeros(value.replace(settings.decimalCharacter, '.'), settings);\r\n                                value = toNumericValue(value, settings);\r\n                                value = value / settings.scaleDivisor;\r\n                                value = value.toString();\r\n                                if (settings.scaleDecimalPlaces) {\r\n                                    tempDecimal = settings.decimalPlacesOverride;\r\n                                    settings.decimalPlacesOverride = Number(settings.scaleDecimalPlaces);\r\n                                    value = roundValue(value, settings);\r\n                                    hasBeenRounded = true;\r\n                                }\r\n                            }\r\n\r\n                            // Rounds if this has not been done already\r\n                            if (!hasBeenRounded) {\r\n                                value = roundValue(value, settings);\r\n                            }\r\n\r\n                            // Stores rawValue including the decimalPlacesShownOnFocus\r\n                            if (!settings.scaleDivisor) {\r\n                                settings.rawValue = cleanLeadingTrailingZeros(value.replace(settings.decimalCharacter, '.'), settings);\r\n                            }\r\n\r\n                            value = modifyNegativeSignAndDecimalCharacterForFormattedValue(value, settings);\r\n                            value = addGroupSeparators(value, settings);\r\n\r\n                            if (settings.scaleDivisor && settings.scaleDecimalPlaces && !settings.onOff) {\r\n                                settings.decimalPlacesOverride = tempDecimal;\r\n                            }\r\n                        }\r\n\r\n                        if (settings.saveValueToSessionStorage && (settings.decimalPlacesShownOnFocus || settings.scaleDivisor)) {\r\n                            saveValueToPersistentStorage($this[0], settings, 'set');\r\n                        }\r\n                    } else {\r\n                        settings.rawValue = '';\r\n                        saveValueToPersistentStorage($this[0], settings, 'wipe');\r\n                        const attemptedValue = value;\r\n                        value = '';\r\n                        if (!minTest) {\r\n                            $this.trigger('autoNumeric:minExceeded');\r\n                        }\r\n\r\n                        if (!maxTest) {\r\n                            $this.trigger('autoNumeric:maxExceeded');\r\n                        }\r\n\r\n                        throwError(`The value [${attemptedValue}] being set falls outside of the minimumValue [${settings.minimumValue}] and maximumValue [${settings.maximumValue}] range set for this element`);\r\n\r\n                        return jQueryOriginalVal.call($this, '');\r\n                    }\r\n                } else {\r\n                    return jQueryOriginalVal.call($this, '');\r\n                }\r\n\r\n                if (!settings.hasFocus && settings.scaleSymbol) {\r\n                    value = value + settings.scaleSymbol;\r\n                }\r\n\r\n                if ($input) {\r\n                    return jQueryOriginalVal.call($this, value);\r\n                }\r\n\r\n                if (isInArray($this.prop('tagName').toLowerCase(), settings.tagList)) {\r\n                    return $this.text(value);\r\n                }\r\n\r\n                return false;\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Method to un-format inputs.\r\n         * This is handy to use right before form submission.\r\n         *\r\n         * By default, values are returned as ISO numeric strings (ie. \"1234.56\" or \"-1234.56\"), where the decimal character is a period.\r\n         * Locale formats are supported \"1234.56-\" or \"1234,56\" or \"-1234,56 or \"1234,56-\", or even plain numbers.\r\n         * Please see option \"outputFormat\" for more details\r\n         *\r\n         * @example $(someSelector).autoNumeric('unSet');\r\n         *\r\n         * @returns {*|jQuery}\r\n         */\r\n        unSet() {\r\n            return $(this).each(function() {\r\n                const $this = getCurrentElement(this);\r\n                const settings = $this.data('autoNumeric');\r\n                if (typeof settings === 'object') {\r\n                    settings.hasFocus = true;\r\n                    jQueryOriginalVal.call($this, $this.autoNumeric('getLocalized'));\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Method to re-format inputs.\r\n         * This is handy to use right after form submission.\r\n         *\r\n         * This is called after the 'unSet' method to reformat the input\r\n         *\r\n         * @example $(someSelector).autoNumeric('reSet');\r\n         *\r\n         * @returns {*|jQuery}\r\n         */\r\n        reSet() {\r\n            return $(this).each(function() {\r\n                const $this = getCurrentElement(this);\r\n                const settings = $this.data('autoNumeric');\r\n                if (typeof settings === 'object') {\r\n                    $this.autoNumeric('set', jQueryOriginalVal.call($this));\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Return the unformatted value as a string.\r\n         *\r\n         * @usage $(someSelector).autoNumeric('get');\r\n         *\r\n         * @returns {string}\r\n         */\r\n        get() {\r\n            //TODO Why would we need to get a new reference to $this since it has been done in `init()`?\r\n            const $this = getCurrentElement(this);\r\n            //TODO This looks a lot like `getInputIfSupportedTagAndType()`. Is that necessary? Can the input element be changed since autoNumeric has been initialized?\r\n            const $input = $this.is('input[type=text], input[type=hidden], input[type=tel], input:not([type])');\r\n            const settings = $this.data('autoNumeric');\r\n            if (typeof settings !== 'object') {\r\n                throwError(`Initializing autoNumeric is required prior to calling the \"get\" method.`);\r\n            }\r\n\r\n            // determine the element type then use .eq(0) selector to grab the value of the first element in selector\r\n            let value = '';\r\n            if ($input) {\r\n                value = jQueryOriginalVal.call($this.eq(0));\r\n            } else if (isInArray($this.prop('tagName').toLowerCase(), settings.tagList)) {\r\n                value = $this.eq(0).text();\r\n            } else {\r\n                throwError(`The \"<${$this.prop('tagName').toLowerCase()}>\" tag is not supported by autoNumeric`);\r\n            }\r\n\r\n            if (settings.decimalPlacesShownOnFocus || settings.scaleDivisor) {\r\n                value = settings.rawValue;\r\n            } else {\r\n                // Test if the value is negative\r\n                const isValueNegative = isNegative(value);\r\n\r\n                if (!(/\\d/).test(value) && settings.emptyInputBehavior === 'focus') {\r\n                    return '';\r\n                }\r\n\r\n                if (value !== '' && settings.negativeBracketsTypeOnBlur !== null) {\r\n                    settings.hasFocus = true;\r\n                    value = toggleNegativeBracket(value, settings);\r\n                }\r\n\r\n                if (settings.runOnce || settings.formatOnPageLoad === false) {\r\n                    // Strips trailing negative symbol\r\n                    value = stripAllNonNumberCharacters(value, settings, true);\r\n                    // Trims leading and trailing zeros when leadingZero does NOT equal \"keep\".\r\n                    value = cleanLeadingTrailingZeros(value.replace(settings.decimalCharacter, '.'), settings);\r\n\r\n                    // Places the negative symbol in front of the trailing negative\r\n                    if (settings.trailingNegative && isValueNegative && !isNegative(value) && Number(value) !== 0) {\r\n                        value = '-' + value;\r\n                    }\r\n                }\r\n\r\n                if (value !== '' || value === '' && settings.emptyInputBehavior === 'zero') {\r\n                    value = modifyNegativeSignAndDecimalCharacterForRawValue(value, settings);\r\n                }\r\n            }\r\n\r\n            // Always return a numeric string\r\n            // This gets rid of the trailing zeros in the decimal places since `get` does not pad decimals\r\n            return trimPaddedZerosFromDecimalPlaces(value);\r\n        },\r\n\r\n        /**\r\n         * Returns the unformatted value, but following the `outputFormat` setting, which means the output can either be :\r\n         * - a string (that could or could not represent a number (ie. \"12345,67-\")), or\r\n         * - a plain number (if the setting 'number' is used).\r\n         *\r\n         * By default the returned values are an ISO numeric string \"1234.56\" or \"-1234.56\" where the decimal character is a period.\r\n         * Check the \"outputFormat\" option definition for more details.\r\n         *\r\n         * @usage $(someSelector).autoNumeric('getLocalized');\r\n         *\r\n         * @returns {*}\r\n         */\r\n        getLocalized() {\r\n            const $this = getCurrentElement(this);\r\n            let value = $this.autoNumeric('get');\r\n            const settings = $this.data('autoNumeric');\r\n\r\n            if (Number(value) === 0 && settings.leadingZero !== 'keep') {\r\n                value = '0';\r\n            }\r\n\r\n            return toLocale(value, settings.outputFormat);\r\n        },\r\n\r\n        /**\r\n         * Return the input unformatted value as a real Javascript number.\r\n         *\r\n         * @usage $(someSelector).autoNumeric('getNumber');\r\n         *\r\n         * @returns {number}\r\n         */\r\n        getNumber() {\r\n            const $this = getCurrentElement(this);\r\n            const value = $this.autoNumeric('get');\r\n\r\n            return toLocale(value, 'number');\r\n        },\r\n\r\n        /**\r\n         * Return the current formatted value of the autoNumeric element.\r\n         * @usage aNInput.autoNumeric('getFormatted'))\r\n         *\r\n         * @returns {string}\r\n         */\r\n        getFormatted() {\r\n            // Make sure `this[0]` exists as well as `.value` before trying to access that property\r\n            if (!this.hasOwnProperty('0') || !('value' in this[0])) {\r\n                throwError('Unable to get the formatted string from the element.');\r\n            }\r\n\r\n            return this[0].value;\r\n        },\r\n\r\n        /**\r\n         * The \"getString\" method uses jQuery's .serialize() method that creates a text string in standard URL-encoded notation.\r\n         *\r\n         * It then loops through the string and un-formats the inputs with autoNumeric.\r\n         * By defaults values returned as ISO numeric string \"1234.56\" or \"-1234.56\" where the decimal character is a period\r\n         * Locale formats are supported \"1234.56-\" or \"1234,56\" or \"-1234,56 or \"1234,56-\" or plain numbers => please see option \"outputFormat\" for details\r\n         *\r\n         * @returns {string}\r\n         */\r\n        getString() {\r\n            return _getStringOrArray(false, this);\r\n        },\r\n\r\n        /**\r\n         * The \"getArray\" method on the other hand uses jQuery's .serializeArray() method that creates array or objects that can be encoded as a JSON string.\r\n         *\r\n         * It then loops through the string and un-formats the inputs with autoNumeric.\r\n         * By defaults values returned as ISO numeric string \"1234.56\" or \"-1234.56\" where the decimal character is a period\r\n         * Locale formats are supported \"1234.56-\" or \"1234,56\" or \"-1234,56 or \"1234,56-\" or plain numbers => please see option \"outputFormat\" for details\r\n         *\r\n         * @returns {{}|[]}\r\n         */\r\n        getArray() {\r\n            return _getStringOrArray(true, this);\r\n        },\r\n\r\n        /**\r\n         * The 'getSettings' function returns an object containing all the current autoNumeric settings.\r\n         *\r\n         * @example\r\n         * $(someSelector).autoNumeric('getSettings');\r\n         * $(someSelector).autoNumeric('getSettings').decimalCharacter; // Return the decimalCharacter setting as a string - any valid option name can be used\r\n         *\r\n         * @returns {object}\r\n         */\r\n        getSettings() {\r\n            //TODO Add an option argument `optionName` to this function so that it return only the value of that option, not the entire settings object\r\n            return this.data('autoNumeric');\r\n        },\r\n    };\r\n\r\n    /**\r\n     * The autoNumeric function accepts methods names (in string format) and those method parameters if needed.\r\n     * It initialize autoNumeric on the given element.\r\n     *\r\n     * @param {string} method The method name (ie. 'set', 'get', etc.)\r\n     * @param {*} args\r\n     * @returns {*}\r\n     */\r\n    $.fn.autoNumeric = function(method, ...args) {\r\n        if (methods[method]) {\r\n            return methods[method].apply(this, args);\r\n        }\r\n\r\n        if (typeof method === 'object' || !method) {\r\n            // The options have been passed directly, without using a named method\r\n            return methods.init.apply(this, [method]);\r\n        }\r\n\r\n        throwError(`Method \"${method}\" is not supported by autoNumeric`);\r\n    };\r\n\r\n    /**\r\n     * Return the default autoNumeric settings.\r\n     *\r\n     * @returns {object}\r\n     */\r\n    getDefaultConfig = () => defaultSettings;\r\n\r\n    $.fn.autoNumeric.defaults = defaultSettings; // Make those settings public via jQuery too.\r\n\r\n    /**\r\n     * Return all the predefined language options in one object.\r\n     * You can also access a specific language object directly by using `an.getLanguages().French` for instance.\r\n     *\r\n     * @returns {object}\r\n     */\r\n    getLanguages = () => languageOption;\r\n\r\n    $.fn.autoNumeric.lang = languageOption; // Make those predefined language options public via jQuery too.\r\n\r\n    /**\r\n     * Public function that allows formatting without an element trigger.\r\n     *\r\n     * @param {number|string} value A number, or a string that represent a javascript number\r\n     * @param {object|null} options\r\n     * @returns {*}\r\n     */\r\n    autoFormat = (value, options = null) => {\r\n        if (isUndefined(value) || value === null) {\r\n            return null;\r\n        }\r\n\r\n        if (!isString(value) && !isNumber(value)) {\r\n            throwError(`The value \"${value}\" being \"set\" is not numeric and therefore cannot be used appropriately.`);\r\n        }\r\n\r\n        // Initiate a very basic settings object\r\n        const settings = $.extend({}, defaultSettings, { strip: false }, options);\r\n        if (value < 0) {\r\n            settings.negativeSignCharacter = '-';\r\n        }\r\n\r\n        if (isNull(settings.decimalPlacesOverride)) {\r\n            settings.decimalPlacesOverride = maximumVMinAndVMaxDecimalLength(settings.minimumValue, settings.maximumValue);\r\n        }\r\n\r\n        // Check the validity of the `value` parameter\r\n        // Convert the value to a numeric string, stripping unnecessary characters in the process\r\n        let valueString = toNumericValue(value, settings);\r\n        if (isNaN(valueString)) {\r\n            throwError(`The value [${valueString}] that you are trying to format is not a recognized number.`);\r\n        }\r\n\r\n        // Basic tests to check if the given valueString is valid\r\n        const [minTest, maxTest] = checkIfInRangeWithOverrideOption(valueString, settings);\r\n        if (!minTest || !maxTest) {\r\n            // Throw a custom event\r\n            triggerEvent('autoFormat.autoNumeric', document, `Range test failed`);\r\n            throwError(`The value [${valueString}] being set falls outside of the minimumValue [${settings.minimumValue}] and maximumValue [${settings.maximumValue}] range set for this element`);\r\n        }\r\n\r\n        // Everything is ok, proceed to rounding, formatting and grouping\r\n        valueString = roundValue(valueString, settings);\r\n        valueString = modifyNegativeSignAndDecimalCharacterForFormattedValue(valueString, settings);\r\n        valueString = addGroupSeparators(valueString, settings);\r\n\r\n        return valueString;\r\n    };\r\n\r\n    $.fn.autoFormat = autoFormat; // The jQuery export\r\n\r\n    /**\r\n     * Public function that allows unformatting without an element.\r\n     *\r\n     * @param {string|number} value\r\n     * @param {object} options\r\n     * @returns {*}\r\n     */\r\n    autoUnFormat = (value, options) => {\r\n        if (isUndefined(value) || value === null) {\r\n            return null;\r\n        }\r\n\r\n        // Giving an unformatted value should return the same unformatted value, whatever the options passed as a parameter\r\n        if (isNumber(value)) {\r\n            return Number(value);\r\n        }\r\n\r\n        if (isArray(value) || isObject(value)) { //TODO Complete the test to throw when given a wrongly formatted number (ie. 'foobar')\r\n            // Check the validity of the `value` parameter\r\n            throwError(`A number or a string representing a number is needed to be able to unformat it, [${value}] given.`);\r\n        }\r\n\r\n        const settings = $.extend({}, defaultSettings, { strip: false }, options);\r\n        const allowed = `-0123456789\\\\${settings.decimalCharacter}`;\r\n        const autoStrip = new RegExp(`[^${allowed}]`, 'gi');\r\n        value = value.toString();\r\n\r\n        // This checks is a negative sign is anywhere in the `value`, not just on the very first character (ie. '12345.67-')\r\n        if (isNegative(value)) {\r\n            settings.negativeSignCharacter = '-';\r\n        } else if (settings.negativeBracketsTypeOnBlur && settings.negativeBracketsTypeOnBlur.split(',')[0] === value.charAt(0)) {\r\n            settings.negativeSignCharacter = '-';\r\n            settings.hasFocus = true;\r\n            value = toggleNegativeBracket(value, settings);\r\n        }\r\n\r\n        value = value.replace(autoStrip, '');\r\n        value = value.replace(settings.decimalCharacter, '.');\r\n        value = toLocale(value, settings.outputFormat);\r\n\r\n        return value;\r\n    };\r\n\r\n    $.fn.autoUnformat = autoUnFormat; // The jQuery export\r\n\r\n    /**\r\n     * Validate the given option object.\r\n     * If the options are valid, this function returns nothing, otherwise if the options are invalid, this function throws an error.\r\n     *\r\n     * This tests if the options are not conflicting and are well formatted.\r\n     * This function is lenient since it only tests the settings properties ; it ignores any other properties the options object could have.\r\n     *\r\n     * @param {*} userOptions\r\n     * @param {Boolean} shouldExtendDefaultOptions If TRUE, then this function will extends the `userOptions` passed by the user, with the default options.\r\n     * @throws Error\r\n     */\r\n    validate = (userOptions, shouldExtendDefaultOptions = true) => {\r\n        if (isUndefinedOrNullOrEmpty(userOptions) || !isObject(userOptions) || isEmptyObj(userOptions)) {\r\n            throwError(`The userOptions are invalid ; it should be a valid object, [${userOptions}] given.`);\r\n        }\r\n\r\n        // If the user used old options, we convert them to new ones\r\n        if (!isNull(userOptions)) {\r\n            convertOldOptionsToNewOnes(userOptions);\r\n        }\r\n\r\n        // The user can choose if the `userOptions` has already been extended with the default options, or not\r\n        let options;\r\n        if (shouldExtendDefaultOptions) {\r\n            options = $.extend({}, defaultSettings, userOptions);\r\n        } else {\r\n            options = userOptions;\r\n        }\r\n\r\n        // First things first, we test that the `showWarnings` option is valid\r\n        if (!isTrueOrFalseString(options.showWarnings) && !isBoolean(options.showWarnings)) {\r\n            throwError(`The debug option 'showWarnings' is invalid ; it should be either 'false' or 'true', [${options.showWarnings}] given.`);\r\n        }\r\n\r\n        // Define the regular expressions needed for the following tests\r\n        const testPositiveInteger = /^[0-9]+$/;\r\n        const testNumericalCharacters = /[0-9]+/;\r\n        // const testFloatAndPossibleNegativeSign = /^-?[0-9]+(\\.?[0-9]+)$/;\r\n        const testFloatOrIntegerAndPossibleNegativeSign = /^-?[0-9]+(\\.?[0-9]+)?$/;\r\n        const testPositiveFloatOrInteger = /^[0-9]+(\\.?[0-9]+)?$/;\r\n\r\n        // Then tests the options individually\r\n        if (!isInArray(options.digitGroupSeparator, [\r\n            ',',      // Comma\r\n            '.',      // Dot\r\n            ' ',      // Normal space\r\n            '\\u2009', // Thin-space\r\n            '\\u202f', // Narrow no-break space\r\n            '\\u00a0', // No-break space\r\n            '',       // No separator\r\n            \"'\",      // Apostrophe\r\n            '٬',      // Arabic thousands separator\r\n            '˙',      // Dot above\r\n        ])) {\r\n            throwError(`The thousand separator character option 'digitGroupSeparator' is invalid ; it should be ',', '.', '٬', '˙', \"'\", ' ', '\\u2009', '\\u202f', '\\u00a0' or empty (''), [${options.digitGroupSeparator}] given.`);\r\n        }\r\n\r\n        if (!isTrueOrFalseString(options.noSeparatorOnFocus) && !isBoolean(options.noSeparatorOnFocus)) {\r\n            throwError(`The 'noSeparatorOnFocus' option is invalid ; it should be either 'false' or 'true', [${options.noSeparatorOnFocus}] given.`);\r\n        }\r\n\r\n        if (!testPositiveInteger.test(options.digitalGroupSpacing)) {\r\n            throwError(`The digital grouping for thousand separator option 'digitalGroupSpacing' is invalid ; it should be a positive integer, [${options.digitalGroupSpacing}] given.`);\r\n        }\r\n\r\n        if (!isInArray(options.decimalCharacter, [\r\n            ',', // Comma\r\n            '.', // Dot\r\n            '·', // Middle-dot\r\n            '٫', // Arabic decimal separator\r\n            '⎖', // Decimal separator key symbol\r\n        ])) {\r\n            throwError(`The decimal separator character option 'decimalCharacter' is invalid ; it should be '.', ',', '·', '⎖' or '٫', [${options.decimalCharacter}] given.`);\r\n        }\r\n\r\n        // Checks if the decimal and thousand characters are the same\r\n        if (options.decimalCharacter === options.digitGroupSeparator) {\r\n            throwError(`autoNumeric will not function properly when the decimal character 'decimalCharacter' [${options.decimalCharacter}] and the thousand separator 'digitGroupSeparator' [${options.digitGroupSeparator}] are the same character.`);\r\n        }\r\n\r\n        if (!isNull(options.decimalCharacterAlternative) && !isString(options.decimalCharacterAlternative)) {\r\n            throwError(`The alternate decimal separator character option 'decimalCharacterAlternative' is invalid ; it should be a string, [${options.decimalCharacterAlternative}] given.`);\r\n        }\r\n\r\n        if (options.currencySymbol !== '' && !isString(options.currencySymbol)) {\r\n            throwError(`The currency symbol option 'currencySymbol' is invalid ; it should be a string, [${options.currencySymbol}] given.`);\r\n        }\r\n\r\n        if (!isInArray(options.currencySymbolPlacement, ['p', 's'])) {\r\n            throwError(`The placement of the currency sign option 'currencySymbolPlacement' is invalid ; it should either be 'p' (prefix) or 's' (suffix), [${options.currencySymbolPlacement}] given.`);\r\n        }\r\n\r\n        if (!isInArray(options.negativePositiveSignPlacement, ['p', 's', 'l', 'r', null])) {\r\n            throwError(`The placement of the negative sign option 'negativePositiveSignPlacement' is invalid ; it should either be 'p' (prefix), 's' (suffix), 'l' (left), 'r' (right) or 'null', [${options.negativePositiveSignPlacement}] given.`);\r\n        }\r\n\r\n        if (!isTrueOrFalseString(options.showPositiveSign) && !isBoolean(options.showPositiveSign)) {\r\n            throwError(`The show positive sign option 'showPositiveSign' is invalid ; it should be either 'false' or 'true', [${options.showPositiveSign}] given.`);\r\n        }\r\n\r\n        if (!isString(options.suffixText) || (options.suffixText !== '' && (isNegative(options.suffixText) || testNumericalCharacters.test(options.suffixText)))) {\r\n            throwError(`The additional suffix option 'suffixText' is invalid ; it should not contains the negative sign '-' nor any numerical characters, [${options.suffixText}] given.`);\r\n        }\r\n\r\n        if (!isNull(options.overrideMinMaxLimits) && !isInArray(options.overrideMinMaxLimits, ['ceiling', 'floor', 'ignore'])) {\r\n            throwError(`The override min & max limits option 'overrideMinMaxLimits' is invalid ; it should either be 'ceiling', 'floor' or 'ignore', [${options.overrideMinMaxLimits}] given.`);\r\n        }\r\n\r\n        if (!isString(options.maximumValue) || !testFloatOrIntegerAndPossibleNegativeSign.test(options.maximumValue)) {\r\n            throwError(`The maximum possible value option 'maximumValue' is invalid ; it should be a string that represents a positive or negative number, [${options.maximumValue}] given.`);\r\n        }\r\n\r\n        if (!isString(options.minimumValue) || !testFloatOrIntegerAndPossibleNegativeSign.test(options.minimumValue)) {\r\n            throwError(`The minimum possible value option 'minimumValue' is invalid ; it should be a string that represents a positive or negative number, [${options.minimumValue}] given.`);\r\n        }\r\n\r\n        if (parseFloat(options.minimumValue) > parseFloat(options.maximumValue)) {\r\n            throwError(`The minimum possible value option is greater than the maximum possible value option ; 'minimumValue' [${options.minimumValue}] should be smaller than 'maximumValue' [${options.maximumValue}].`);\r\n        }\r\n\r\n        if (!(isNull(options.decimalPlacesOverride) ||\r\n            (isInt(options.decimalPlacesOverride) && options.decimalPlacesOverride >= 0) || // If integer option\r\n            (isString(options.decimalPlacesOverride) && testPositiveInteger.test(options.decimalPlacesOverride)))  // If string option\r\n        ) {\r\n            throwError(`The maximum number of decimal places option 'decimalPlacesOverride' is invalid ; it should be a positive integer, [${options.decimalPlacesOverride}] given.`);\r\n        }\r\n\r\n        // Write a warning message in the console if the number of decimal in minimumValue/maximumValue is overridden by decimalPlacesOverride (and not if decimalPlacesOverride is equal to the number of decimal used in minimumValue/maximumValue)\r\n        const vMinAndVMaxMaximumDecimalPlaces = maximumVMinAndVMaxDecimalLength(options.minimumValue, options.maximumValue);\r\n        if (!isNull(options.decimalPlacesOverride) && vMinAndVMaxMaximumDecimalPlaces !== Number(options.decimalPlacesOverride)) {\r\n            warning(`Setting 'decimalPlacesOverride' to [${options.decimalPlacesOverride}] will override the decimals declared in 'minimumValue' [${options.minimumValue}] and 'maximumValue' [${options.maximumValue}].`, options.showWarnings);\r\n        }\r\n\r\n        if (!options.allowDecimalPadding && !isNull(options.decimalPlacesOverride)) {\r\n            warning(`Setting 'allowDecimalPadding' to [false] will override the current 'decimalPlacesOverride' setting [${options.decimalPlacesOverride}].`, options.showWarnings);\r\n        }\r\n\r\n        if (!isNull(options.decimalPlacesShownOnFocus) && (!isString(options.decimalPlacesShownOnFocus) || !testPositiveInteger.test(options.decimalPlacesShownOnFocus))) {\r\n            throwError(`The number of expanded decimal places option 'decimalPlacesShownOnFocus' is invalid ; it should be a positive integer, [${options.decimalPlacesShownOnFocus}] given.`);\r\n        }\r\n\r\n        // Checks if the extended decimal places \"decimalPlacesShownOnFocus\" is greater than the normal decimal places \"decimalPlacesOverride\"\r\n        if (!isNull(options.decimalPlacesShownOnFocus) && !isNull(options.decimalPlacesOverride) && Number(options.decimalPlacesOverride) > Number(options.decimalPlacesShownOnFocus)) {\r\n            warning(`The extended decimal places 'decimalPlacesShownOnFocus' [${options.decimalPlacesShownOnFocus}] should be greater than the 'decimalPlacesOverride' [${options.decimalPlacesOverride}] value. Currently, this will limit the ability of your client to manually change some of the decimal places. Do you really want to do that?`, options.showWarnings);\r\n        }\r\n\r\n        if (!isNull(options.scaleDivisor) && !testPositiveFloatOrInteger.test(options.scaleDivisor)) {\r\n            throwError(`The scale divisor option 'scaleDivisor' is invalid ; it should be a positive number, preferably an integer, [${options.scaleDivisor}] given.`);\r\n        }\r\n\r\n        if (!isNull(options.scaleDecimalPlaces) && !testPositiveInteger.test(options.scaleDecimalPlaces)) {\r\n            throwError(`The scale number of decimals option 'scaleDecimalPlaces' is invalid ; it should be a positive integer, [${options.scaleDecimalPlaces}] given.`);\r\n        }\r\n\r\n        if (!isNull(options.scaleSymbol) && !isString(options.scaleSymbol)) {\r\n            throwError(`The scale symbol option 'scaleSymbol' is invalid ; it should be a string, [${options.scaleSymbol}] given.`);\r\n        }\r\n\r\n        if (!isTrueOrFalseString(options.saveValueToSessionStorage) && !isBoolean(options.saveValueToSessionStorage)) {\r\n            throwError(`The save to session storage option 'saveValueToSessionStorage' is invalid ; it should be either 'false' or 'true', [${options.saveValueToSessionStorage}] given.`);\r\n        }\r\n\r\n        if (!isInArray(options.onInvalidPaste, [\r\n            'error',\r\n            'ignore',\r\n            'clamp',\r\n            'truncate',\r\n            'replace',\r\n        ])) {\r\n            throwError(`The paste behavior option 'onInvalidPaste' is invalid ; it should either be 'error', 'ignore', 'clamp', 'truncate' or 'replace' (cf. documentation), [${options.onInvalidPaste}] given.`);\r\n        }\r\n\r\n        if (!isInArray(options.roundingMethod, [\r\n            'S',\r\n            'A',\r\n            's',\r\n            'a',\r\n            'B',\r\n            'U',\r\n            'D',\r\n            'C',\r\n            'F',\r\n            'N05',\r\n            'CHF',\r\n            'U05',\r\n            'D05',\r\n        ])) {\r\n            throwError(`The rounding method option 'roundingMethod' is invalid ; it should either be 'S', 'A', 's', 'a', 'B', 'U', 'D', 'C', 'F', 'N05', 'CHF', 'U05' or 'D05' (cf. documentation), [${options.roundingMethod}] given.`);\r\n        }\r\n\r\n        if (!isTrueOrFalseString(options.allowDecimalPadding) && !isBoolean(options.allowDecimalPadding)) {\r\n            throwError(`The control decimal padding option 'allowDecimalPadding' is invalid ; it should be either 'false' or 'true', [${options.allowDecimalPadding}] given.`);\r\n        }\r\n\r\n        if (!isNull(options.negativeBracketsTypeOnBlur) && !isInArray(options.negativeBracketsTypeOnBlur, ['(,)', '[,]', '<,>', '{,}'])) {\r\n            throwError(`The brackets for negative values option 'negativeBracketsTypeOnBlur' is invalid ; it should either be '(,)', '[,]', '<,>' or '{,}', [${options.negativeBracketsTypeOnBlur}] given.`);\r\n        }\r\n\r\n        if (!isInArray(options.emptyInputBehavior, ['focus', 'press', 'always', 'zero'])) {\r\n            throwError(`The display on empty string option 'emptyInputBehavior' is invalid ; it should either be 'focus', 'press', 'always' or 'zero', [${options.emptyInputBehavior}] given.`);\r\n        }\r\n\r\n        if (!isInArray(options.leadingZero, ['allow', 'deny', 'keep'])) {\r\n            throwError(`The leading zero behavior option 'leadingZero' is invalid ; it should either be 'allow', 'deny' or 'keep', [${options.leadingZero}] given.`);\r\n        }\r\n\r\n        if (!isTrueOrFalseString(options.formatOnPageLoad) && !isBoolean(options.formatOnPageLoad)) {\r\n            throwError(`The format on initialization option 'formatOnPageLoad' is invalid ; it should be either 'false' or 'true', [${options.formatOnPageLoad}] given.`);\r\n        }\r\n\r\n        if (!isTrueOrFalseString(options.selectNumberOnly) && !isBoolean(options.selectNumberOnly)) {\r\n            throwError(`The select number only option 'selectNumberOnly' is invalid ; it should be either 'false' or 'true', [${options.selectNumberOnly}] given.`);\r\n        }\r\n\r\n        if (!isNull(options.defaultValueOverride) && (options.defaultValueOverride !== '' && !testFloatOrIntegerAndPossibleNegativeSign.test(options.defaultValueOverride))) {\r\n            throwError(`The unformatted default value option 'defaultValueOverride' is invalid ; it should be a string that represents a positive or negative number, [${options.defaultValueOverride}] given.`);\r\n        }\r\n\r\n        if (!isTrueOrFalseString(options.unformatOnSubmit) && !isBoolean(options.unformatOnSubmit)) {\r\n            throwError(`The remove formatting on submit option 'unformatOnSubmit' is invalid ; it should be either 'false' or 'true', [${options.unformatOnSubmit}] given.`);\r\n        }\r\n\r\n        if (!isNull(options.outputFormat) && !isInArray(options.outputFormat, [\r\n            'string',\r\n            'number',\r\n            '.',\r\n            '-.',\r\n            ',',\r\n            '-,',\r\n            '.-',\r\n            ',-',\r\n        ])) {\r\n            throwError(`The custom locale format option 'outputFormat' is invalid ; it should either be null, 'string', 'number', '.', '-.', ',', '-,', '.-' or ',-', [${options.outputFormat}] given.`);\r\n        }\r\n\r\n        if (!isTrueOrFalseString(options.failOnUnknownOption) && !isBoolean(options.failOnUnknownOption)) {\r\n            throwError(`The debug option 'failOnUnknownOption' is invalid ; it should be either 'false' or 'true', [${options.failOnUnknownOption}] given.`);\r\n        }\r\n    };\r\n\r\n    $.fn.autoValidate = validate;\r\n\r\n    /**\r\n     * Return TRUE is the settings/options are valid, FALSE otherwise.\r\n     *\r\n     * @param {object} options\r\n     * @returns {boolean}\r\n     */\r\n    areSettingsValid = function(options) {\r\n        let isValid = true;\r\n        try {\r\n            validate(options);\r\n        }\r\n        catch (error) {\r\n            isValid = false;\r\n        }\r\n\r\n        return isValid;\r\n    };\r\n\r\n    /**\r\n     * Take an arabic number as a string and return a javascript number.\r\n     * By default, this function does not try to convert the arabic decimal and thousand separator characters.\r\n     * This returns `NaN` is the conversion is not possible.\r\n     * Based on http://stackoverflow.com/a/17025392/2834898\r\n     *\r\n     * @param {string} arabicNumbers\r\n     * @param {boolean} returnANumber If `true`, return a Number, otherwise return a String\r\n     * @param {boolean} parseDecimalCharacter\r\n     * @param {boolean} parseThousandSeparator\r\n     * @returns {string|number|NaN}\r\n     */\r\n    function arabicToLatinNumbers(arabicNumbers, returnANumber = true, parseDecimalCharacter = false, parseThousandSeparator = false) {\r\n        let result = arabicNumbers.toString();\r\n        if (result === '' || result.match(/[٠١٢٣٤٥٦٧٨٩۴۵۶]/g) === null) {\r\n            // If no Arabic/Persian numbers are found, return the numeric string directly\r\n            return arabicNumbers;\r\n        }\r\n\r\n        if (parseDecimalCharacter) {\r\n            result = result.replace(/٫/, '.'); // Decimal character\r\n        }\r\n\r\n        if (parseThousandSeparator) {\r\n            result = result.replace(/٬/g, ''); // Thousand separator\r\n        }\r\n\r\n        // Replace the numbers only\r\n        result = result.replace(/[٠١٢٣٤٥٦٧٨٩]/g, d => d.charCodeAt(0) - 1632) // Arabic numbers\r\n                       .replace(/[۰۱۲۳۴۵۶۷۸۹]/g, d => d.charCodeAt(0) - 1776); // Persian numbers\r\n\r\n        // `NaN` has precedence over the string `'NaN'`\r\n        const resultAsNumber = Number(result);\r\n        if (isNaN(resultAsNumber)) {\r\n            return resultAsNumber;\r\n        }\r\n\r\n        if (returnANumber) {\r\n            result = resultAsNumber;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Create a custom event and immediately sent it from the given element.\r\n     * By default, if no element is given, the event is thrown from `document`.\r\n     *\r\n     * @param {string} eventName\r\n     * @param {Element} element\r\n     * @param {object} detail\r\n     */\r\n    function triggerEvent(eventName, element = document, detail = null) {\r\n        let event;\r\n        if (window.CustomEvent) {\r\n            event = new CustomEvent(eventName, { detail, bubbles: false, cancelable: false }); // This is not supported by default by IE ; We use the polyfill for IE9 and later.\r\n        } else {\r\n            event = document.createEvent('CustomEvent');\r\n            event.initCustomEvent(eventName, true, true, { detail });\r\n        }\r\n\r\n        element.dispatchEvent(event);\r\n    }\r\n\r\n    /**\r\n     * Polyfill from https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent for obsolete browsers (IE)\r\n     */\r\n    (function() {\r\n        if (typeof window.CustomEvent === 'function') {\r\n            return false;\r\n        }\r\n\r\n        function CustomEvent(event, params) {\r\n            params = params || { bubbles: false, cancelable: false, detail: void(0) };\r\n            const evt = document.createEvent('CustomEvent');\r\n            evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\r\n            return evt;\r\n        }\r\n\r\n        CustomEvent.prototype = window.Event.prototype;\r\n        window.CustomEvent = CustomEvent;\r\n    })();\r\n\r\n    jQuery.extend(true, defaultSettings, jQuery.fn.autoNumeric.lang.Turkish, { currencySymbol: '' });\r\n\r\n    // Hijack the original val fn in order to\r\n    // use $autoNumeric.val() and be able to get/set\r\n    // the unmasked value.\r\n    jQuery.fn.val = function (value) {\r\n        const me = this,\r\n              $me = $(me);\r\n\r\n        // If we're not dealing with an instance of autoNumeric,\r\n        // simply call the original jQuery.fn.val\r\n        if ($me.data('autoNumeric') === undefined) {\r\n            return jQueryOriginalVal.apply(me, arguments);\r\n        }\r\n\r\n        if (!arguments.length) { // We're trying to read the numeric value\r\n            return $me.autoNumeric('get');\r\n        }\r\n        else { // We're trying to set a value\r\n            const originalVal = value;\r\n            let numericValue;\r\n\r\n            if (typeof value === 'string') {\r\n                value = value.replace(',', '.');\r\n                numericValue = parseFloat(value, 10);\r\n\r\n                if (isNaN(numericValue)) {\r\n                    throw `\"${originalVal}\" is not a number.`;\r\n                }\r\n            }\r\n            else if (typeof value !== 'number') {\r\n                throw `The type \"${typeof value}\" is not supported.`;\r\n            }\r\n            else {\r\n                numericValue = value;\r\n            }\r\n\r\n            return $me.autoNumeric('set', numericValue);\r\n        }\r\n    };\r\n}));\r\n\r\n/**\r\n * This exports the interface for the autoNumeric object\r\n */\r\nexport default {\r\n    format  : autoFormat,\r\n    unFormat: autoUnFormat,\r\n    getDefaultConfig,\r\n    getLanguages,\r\n    validate, // an.validate(options) : throws if necessary\r\n    areSettingsValid, // an.areSettingsValid(options) : return true or false //TODO Is this redundant? Should we let the developers wrap each autoNumeric.validate() calls in try/catch block? Or should we just facilitate their life by doing it already?\r\n\r\n    //TODO Complete the interface with functions having the following signatures :\r\n    //init         : an.init(options, input)\r\n    //get          : an.get(input)\r\n    //set          : an.set(value, input)\r\n    //formString   : an.formString(form)\r\n    //formArray    : an.formArray(form)\r\n    //getFormatted : an.getFormatted(input)\r\n    //unset        : an.unset(input) //to rename to 'unformat'? (and merge with autoUnFormat/unFormat?)\r\n    //reformat     : an.reformat(input) // 'reSet' is very to close to 'reset' and therefore should be renamed. We could still expose 'reSet', but add a @deprecated tag on its declaration.\r\n    //settings     : an.settings(input)\r\n    //update       : an.update(options, input)\r\n    //wipe         : an.wipe(input)\r\n    //destroy      : an.destroy(input)\r\n\r\n    //raw          : an.raw(input) // Return the unformatted value as a string\r\n    //number       : an.number(input) // Return the unformatted value as a number (Warning: This can lead to precision problems with big numbers)\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/autoNumeric.js","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":\"jQuery\",\"commonjs\":\"jquery\",\"commonjs2\":\"jquery\",\"amd\":\"jquery\"}\n// module id = 1\n// module chunks = 0"],"sourceRoot":""}